<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[一例数组越界引发栈被破坏问题的定位与修复]]></title>
      <url>http://shenyu.wiki/2017/11/20/%E4%B8%80%E4%BE%8B%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C%E5%BC%95%E5%8F%91%E6%A0%88%E8%A2%AB%E7%A0%B4%E5%9D%8F%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%9A%E4%BD%8D%E4%B8%8E%E4%BF%AE%E5%A4%8D/</url>
      <content type="html"><![CDATA[<blockquote>
<p>由于C语言自身无法检查数组越界，所以经常因为数组越界而写坏了内存。因为写坏位置和实际的错误代码位置往往距离比较远。从而造成此类问题往往难于定位。正好最近发现了一例此类问题，和大家分享一下定位与修复的过程。</p>
</blockquote>
<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>程序突然abort停机。经过还原当时的场景，发现是由于连接数过大导致。当连接数大于1000个时，错误几乎每次必现。<br>经过gdb读取coredump文件发现如下错误堆栈：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Thread 1 (Thread 0x7f32baa41700 (LWP 16184)):</div><div class="line">#0  0x00007f32e1049cb0 in ?? () from /lib64/libgcc_s.so.1</div><div class="line">#1  0x00007f32e104b00e in _Unwind_Backtrace () from /lib64/libgcc_s.so.1</div><div class="line">#2  0x00007f32f041f636 in backtrace () from /lib64/libc.so.6</div><div class="line">#3  0x00000000008613a5 in debug_backtrace () at elog.c:2885</div><div class="line">#4  0x0000000000861805 in StandardHandlerForSigillSigsegvSigbus_OnMainThread (processName=&lt;optimized out&gt;, postgres_signal_arg=11) at elog.c:2974</div><div class="line">#5  &lt;signal handler called&gt;</div><div class="line">#6  0x00007f32bbca6a03 in SOCK_get_next_byte (self=&lt;error reading variable: Cannot access memory at address 0xffffffffffffffda&gt;, self@entry=&lt;error reading variable: Cannot access memory at address 0xa&gt;) at socket.c:1211</div><div class="line">Cannot access memory at address 0xa</div></pre></td></tr></table></figure>
<h2 id="错误堆栈分析"><a href="#错误堆栈分析" class="headerlink" title="错误堆栈分析"></a>错误堆栈分析</h2><p>错误堆栈显示由于非法内存访问引发了SIGSEGV信号，SIGSEGV信号被软件内建的异常处理机制捕获，从而abort退出。然而堆栈显示并不十分完整，只到了<code>SOCK_get_next_byte</code>这个函数这里，他的调用者没有显示出来。我们首先通过汇编来看一下具体出错的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function SOCK_get_next_byte:</div><div class="line">...</div><div class="line">   0x00007f32bbca69ee &lt;+317&gt;:	mov    %rax,-0x18(%rbp)</div><div class="line">   0x00007f32bbca69f2 &lt;+321&gt;:	mov    -0x28(%rbp),%rdi</div><div class="line">   0x00007f32bbca69f6 &lt;+325&gt;:	mov    -0x1c(%rbp),%edx</div><div class="line">   0x00007f32bbca69f9 &lt;+328&gt;:	mov    $0x0,%esi</div><div class="line">   0x00007f32bbca69fe &lt;+333&gt;:	callq  0x7f32bbca6271 &lt;SOCK_wait_for_ready&gt;</div><div class="line">=&gt; 0x00007f32bbca6a03 &lt;+338&gt;:	mov    %eax,-0x4(%rbp)</div><div class="line">   0x00007f32bbca6a06 &lt;+341&gt;:	mov    -0x18(%rbp),%rax</div><div class="line">   0x00007f32bbca6a0a &lt;+345&gt;:	mov    %rax,-0x28(%rbp)</div><div class="line">   0x00007f32bbca6a0e &lt;+349&gt;:	cmpl   $0x0,-0x4(%rbp)</div><div class="line">   0x00007f32bbca6a12 &lt;+353&gt;:	jns    0x7f32bbca6920 &lt;SOCK_get_next_byte+111&gt;</div><div class="line">(gdb) p $rbp</div><div class="line">$1 = (void *) 0x2</div></pre></td></tr></table></figure></p>
<p>请注意箭头所指向的位置。该处汇编显示调用<code>SOCK_wait_for_ready</code>返回之后访问<code>rbp</code>出现错误，经过调试发现<code>rbp=0x2</code>，已经是一个无效的地址。</p>
<p>寄存器<code>rbp</code>是怎么被写坏的呢？我们看调用<code>SOCK_wait_for_ready</code>时怎么操作<code>rbp</code>的，以下是SOCK_wait_for_ready的汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(gdb) disas SOCK_wait_for_ready</div><div class="line">Dump of assembler code for function SOCK_wait_for_ready:</div><div class="line">   0x00007f4ec6098271 &lt;+0&gt;:	push   %rbp</div><div class="line">   0x00007f4ec6098272 &lt;+1&gt;:	mov    %rsp,%rbp</div><div class="line">   0x00007f4ec6098275 &lt;+4&gt;:	push   %rbx</div><div class="line">   0x00007f4ec6098276 &lt;+5&gt;:	sub    $0x178,%rsp</div><div class="line">   0x00007f4ec609827d &lt;+12&gt;:	mov    %rdi,-0x158(%rbp)</div><div class="line">   0x00007f4ec6098284 &lt;+19&gt;:	mov    %esi,-0x15c(%rbp)</div><div class="line">   0x00007f4ec609828a &lt;+25&gt;:	mov    %edx,-0x160(%rbp)</div><div class="line">   0x00007f4ec6098290 &lt;+31&gt;:	movl   $0x0,-0x30(%rbp)</div><div class="line">...</div><div class="line">   0x00007f4ec6098578 &lt;+775&gt;:	add    $0x178,%rsp</div><div class="line">   0x00007f4ec609857f &lt;+782&gt;:	pop    %rbx</div><div class="line">   0x00007f4ec6098580 &lt;+783&gt;:	leaveq </div><div class="line">   0x00007f4ec6098581 &lt;+784&gt;:	retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure></p>
<p>首先是<code>pop rbp</code>把他保存到了栈上，最后<code>leaveq</code>在栈上取出值恢复了<code>rbp</code>。<br>注：leave等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mov %rbp %rsp</div><div class="line">pop %rbp</div></pre></td></tr></table></figure></p>
<p><code>rbp</code>的值出现问题，是在<code>pop %rbp</code>的时候从栈上弹出了一个垃圾值，所以我们高度怀疑是栈被写坏了。而栈被写坏就发生在<code>SOCK_wait_for_ready</code>这个函数里面。</p>
<h2 id="栈破坏检测"><a href="#栈破坏检测" class="headerlink" title="栈破坏检测"></a>栈破坏检测</h2><p>通过在SOCK_wait_for_ready函数添加堆栈破坏检测代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAGIC 1989</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> F_ENTER int __a=MAGIC</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> F_CHECK  \</span></div><div class="line">        <span class="meta-keyword">if</span> (__a!=MAGIC) \</div><div class="line">        &#123;\</div><div class="line">          printf(<span class="meta-string">"line%d\tstack error in %s, magic=%d\n"</span>,__LINE__,__func__,__a); \</div><div class="line">          fflush(stdout); \</div><div class="line">          abort(); \</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>我们发现具体的出错位置在832行：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">line832	<span class="built_in">stack</span> error in SOCK_wait_for_ready, magic=<span class="number">1991</span></div></pre></td></tr></table></figure></p>
<p>而这一行对应的源码是：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">fd_set fd_read;</div><div class="line">FD_ZERO(fd_read);</div><div class="line">FD_SET(sock, &amp;fd_read);  <span class="comment">/* line 832 */</span></div><div class="line"><span class="keyword">struct</span> timeval tv;</div><div class="line">tv.tv_sec = <span class="number">5</span>;</div><div class="line">tv.tv_usec = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (select(sock + <span class="number">1</span>, &amp;fd_read, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;tv) != <span class="number">1</span>) &#123;</div><div class="line">   <span class="comment">// Error.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么FD_SET的作用是什么呢？看看FD_SET的源码（在libc库里面），FD_SET其实是一个数组：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fd_set my_fds;</div><div class="line">....</div><div class="line">FD_SET(<span class="number">1024</span>, &amp;my_fds);</div></pre></td></tr></table></figure></p>
<p>以上代码实际上类似于：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> my_fds[<span class="number">1024</span>];</div><div class="line">....</div><div class="line">my_fds[<span class="number">1024</span>] = <span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<p>这其实有两个限制：</p>
<ol>
<li>fd_set里面最多有1024个fd</li>
<li>fd_set里面的fd值最大为1024<br>那abort时的fd值是多少呢，和我们的猜测是否一致？让我们通过gdb来看一下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(gdb) p sock-&gt;socket</div><div class="line">$1 = 1089</div></pre></td></tr></table></figure>
</li>
</ol>
<p>看到当时出错堆栈的fd值是1089，显然超过了最大值。而FD_SET是数组实现的，从而导致数据写越界产生本次的core。至此问题定位。</p>
<h2 id="修改方案"><a href="#修改方案" class="headerlink" title="修改方案"></a>修改方案</h2><p>修改方法很简单，就是用poll来代替select。因为poll没有对fd的限制。比如把：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">fd_set fd_read;</div><div class="line">FD_ZERO(fd_read);</div><div class="line">FD_SET(sock, &amp;fd_read);</div><div class="line"><span class="keyword">struct</span> timeval tv;</div><div class="line">tv.tv_sec = <span class="number">5</span>;</div><div class="line">tv.tv_usec = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (select(sock + <span class="number">1</span>, &amp;fd_read, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;tv) != <span class="number">1</span>) &#123;</div><div class="line">   <span class="comment">// Error.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>直接替换为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> pollfd pfd_read;</div><div class="line"><span class="keyword">int</span> timeout = <span class="number">5000</span>;</div><div class="line">pfd_read.fd = sock;</div><div class="line">pfd_read.events = POLLIN;</div><div class="line"><span class="keyword">if</span> (poll(&amp;pfd_read, <span class="number">1</span>, timeout) != <span class="number">1</span>) &#123;</div><div class="line">   <span class="comment">// Error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就可以了。经过测试，相同场景该问题不再出现。</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入理解postgres嵌入式sql]]></title>
      <url>http://shenyu.wiki/2017/11/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3postgres%E5%B5%8C%E5%85%A5%E5%BC%8Fsql/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h2><p>ESQL（Embedded SQL），嵌入式SQL：是一种将<a href="https://baike.baidu.com/item/SQL%E8%AF%AD%E5%8F%A5/5714895" target="_blank" rel="external">SQL语句</a>直接写入宿主语言的方法。宿主语言可以是C语言等等语言。</p>
<table>
<thead>
<tr>
<th>数据库</th>
<th>嵌入式SQL名称</th>
<th>文档</th>
</tr>
</thead>
<tbody>
<tr>
<td>Oracle</td>
<td>Pro*C</td>
<td><a href="https://docs.oracle.com/cd/E11882_01/appdev.112/e10825/toc.htm" target="_blank" rel="external">https://docs.oracle.com/cd/E11882_01/appdev.112/e10825/toc.htm</a></td>
</tr>
<tr>
<td>Kingbase</td>
<td>ESQL</td>
<td>联机帮助手册</td>
</tr>
<tr>
<td>Postgres</td>
<td>ECPG</td>
<td><a href="https://www.postgresql.org/docs/10/static/ecpg-concept.html" target="_blank" rel="external">https://www.postgresql.org/docs/10/static/ecpg-concept.html</a></td>
</tr>
</tbody>
</table>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><p>这样就可以在C语言里面直接书写SQL语句，比如我们对比如下两段代码：</p>
<p><strong>C语言调用libpq</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    PGconn     *conn;</div><div class="line">	PGresult   *res;</div><div class="line">    <span class="keyword">int</span> v1;</div><div class="line">    ...</div><div class="line">    res = PQexec(conn, <span class="string">"select a from test limit 1;"</span>);</div><div class="line">	v1 = atoi(PQgetvalue(res, <span class="number">0</span>, <span class="number">0</span>));</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>嵌入式SQL</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int main() &#123;</div><div class="line">	EXEC SQL BEGIN DECLARE SECTION;</div><div class="line">	int v1;</div><div class="line">	EXEC SQL END DECLARE SECTION;</div><div class="line">	...	</div><div class="line">	EXEC SQL SELECT a INTO :v1 FROM test LIMIT 1;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>优点：</strong></p>
<p>给应用研发人员带来了很大方便。这样使得研发人员可以不关注底层实现（比如上例子中的变量输出），较初级的程序员也可以有较高产出。</p>
<ul>
<li>用法简单</li>
<li>检查语法</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>受限制于ESQL本身的语法，不够灵活。适用于比较简单的应用。</li>
<li>ESQL底层基于libpq，所以ESQL功能只是libpq的一个子集。</li>
<li>性能一般。</li>
</ul>
<table>
<thead>
<tr>
<th>接口</th>
<th style="text-align:center">兼容性</th>
<th style="text-align:center">性能</th>
<th style="text-align:center">易用性</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>ESQL</td>
<td style="text-align:center">中</td>
<td style="text-align:center">中</td>
<td style="text-align:center">高</td>
<td style="text-align:center">少</td>
</tr>
<tr>
<td>libpq</td>
<td style="text-align:center">低</td>
<td style="text-align:center">高</td>
<td style="text-align:center">中</td>
<td style="text-align:center">多</td>
</tr>
<tr>
<td>ODBC</td>
<td style="text-align:center">高</td>
<td style="text-align:center">中</td>
<td style="text-align:center">低</td>
<td style="text-align:center">中</td>
</tr>
</tbody>
</table>
<h2 id="Who"><a href="#Who" class="headerlink" title="Who?"></a>Who?</h2><ul>
<li>应用研发人员</li>
<li>数据库研发人员</li>
</ul>
<h2 id="Where"><a href="#Where" class="headerlink" title="Where?"></a>Where?</h2><ul>
<li>新开发应用</li>
<li>迁移的应用</li>
</ul>
<h2 id="When"><a href="#When" class="headerlink" title="When?"></a>When?</h2><ul>
<li>规模相对较小的应用</li>
<li>程序原型验证</li>
<li>初级研发人员</li>
</ul>
<h2 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h2><p>本文希望通过以下内容来让读者具备基本的ESQL研发能力</p>
<ul>
<li>架构</li>
<li>客户端编程</li>
<li>代码概貌</li>
<li>近期主要工作</li>
</ul>
<h1 id="客户端编程"><a href="#客户端编程" class="headerlink" title="客户端编程"></a>客户端编程</h1><p><img src="/uploads/step.png" alt=""></p>
<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    EXEC SQL BEGIN DECLARE SECTION;</div><div class="line">        char msg[256] = &#123;0&#125;;</div><div class="line">    EXEC SQL END   DECLARE SECTION;</div><div class="line"></div><div class="line">    EXEC SQL WHENEVER SQLERROR sqlprint;</div><div class="line">    EXEC SQL CONNECT TO postgres@localhost;</div><div class="line"></div><div class="line">    EXEC SQL select * into :msg from helloworld;</div><div class="line"></div><div class="line">    printf("%s\n", msg);</div><div class="line"></div><div class="line">	EXEC SQL DISCONNECT;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(ECPG)  helloworld.pgc -I $(ECPG_INCLUDE) -o helloworld.c</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Processed by ecpg (11devel) */</span></div><div class="line"><span class="comment">/* These include files are added by the preprocessor */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ecpglib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ecpgerrno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sqlca.h&gt;</span></span></div><div class="line"><span class="comment">/* End of automatic include section */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">line</span> 1 <span class="meta-string">"helloworld.pgc"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* exec sql begin declare section */</span></div><div class="line">           </div><div class="line">    </div><div class="line"><span class="meta">#<span class="meta-keyword">line</span> 7 <span class="meta-string">"helloworld.pgc"</span></span></div><div class="line"> <span class="keyword">char</span> msg [ <span class="number">256</span> ] = &#123; <span class="number">0</span> &#125; ;</div><div class="line"><span class="comment">/* exec sql end declare section */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">line</span> 8 <span class="meta-string">"helloworld.pgc"</span></span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/* exec sql whenever sqlerror  sqlprint ; */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">line</span> 10 <span class="meta-string">"helloworld.pgc"</span></span></div><div class="line"></div><div class="line"></div><div class="line">    &#123; ECPGconnect(<span class="number">__L</span>INE__, <span class="number">0</span>, <span class="string">"postgres@localhost"</span> , <span class="literal">NULL</span>, <span class="literal">NULL</span> , <span class="literal">NULL</span>, <span class="number">0</span>); </div><div class="line"><span class="meta">#<span class="meta-keyword">line</span> 12 <span class="meta-string">"helloworld.pgc"</span></span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (sqlca.sqlcode &lt; <span class="number">0</span>) sqlprint();&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">line</span> 12 <span class="meta-string">"helloworld.pgc"</span></span></div><div class="line"></div><div class="line"></div><div class="line">    &#123; ECPGdo(<span class="number">__L</span>INE__, <span class="number">0</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="number">0</span>, ECPGst_normal, <span class="string">"select * from helloworld"</span>, ECPGt_EOIT, </div><div class="line">	ECPGt_char,(msg),(<span class="keyword">long</span>)<span class="number">256</span>,(<span class="keyword">long</span>)<span class="number">1</span>,(<span class="number">256</span>)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>), </div><div class="line">	ECPGt_NO_INDICATOR, <span class="literal">NULL</span> , <span class="number">0L</span>, <span class="number">0L</span>, <span class="number">0L</span>, ECPGt_EORT);</div><div class="line"><span class="meta">#<span class="meta-keyword">line</span> 14 <span class="meta-string">"helloworld.pgc"</span></span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (sqlca.sqlcode &lt; <span class="number">0</span>) sqlprint();&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">line</span> 14 <span class="meta-string">"helloworld.pgc"</span></span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, msg);</div><div class="line"></div><div class="line">    &#123; ECPGdisconnect(<span class="number">__L</span>INE__, <span class="string">"CURRENT"</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">line</span> 18 <span class="meta-string">"helloworld.pgc"</span></span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (sqlca.sqlcode &lt; <span class="number">0</span>) sqlprint();&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">line</span> 18 <span class="meta-string">"helloworld.pgc"</span></span></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -g -O0  -I $(ECPG_INCLUDE) -L $(LIB)  -o helloworld helloworld.c -lecpg</div></pre></td></tr></table></figure>
<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yshen@yshen-PC:~/coding/esql$ ./helloworld </div><div class="line">hello world</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">yshen@yshen-PC:~/coding/esql$ ldd ./helloworld</div><div class="line">	linux-vdso.so.1 (0x00007ffe29bcd000)</div><div class="line">	libecpg.so.6 =&gt; /home/yshen/coding/postgresql/release/lib/libecpg.so.6 </div><div class="line">	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fe4cfd6b000)</div><div class="line">	libpgtypes.so.3 =&gt; /home/yshen/coding/postgresql/release/lib/libpgtypes.so.3 </div><div class="line">	libpq.so.5 =&gt; /home/yshen/coding/postgresql/release/lib/libpq.so.5 </div><div class="line">	libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 </div><div class="line">	/lib64/ld-linux-x86-64.so.2 (0x00007fe4d0624000)</div><div class="line">	libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007fe4cf3ea000)</div></pre></td></tr></table></figure>
<h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">POSTGRES=&quot;/home/yshen/coding/postgresql/release&quot;</div><div class="line">ECPG=$(POSTGRES)&quot;/bin/ecpg&quot;</div><div class="line">ECPG_INCLUDE=$(POSTGRES)&quot;/include&quot;</div><div class="line">LIB=$(POSTGRES)&quot;/lib&quot;</div><div class="line"></div><div class="line">execs=$(patsubst %.pgc,%,$(wildcard *.pgc))</div><div class="line"></div><div class="line">all: $(execs)</div><div class="line"></div><div class="line">%: %.c</div><div class="line">	gcc -g -O0  -I $(ECPG_INCLUDE) -L $(LIB)  -o $@ $&lt; -lecpg</div><div class="line"></div><div class="line">%.c: %.pgc</div><div class="line">	$(ECPG)  $&lt; -I $(ECPG_INCLUDE) -o $@</div><div class="line"></div><div class="line">clean:</div><div class="line">	-rm  $(execs)</div></pre></td></tr></table></figure>
<p>make</p>
<p>make clean</p>
<p>make helloworld.c</p>
<h2 id="综合例子：备份工具"><a href="#综合例子：备份工具" class="headerlink" title="综合例子：备份工具"></a>综合例子：备份工具</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * dump utility written by ESQL</div><div class="line"> *              yshen@2017</div><div class="line"> */</div><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line"></div><div class="line"></div><div class="line">/* public interfaces */</div><div class="line">void Connect(char *dbname);</div><div class="line">void Disconnect();</div><div class="line">void Dump();</div><div class="line"></div><div class="line">/* internal functions */</div><div class="line">void dump_one_table(char *tbname);</div><div class="line">char * get_type_string(int type);</div><div class="line"></div><div class="line">/* execution start from here */</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    Connect("postgres");</div><div class="line">    Dump();</div><div class="line">    Disconnect();</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* connect to db */</div><div class="line">void Connect(char *dbname)</div><div class="line">&#123;</div><div class="line">    EXEC SQL BEGIN DECLARE SECTION;</div><div class="line">        char connstr[256];</div><div class="line">    EXEC SQL END   DECLARE SECTION;</div><div class="line"></div><div class="line">    sprintf(connstr, "%s", dbname);</div><div class="line">    EXEC SQL WHENEVER SQLERROR sqlprint;</div><div class="line">    EXEC SQL CONNECT TO :connstr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* disconnect from db */</div><div class="line">void Disconnect()</div><div class="line">&#123;</div><div class="line">    EXEC SQL DISCONNECT;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* dump start here */</div><div class="line">void Dump()</div><div class="line">&#123;</div><div class="line">    EXEC SQL BEGIN DECLARE SECTION;</div><div class="line">    char schemaname[256] = &#123;0&#125;;</div><div class="line">    char tablename[256]  = &#123;0&#125;;</div><div class="line">    char fullname[256] = &#123;0&#125;;</div><div class="line">    EXEC SQL END   DECLARE SECTION;</div><div class="line"></div><div class="line">    /*</div><div class="line">     * query all tables from pg_tables view</div><div class="line">     * FIXME: currently only support postgres</div><div class="line">     */</div><div class="line">    EXEC SQL DECLARE cur2 CURSOR  FOR</div><div class="line">        select schemaname, tablename </div><div class="line">        from pg_tables</div><div class="line">        where schemaname!='pg_catalog'</div><div class="line">        and schemaname!='information_schema';</div><div class="line"></div><div class="line">    EXEC SQL OPEN cur2;</div><div class="line"></div><div class="line">    while (1)</div><div class="line">    &#123;</div><div class="line">        EXEC SQL FETCH cur2 INTO :schemaname, :tablename;</div><div class="line">        if (sqlca.sqlcode == ECPG_NOT_FOUND) break;</div><div class="line">        sprintf(fullname,"%s.%s", schemaname, tablename);</div><div class="line">        /* do the acutal dump for this table */</div><div class="line">        dump_one_table(fullname);</div><div class="line">    &#125;</div><div class="line">    EXEC SQL CLOSE cur2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* dump one table's defination and data */</div><div class="line">void dump_one_table(char *tbname)</div><div class="line">&#123;</div><div class="line">    EXEC SQL BEGIN DECLARE SECTION;</div><div class="line">        char sql[256] = &#123;0&#125;;</div><div class="line">        int rows;</div><div class="line">        int cols;</div><div class="line">        char data[256] = &#123;0&#125;;</div><div class="line">        char name[256] = &#123;0&#125;;</div><div class="line">        int type;</div><div class="line">        int firstrow=1;</div><div class="line">        int i;</div><div class="line">    EXEC SQL END   DECLARE SECTION;</div><div class="line"></div><div class="line">    sprintf(sql, "select * from %s;", tbname);</div><div class="line"></div><div class="line">    EXEC SQL ALLOCATE DESCRIPTOR desc1;</div><div class="line">    EXEC SQL PREPARE stmt1 FROM :sql;</div><div class="line">    EXEC SQL DECLARE cur1 CURSOR FOR stmt1;</div><div class="line">    EXEC SQL OPEN cur1;</div><div class="line">    EXEC SQL DESCRIBE stmt1 INTO SQL DESCRIPTOR desc1;</div><div class="line">    EXEC SQL GET DESCRIPTOR desc1 :cols = COUNT;</div><div class="line"></div><div class="line">    printf("create table %s (", tbname);</div><div class="line"></div><div class="line">    /* dump table's defination into create stmt</div><div class="line">     *      create table xxx (col1 type1, col2, type2...);</div><div class="line">     */</div><div class="line">    for (i=0; i&lt;cols; i++)</div><div class="line">    &#123;</div><div class="line">        i++;</div><div class="line">        EXEC SQL GET DESCRIPTOR desc1 VALUE :i :name = NAME;</div><div class="line">        EXEC SQL GET DESCRIPTOR desc1 VALUE :i :type = TYPE;</div><div class="line">        i--;</div><div class="line">        if(i==0)</div><div class="line">            printf("%s %s", name, get_type_string(type));</div><div class="line">        else</div><div class="line">            printf(", %s %s", name, get_type_string(type));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    printf(");\n");</div><div class="line"></div><div class="line">    /* dump table's data into a insert stmt</div><div class="line">     *      insert into tbname (col1 type ...) values (row1),(row2)..(rown);</div><div class="line">     */</div><div class="line">    printf("insert into %s (", tbname);</div><div class="line">    for (i=0; i&lt;cols; i++)</div><div class="line">    &#123;</div><div class="line">        i++;</div><div class="line">        EXEC SQL GET DESCRIPTOR desc1 VALUE :i :name = NAME;</div><div class="line">        i--;</div><div class="line">        if(i==0)</div><div class="line">            printf("%s", name);</div><div class="line">        else</div><div class="line">            printf(", %s", name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    printf(") values ");</div><div class="line"></div><div class="line"></div><div class="line">    /* print values */</div><div class="line">    while(1)</div><div class="line">    &#123;</div><div class="line">        EXEC SQL FETCH cur1 INTO SQL DESCRIPTOR desc1; </div><div class="line">        if (sqlca.sqlcode == ECPG_NOT_FOUND) break;</div><div class="line"></div><div class="line">        if(firstrow)</div><div class="line">            printf("(");</div><div class="line">        else</div><div class="line">            printf(",(");</div><div class="line">        for (i=0; i&lt;cols; i++)</div><div class="line">        &#123;</div><div class="line">            i++;</div><div class="line">            EXEC SQL GET DESCRIPTOR desc1 VALUE :i :data = DATA;</div><div class="line">            i--;</div><div class="line"></div><div class="line">            if(i==0)</div><div class="line">                printf("\'%s\'", data);</div><div class="line">            else</div><div class="line">                printf(", \'%s\'", data);</div><div class="line">        </div><div class="line">        &#125;</div><div class="line">        printf(") ");</div><div class="line">        firstrow=0;</div><div class="line">    &#125;</div><div class="line">    printf(";\n");</div><div class="line"></div><div class="line">    EXEC SQL CLOSE cur1;</div><div class="line">    EXEC SQL DEALLOCATE DESCRIPTOR desc1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">char * get_type_string(int type)</div><div class="line">&#123;</div><div class="line"></div><div class="line">    switch(type)</div><div class="line">    &#123;</div><div class="line">        case 1:</div><div class="line">            return "text";</div><div class="line">            break;</div><div class="line">        case 4:</div><div class="line">            return "int";</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">         return "text";</div><div class="line">            </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">yshen@yshen-PC:~/coding/esql$ ./dump </div><div class="line">create table public.helloworld (a text);</div><div class="line">insert into public.helloworld (a) values (&apos;hello world&apos;) ;</div><div class="line">create table public.tb1 (a int);</div><div class="line">insert into public.tb1 (a) values (&apos;1&apos;) ,(&apos;1&apos;) ,(&apos;2&apos;) ,(&apos;3&apos;);</div><div class="line">create table public.tb2 (a int, b text);</div><div class="line">insert into public.tb2 (a, b) values (&apos;1&apos;, &apos;yshen&apos;) ,(&apos;2&apos;, &apos;hxwang&apos;) ;</div></pre></td></tr></table></figure>
<h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><h2 id="逻辑架构"><a href="#逻辑架构" class="headerlink" title="逻辑架构"></a>逻辑架构</h2><p><img src="/uploads/prep.png" alt=""></p>
<p><img src="/uploads/exec.png" alt=""></p>
<h2 id="开发架构"><a href="#开发架构" class="headerlink" title="开发架构"></a>开发架构</h2><h3 id="代码目录"><a href="#代码目录" class="headerlink" title="代码目录"></a>代码目录</h3><p>源码位于src/interface/ecpg目录下：</p>
<ul>
<li>preproc      –预处理</li>
<li>ecpglib        –运行时</li>
<li>pgtypeslib  –类型输入输出</li>
<li>compatlib   –兼容性</li>
<li>include        –头文件</li>
<li>test  –测试</li>
</ul>
<h3 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h3><p>（回到开头的hello world）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ECPGdo(<span class="number">__L</span>INE__, <span class="comment">/* 行号 */</span></div><div class="line">    <span class="number">0</span>,           <span class="comment">/* compatible level， 比如兼容infomix */</span></div><div class="line">    <span class="number">1</span>,           <span class="comment">/* 强制输出isnull，如果没有提供indicator变量就会报错。 */</span></div><div class="line">    <span class="literal">NULL</span>,        <span class="comment">/* 用于执行语句的数据库连接 */</span></div><div class="line">    <span class="number">0</span>,           <span class="comment">/* 是用?来标志入参么，还是用$1 $2 ...*/</span></div><div class="line">    ECPGst_normal,  <span class="comment">/* 语句类型 */</span></div><div class="line">    <span class="string">"select * from helloworld"</span>, </div><div class="line">    ECPGt_EOIT,  <span class="comment">/* 输入结束标志 */</span></div><div class="line">	ECPGt_char,  <span class="comment">/* 数据类型 */</span></div><div class="line">    (msg),       <span class="comment">/* 指向变量的指针 */</span></div><div class="line">    (<span class="keyword">long</span>)<span class="number">256</span>,   <span class="comment">/* char或varchar数组的大小 */</span></div><div class="line">    (<span class="keyword">long</span>)<span class="number">1</span>,     <span class="comment">/* 数组中元素的个数（用于取多条记录） */</span></div><div class="line">	(<span class="number">256</span>)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>),  <span class="comment">/* 数组下一维度的起始位置（用于取多条记录） */</span> </div><div class="line">	ECPGt_NO_INDICATOR,  <span class="comment">/* 有没有indicator来输出isnull */</span></div><div class="line">     <span class="literal">NULL</span> ,   <span class="comment">/* 指向indicator的指针 */</span></div><div class="line">     <span class="number">0L</span>,      <span class="comment">/* */</span></div><div class="line">     <span class="number">0L</span>,      <span class="comment">/* indicator的个数（用于取多条记录） */</span></div><div class="line">	 <span class="number">0L</span>,      <span class="comment">/* indicator下一维度的其实位置（用于取多条记录） */</span></div><div class="line">     ECPGt_EORT <span class="comment">/* 输出结束标志 */</span></div><div class="line">      );</div></pre></td></tr></table></figure>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="语法解析"><a href="#语法解析" class="headerlink" title="语法解析"></a>语法解析</h2><p>parser如果用的是esql自己的parser，这样的问题是：1. 服务器的语法esql可能不支持。所以postgres后来改用服务器的parser经过处理之后生成自己的parser。</p>
<h2 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h2><p>默认是手动提交的，也就是需要加上COMMIT语句：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">EXEC SQL CREATE TABLE <span class="title">TB1</span><span class="params">(A INT)</span></span>;</div><div class="line">EXEC SQL COMMIT;</div></pre></td></tr></table></figure>
<p>如果需要自动提交：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXEC SQL <span class="keyword">SET</span> AUTOCOMMIT = <span class="keyword">ON</span>;</div></pre></td></tr></table></figure>
<h2 id="在esql中用结构体问题"><a href="#在esql中用结构体问题" class="headerlink" title="在esql中用结构体问题"></a>在esql中用结构体问题</h2><p>esql中如果用结构体，那么需要把结构体定义放到declare section中。客户的结构体都是定义在头文件中。但是declare section不认头文件中的#ifndef … define … endif 这些预处理指令。<br>解决方案是把结构体定义单独放在一个头文件中，比如struct.h里面。原来的头文件变为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HEADER_H_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _HEADER_H_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"struct.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>esql程序中可以把struct.h加在declare section 中了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EXEC SQL BEGIN DECLARE SECTION;</div><div class="line">EXEC SQL INCLUDE struct.h</div><div class="line">EXEC SQL END DECLARE SECTION;</div></pre></td></tr></table></figure>
<p>这样就可以在esql中正常使用结构体了。</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    ECPGdebug(1,stdout);</div><div class="line"></div><div class="line">	EXEC SQL BEGIN DECLARE SECTION;</div><div class="line">        char msg[256] = &#123;0&#125;;</div><div class="line">    EXEC SQL END   DECLARE SECTION;</div><div class="line"></div><div class="line">    EXEC SQL CONNECT TO postgres@localhost;</div><div class="line">...</div><div class="line">    EXEC SQL DISCONNECT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">yshen@yshen-PC:~/coding/esql$ ./debug </div><div class="line">[<span class="number">11785</span>]: ECPGdebug: <span class="built_in">set</span> to <span class="number">1</span></div><div class="line">[<span class="number">11785</span>]: ECPGconnect: opening database postgres on localhost port &lt;DEFAULT&gt;  </div><div class="line">[<span class="number">11785</span>]: ecpg_execute on line <span class="number">15</span>: query: select * from helloworld; with <span class="number">0</span> parameter(s) on connection postgres</div><div class="line">[<span class="number">11785</span>]: ecpg_execute on line <span class="number">15</span>: <span class="keyword">using</span> PQexec</div><div class="line">[<span class="number">11785</span>]: ecpg_process_output on line <span class="number">15</span>: correctly got <span class="number">1</span> tuples with <span class="number">1</span> fields</div><div class="line">[<span class="number">11785</span>]: ecpg_get_data on line <span class="number">15</span>: RESULT: hello world offset: <span class="number">256</span>; <span class="built_in">array</span>: no</div><div class="line">hello world</div><div class="line">[<span class="number">11785</span>]: ecpg_finish: connection postgres closed</div></pre></td></tr></table></figure>
<h2 id="终极方案"><a href="#终极方案" class="headerlink" title="终极方案"></a>终极方案</h2><p>如果遇到ESQL不支持的情况，可以直接调用<code>ECPGget_PGconn</code>来返回一个libpq连接，接下来可以用libpq来处理。比如：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">EXEC SQL CONNECT TO testdb AS con1;</div><div class="line"></div><div class="line">conn = ECPGget_PGconn(<span class="string">"con1"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* create */</span></div><div class="line">loid = lo_create(conn, <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (loid &amp;lt; <span class="number">0</span>)</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"lo_create() failed: %s"</span>, PQerrorMessage(conn));</div></pre></td></tr></table></figure>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Writing coredump free codes by handling of SIGSEGV]]></title>
      <url>http://shenyu.wiki/2017/10/29/Writing-coredump-free-codes-by-handling-of-SIGSEGV/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Invalied memory access is always a headache for C programmers. The default way for the OS to handle Invalied memory access is send a SIGSEGV to the program and later shutdown the program and generate a coredump file. But very often we want to see if a memory address is safe to write and read. Or simply sometime we just want to avoid SIGSEGV to happen. The trick is to catch SIGSEGV and handle it by ourself.</p>
</blockquote>
<p>The below C code is trying to access an invalied memory address <code>0x00</code>, the OS will send SIGSEGV to the program and generate a coredump file, finally the program is shut down. This is the default behavior for the OS to handle invalied memory access.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *a = <span class="number">0</span>;</div><div class="line">*a = <span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<p>But suppose we put the above code inside a try…catch? If the try failed, we will catch it and print an error message?<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> *a = <span class="number">0</span>;</div><div class="line">    *a = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"catched SIGSEGV\n"</span>);</div><div class="line">&#125;</div><div class="line">endtry;</div></pre></td></tr></table></figure></p>
<p>The <code>try...catch</code> here set up two things: </p>
<ol>
<li>a signal handler to catch <code>SIGSEGV</code>.</li>
<li>a long jump to catch when <code>SIGSEGV</code> is raised.</li>
</ol>
<p>Here is a full source code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;setjmp.h&gt;</div><div class="line">#include &lt;signal.h&gt;</div><div class="line"></div><div class="line">typedef void (*SignalHandlerPtr)(int);</div><div class="line">SignalHandlerPtr savedSIGSEGV = (SignalHandlerPtr)(0);</div><div class="line">sigjmp_buf SEGSEGVjmp;</div><div class="line">static void SEGSEGVhandler(int sig);</div><div class="line"></div><div class="line">#define try  \</div><div class="line">	do &#123; \</div><div class="line">	    savedSIGSEGV = signal(SIGSEGV, SEGSEGVhandler); \</div><div class="line">		if (sigsetjmp(SEGSEGVjmp, 1) == 0) \</div><div class="line">		&#123; </div><div class="line"></div><div class="line">#define catch	\</div><div class="line">		&#125; \</div><div class="line">		else \</div><div class="line">		&#123;</div><div class="line">		 </div><div class="line"></div><div class="line">#define endtry  \</div><div class="line">        signal(SIGSEGV, savedSIGSEGV); \</div><div class="line">		&#125; \</div><div class="line">	&#125; while (0)</div><div class="line"></div><div class="line">static void SEGSEGVhandler(int sig)</div><div class="line">&#123;</div><div class="line">    sig=sig;</div><div class="line">    siglongjmp(SEGSEGVjmp, 1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    try</div><div class="line">    &#123;</div><div class="line">        int *a = 0;</div><div class="line">        *a = 1;</div><div class="line">    &#125;</div><div class="line">    catch</div><div class="line">    &#123;</div><div class="line">        printf(&quot;catched SIGSEGV\n&quot;);</div><div class="line">    &#125;</div><div class="line">    endtry;</div><div class="line"></div><div class="line">    </div><div class="line">	printf(&quot;exited normally\n&quot;);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>This program will not cause a coredump, instead will catch SIGSEGV and exit normally.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ./main </div><div class="line">catched SIGSEGV</div><div class="line">exited normally</div></pre></td></tr></table></figure></p>
<p>If we know how to try…catch a SIGSEGV, we may as well know how to write a function to test whether an address is safe or not. Now we write a function called <code>bool IsByteSafe( void *add )</code> for that.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsByteSafe</span><span class="params">( <span class="keyword">void</span> *add )</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> c;</div><div class="line"></div><div class="line">	<span class="comment">/* is safe to read/write ? */</span></div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">		c = *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)add;</div><div class="line">		*(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)add = c;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span></div><div class="line">    &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    endtry;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>More, we can also test a memory region by using <code>bool IsByteSafe( void *add )</code>. So we come up with a function <code>bool IsSafeAddress(void *begin, size_t len)</code>.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsSafeAddress</span><span class="params">(<span class="keyword">void</span> *begin, <span class="keyword">size_t</span> len)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(--len)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!IsByteSafe(begin+len))</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Now, let’s put all above into test.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	int c;</div><div class="line">	int *a = &amp;c;</div><div class="line">	int *b = 0x00;</div><div class="line">#define SIZE (100*sizeof(int))</div><div class="line">	int *d = (int *)malloc(SIZE);</div><div class="line"></div><div class="line">	if(IsSafeAddress(a, sizeof(int)))</div><div class="line">	&#123;</div><div class="line">		printf(&quot;%p is safe\n&quot;, a);</div><div class="line">	&#125;</div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		printf(&quot;%p is not safe\n&quot;, a);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	if(IsSafeAddress(b, sizeof(int)))</div><div class="line">	&#123;</div><div class="line">		printf(&quot;%p is safe\n&quot;, b);</div><div class="line">	&#125;</div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		printf(&quot;%p is not safe\n&quot;, b);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if(IsSafeAddress(d, SIZE))</div><div class="line">	&#123;</div><div class="line">		printf(&quot;%p---%p is safe\n&quot;, d, d+100);</div><div class="line">	&#125;</div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		printf(&quot;%p---%p is not safe\n&quot;, d, d+100);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	printf(&quot;exited normally\n&quot;);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ./main </div><div class="line">0x7ffd2001e1b4 is safe</div><div class="line">(nil) is not safe</div><div class="line">0x7a6e8fd010---0x7a6e8fd1a0 is safe</div><div class="line">exited normally</div></pre></td></tr></table></figure>
<p>Okay, all is well.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[where does bug come from]]></title>
      <url>http://shenyu.wiki/2017/09/04/where-does-bug-come-from-1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>This presentation is given on September 1st, 2017. Share with you the experience of fixing bugs in the last 2 years.</p>
</blockquote>
<center><embed src="http://player.youku.com/player.php/sid/XMzAwNDc0ODQxNg==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash"></center>

<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[编程题--租房管理系统]]></title>
      <url>http://shenyu.wiki/2017/08/30/%E7%A7%9F%E6%88%BF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>你的好朋友小王最近开了一家房产中介公司，听闻你是程序员，所以找你帮忙写一个租房管理软件。你愉快的答应了。</p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>小王的需求如下：</p>
<ol>
<li>支持录入房子和录入租客。</li>
<li>系统自动匹配符合条件的房子和租客。</li>
<li>可以生成报表来分析收入情况和哪种房子比较好租。</li>
</ol>
<h2 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h2><p>经过一天的思考，你觉得这个程序很简单，只需要实现下面的6个API就可以了：</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>使系统进入初始状态，清空所有数据。</li>
</ol>
<h3 id="录入房子信息"><a href="#录入房子信息" class="headerlink" title="录入房子信息"></a>录入房子信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InputHouse</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> type, <span class="keyword">int</span> face, <span class="keyword">bool</span> elevator, <span class="keyword">int</span> cost)</span></span>;</div></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li><p>新录入的房子都是空闲状态可以用来出租。</p>
</li>
<li><p>房子的属性</p>
<p>| 类型   | 取值          | 说明                       |<br>|—-|———–|————————|<br>| 面积   | [1,100]     | 平方                       |<br>| 户型   | [1,4]       | 1.一室一厅 2.二室一厅 3.三室一厅 4三室 |<br>| 朝向   | [1,4]       | 1.东 2.南 3.西 4.北          |<br>| 电梯   | [0,1]       | 0.没有电梯 1.有               |<br>| 租金   | [100,20000] | 租金，单位元                   |</p>
</li>
<li><p>布尔类型参考如下定义：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> bool  int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> true  1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="寻找租客"><a href="#寻找租客" class="headerlink" title="寻找租客"></a>寻找租客</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InputPerson</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> type, <span class="keyword">int</span> face, <span class="keyword">int</span> size,  <span class="keyword">bool</span> elevator, <span class="keyword">int</span> month)</span></span>;</div></pre></td></tr></table></figure>
<ol>
<li><p>租客一次结清所有钱款。</p>
</li>
<li><p>每录入一个租客，即刻在系统内查找满足要求的房子：</p>
<p>户型要求必须满足</p>
<p>朝向要求必须满足</p>
<p>电梯要求必须满足</p>
<p>面积要求必须满足</p>
<p>面积相等时选户型最大的</p>
<p>户型相同时选更便宜的</p>
<p>租金相同时按房子录入顺序从前到后</p>
</li>
<li><p>如果录入人时候没有符合条件的房子，则本次录入失败。</p>
</li>
<li><p>租客的属性：</p>
<p>| 类型   | 取值           | 说明                      |<br>|—-|————|———————–|<br>| 名字   | 字符串，长度[1,20] | 要求全英文，区分大小写，不会重名        |<br>| 户型需求 | [1,3]        | 1.一室及以上 2.二室及以上 3.三室及以上 |<br>| 朝向需求 | [0,1]        | 0.不限 1.朝南               |<br>| 面积需求 | [1,100]      | 至少需要的房子面积               |<br>| 电梯   | [0,1]        | 0.不限 2.有电梯              |<br>| 租房月数 | [1,12]       | 只租整月                    |<br>​</p>
</li>
</ol>
<h3 id="退房"><a href="#退房" class="headerlink" title="退房"></a>退房</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Refund</span><span class="params">(<span class="keyword">char</span> *name)</span></span>;</div></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>租房和退房同一天完成。</li>
<li>租房后可当天退房，但是要付一个月的房租，罚的租金算到该房子的总收入里面。</li>
<li>退房后可以通过重新录入租客的方式继续租房。</li>
</ol>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Query</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li><p>只统计产生了收入房子的信息。如果所有的房子未产生收入就报错。</p>
</li>
<li><p>根据户型，朝向，电梯三个维度综合汇总：即这三个字段值相同的所有房子归为一组，合并为一行输出，同一组的总租金需要叠加。</p>
</li>
<li><p>汇总表中，按照如下顺序从前到后排列：</p>
<ol>
<li>总租金</li>
<li>朝向（南、东、西、北）</li>
<li>电梯</li>
<li>户型（从小到大）</li>
</ol>
</li>
<li><p>查询成功，输出最新的户型表信息，例如：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">T F E Money</div><div class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3000</span></div><div class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">1</span> <span class="number">3000</span></div><div class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3000</span></div><div class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3000</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Quit</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>退出系统。</li>
</ol>
<h2 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h2><p>我们需要给小王设计一个界面来方便他的使用。为了更快的开发，我们先做一个简陋的console界面：</p>
<h3 id="交互式终端界面"><a href="#交互式终端界面" class="headerlink" title="交互式终端界面"></a>交互式终端界面</h3><ol>
<li><p>初始化完毕之后进入系统，系统显示<code>Enter&gt;</code>提示用户输入命令：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Enter&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>支持的命令有</p>
<ol>
<li>help 显示帮助</li>
<li>ih 录入房子，后接参数。</li>
<li>it 录入租客，后接参数。</li>
<li>refund 退款，后接参数。</li>
<li>qr 生成报表</li>
<li>quit 退出系统</li>
</ol>
</li>
<li><p>参数顺序和要求见总体设计。</p>
</li>
<li><p>命令执行成功或失败后需要给用户显示信息：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Enter&gt;help</div><div class="line">input house : ih size type face elevator cost</div><div class="line">input person: it name type face size elevator month</div><div class="line">refund      : refund name</div><div class="line">query infos : qr</div><div class="line">quit        : quit</div><div class="line">help        : help</div><div class="line">Enter&gt;ih <span class="number">100</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">1000</span></div><div class="line">INFO: <span class="keyword">new</span> house:<span class="number">0</span> : size <span class="number">100</span> type <span class="number">3</span> face <span class="number">3</span> ele <span class="number">1</span> cost <span class="number">1000</span></div><div class="line">Enter&gt;it yshen <span class="number">3</span> <span class="number">0</span> <span class="number">100</span> <span class="number">0</span> <span class="number">12</span></div><div class="line">INFO: yshen rent house <span class="number">0</span> <span class="keyword">for</span> <span class="number">12</span> months should cost <span class="number">12000</span> money</div><div class="line">Enter&gt;qr</div><div class="line">INFO: grandTotal <span class="number">12000</span>$</div><div class="line">T F E Money</div><div class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">12000</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>界面需要健壮，不能因为输入特殊字符崩溃。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Enter&gt;asdfasdf</div><div class="line">ERROR: unknown command asdfasdf</div><div class="line">Enter&gt;~!@#$%</div><div class="line">ERROR: unknown command ~!@#$%</div><div class="line">Enter&gt;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h2 id="其他要求"><a href="#其他要求" class="headerlink" title="其他要求"></a>其他要求</h2><ol>
<li>在linux下采用C语言完成本题目。</li>
<li>API声明和结构体定义写到rent.h文件中。</li>
<li>API的实现写到rent.c文件中。</li>
<li>界面写到main.c文件中。</li>
<li>要求写一个Makefile。</li>
</ol>
<h2 id="评分标准"><a href="#评分标准" class="headerlink" title="评分标准"></a>评分标准</h2><ol>
<li>一共有10个测试用例直接调用API，通过一个得10分。</li>
<li>一共有10个测试用例通过界面来模拟人工输入，通过一个得10分。</li>
<li>满分200分。</li>
</ol>
<a id="more"></a>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//#define DEBUG 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG 1</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> bool  int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> true  1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0</span></div><div class="line"></div><div class="line"><span class="comment">/*****************************</span></div><div class="line"> * structs</div><div class="line"> ****************************/</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INVALID_FACE 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EAST 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> WEST 2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SOUTH 3</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NORTH 4</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INVALID_TYPE 0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME_LEN 20</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> house</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> size;              <span class="comment">/* how big the house is ? within range [1,100] */</span></div><div class="line">	<span class="keyword">int</span> type;        <span class="comment">/* the type of house, see enum houseType */</span></div><div class="line">	<span class="keyword">int</span> face;      <span class="comment">/* the facing of the house, see enum houseFacing */</span></div><div class="line">	<span class="keyword">bool</span> elevator;         <span class="comment">/* true = have elevator,  false = does not have elevator */</span></div><div class="line">	<span class="keyword">int</span> cost;              <span class="comment">/* the cose of the house, within range [100,20000] */</span></div><div class="line">	<span class="keyword">char</span> *name;            <span class="comment">/* point to the person who have rent the house, if NULL not rented */</span></div><div class="line">	<span class="keyword">int</span> months;            <span class="comment">/* 这套房子总共租了多少个月？ 用来算租金。 */</span></div><div class="line">	<span class="keyword">int</span> refund_months;     <span class="comment">/* 如果退租，那么需要减去多少个月的租金？ */</span></div><div class="line">	<span class="keyword">int</span> total;             <span class="comment">/* used only for Query to calc the group total */</span></div><div class="line">&#125; House;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*****************************</span></div><div class="line"> * API</div><div class="line"> ****************************/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InputHouse</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> type, <span class="keyword">int</span> face, <span class="keyword">bool</span> elevator, <span class="keyword">int</span> cost)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InputPerson</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> type, <span class="keyword">int</span> face, <span class="keyword">int</span> size,  <span class="keyword">bool</span> elevator, <span class="keyword">int</span> month)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Refund</span><span class="params">(<span class="keyword">char</span> *name)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Query</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Quit</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*****************************</span></div><div class="line"> * global data</div><div class="line"> ****************************/</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 500</span></div><div class="line">House houses[MAX];    <span class="comment">/* all the houses */</span></div><div class="line"></div><div class="line"><span class="comment">/*****************************</span></div><div class="line"> * internal funcs</div><div class="line"> ****************************/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initHouses</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">logging</span><span class="params">(<span class="keyword">char</span> *fmt, ...)</span></span>;</div><div class="line"><span class="comment">/*****************************</span></div><div class="line"> * main entry point</div><div class="line"> ****************************/</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	logging(<span class="string">"===========测试============"</span>);</div><div class="line">	Init();</div><div class="line">	logging(<span class="string">"--测试InputHouse"</span>);</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">false</span> == InputHouse(<span class="number">500</span>,<span class="number">-1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">false</span> == InputHouse(<span class="number">50</span>,<span class="number">-1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">false</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">false</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">false</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">30000</span>));</div><div class="line"></div><div class="line">	logging(<span class="string">"--测试InputPerson"</span>);</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"yshen"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"lmwang"</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">50</span>, <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">false</span> == InputPerson(<span class="string">"yshen"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">false</span> == InputPerson(<span class="string">"1234"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">false</span> == InputPerson(<span class="string">"aaaaaaaaaaaaaaaaaaaaa"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line"></div><div class="line">	logging(<span class="string">"--选面积选小的"</span>);</div><div class="line">	Init();</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">100</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"xiaoming"</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">50</span>, <span class="number">1</span>, <span class="number">1</span>));</div><div class="line"></div><div class="line">	logging(<span class="string">"--选户型大的"</span>);</div><div class="line">	Init();</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">100</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">100</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"xiaoming"</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">50</span>, <span class="number">1</span>, <span class="number">1</span>));</div><div class="line"></div><div class="line">	logging(<span class="string">"--选户便宜的"</span>);</div><div class="line">	Init();</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">100</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">100</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"xiaoming"</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">50</span>, <span class="number">1</span>, <span class="number">1</span>));</div><div class="line"></div><div class="line">	logging(<span class="string">"--选第一个"</span>);</div><div class="line">	Init();</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">100</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">100</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"xiaoming"</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">50</span>, <span class="number">1</span>, <span class="number">1</span>));</div><div class="line"></div><div class="line">	logging(<span class="string">"--测试查询：总租金高的应该排前面"</span>);</div><div class="line">	Init();</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"yshen"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"lmwang"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"yshenagain"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	Query();</div><div class="line"></div><div class="line">	logging(<span class="string">"--测试查询：朝向3&gt;1&gt;2&gt;4的应该排前面"</span>);</div><div class="line">	Init();</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"yshen"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"lmwanga"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"lmwangb"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"lmwangc"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	Query();</div><div class="line"></div><div class="line">	logging(<span class="string">"--测试查询：有电梯的排前面 "</span>);</div><div class="line">	Init();</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"yshen"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"lmwang"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	Query();</div><div class="line">	logging(<span class="string">"--测试查询：房子类型4&gt;3&gt;2&gt;1 "</span>);</div><div class="line">	Init();</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"yshen"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"lmwang"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"asdf"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"dddd"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	Query();</div><div class="line"></div><div class="line"></div><div class="line">	logging(<span class="string">"--测试Refund： 应该有6000的收入 "</span>);</div><div class="line">	Init();</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">false</span> == Refund(<span class="string">"yshen"</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"yshen"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	assert(<span class="literal">true</span> == Refund(<span class="string">"yshen"</span>));</div><div class="line">	assert(<span class="literal">false</span> == Refund(<span class="string">"yshen"</span>));</div><div class="line">	assert(<span class="literal">false</span> == Refund(<span class="string">"lmwang"</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"yshen"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">	Query();</div><div class="line"></div><div class="line">	logging(<span class="string">"--测试Refund： 应该有3000的收入 "</span>);</div><div class="line">	Init();</div><div class="line">	assert(<span class="literal">true</span> == InputHouse(<span class="number">50</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3000</span>));</div><div class="line">	assert(<span class="literal">true</span> == InputPerson(<span class="string">"yshen"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">12</span>));</div><div class="line">	assert(<span class="literal">true</span> == Refund(<span class="string">"yshen"</span>));</div><div class="line">	Query();</div><div class="line"></div><div class="line">	logging(<span class="string">"===========进入交互模式(帮助：help)============"</span>);</div><div class="line"></div><div class="line">	<span class="comment">/* now go into interactive command */</span></div><div class="line">	Init();</div><div class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">char</span> buffer[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Enter&gt;"</span>);</div><div class="line">		fgets(buffer, <span class="number">256</span>, <span class="built_in">stdin</span>);</div><div class="line"></div><div class="line">		<span class="comment">/* remove leading and tailing blanks including tailing \n */</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> end=<span class="built_in">strlen</span>(buffer) <span class="number">-1</span> ;</div><div class="line">			<span class="keyword">int</span> i,j;</div><div class="line">			<span class="comment">/* find the first non-blank char */</span></div><div class="line">			<span class="keyword">while</span>(buffer[start]==<span class="string">' '</span>)start++;</div><div class="line">			<span class="keyword">while</span>(buffer[end]==<span class="string">' '</span>|| buffer[end]==<span class="string">'\n'</span>)end--;</div><div class="line">			end++;</div><div class="line">			<span class="comment">/* copy the rest */</span></div><div class="line">			<span class="keyword">for</span>(i=<span class="number">0</span>; start!=end; i++,start++)</div><div class="line">			&#123;</div><div class="line">				buffer[i]=buffer[start];</div><div class="line">			&#125;</div><div class="line">			buffer[i]=<span class="string">'\0'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">if</span>(<span class="built_in">strlen</span>(buffer)==<span class="number">1</span> &amp;&amp; <span class="built_in">strncmp</span>(buffer,<span class="string">"r"</span>,<span class="number">1</span>)==<span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			Init();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(buffer, <span class="string">"ih"</span>, <span class="number">2</span>)==<span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> size, type, face, elevator, cost;</div><div class="line">			<span class="keyword">if</span>(<span class="number">5</span>!=<span class="built_in">sscanf</span>(buffer, <span class="string">"ih %d %d %d %d %d"</span>, &amp;size, &amp;type, &amp;face, &amp;elevator, &amp;cost))</div><div class="line">			&#123;</div><div class="line">				logging(<span class="string">"ERROR: input format incorrect"</span>);</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			InputHouse(size, type, face, elevator, cost);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(buffer, <span class="string">"it"</span>, <span class="number">2</span>)==<span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">char</span> name[<span class="number">256</span>];</div><div class="line">			<span class="keyword">int</span> type, face, size, elevator, month;</div><div class="line">			<span class="keyword">if</span>(<span class="number">6</span>!=<span class="built_in">sscanf</span>(buffer,<span class="string">"it %s %d %d %d %d %d"</span>, name, &amp;type, &amp;face, &amp;size, &amp;elevator, &amp;month))</div><div class="line">			&#123;</div><div class="line">				logging(<span class="string">"ERROR: input format incorrect"</span>);</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			InputPerson(name, type, face, size, elevator, month);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(buffer, <span class="string">"refund"</span>, <span class="number">6</span>)==<span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">char</span> name[<span class="number">256</span>];</div><div class="line">			<span class="keyword">if</span>(<span class="number">1</span>!=<span class="built_in">sscanf</span>(buffer,<span class="string">"refund %s"</span>, name))</div><div class="line">			&#123;</div><div class="line">				logging(<span class="string">"ERROR: input format incorrect"</span>);</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			Refund(name);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(buffer, <span class="string">"qr"</span>, <span class="number">2</span>)==<span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			Query();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(buffer, <span class="string">"quit"</span>, <span class="number">4</span>)==<span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(buffer, <span class="string">"help"</span>, <span class="number">4</span>)==<span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			logging(<span class="string">"input house : ih size type face elevator cost"</span>);</div><div class="line">			logging(<span class="string">"input person: it name type face size elevator month"</span>);</div><div class="line">			logging(<span class="string">"refund      : refund name"</span>);</div><div class="line">			logging(<span class="string">"query infos : qr"</span>);</div><div class="line">			logging(<span class="string">"quit        : quit"</span>);</div><div class="line">			logging(<span class="string">"help        : help"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			logging(<span class="string">"ERROR: unknown command %s"</span>, buffer);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*****************************</span></div><div class="line"> * implementation</div><div class="line"> ****************************/</div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">logging</span><span class="params">(<span class="keyword">char</span> *fmt, ...)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(!DEBUG)</div><div class="line">		<span class="keyword">return</span>;</div><div class="line"></div><div class="line">	va_list		ap;</div><div class="line">	va_start(ap, fmt);</div><div class="line">	<span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, fmt, ap);</div><div class="line">	va_end(ap);</div><div class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n"</span>);</div><div class="line">	fflush(<span class="built_in">stderr</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 函数：初始化</div><div class="line"> * 入参： 无</div><div class="line"> * 返回值：无</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;MAX;i++)</div><div class="line">	&#123;</div><div class="line">		houses[i].size=<span class="number">0</span>;</div><div class="line">		houses[i].type=INVALID_TYPE;</div><div class="line">		houses[i].face=INVALID_FACE;</div><div class="line">		houses[i].elevator = <span class="literal">false</span>;</div><div class="line">		houses[i].cost = <span class="number">0</span>;</div><div class="line">		houses[i].name = <span class="literal">NULL</span>;</div><div class="line">		houses[i].months = <span class="number">0</span>;</div><div class="line">		houses[i].refund_months = <span class="number">0</span>;</div><div class="line">		houses[i].total = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	logging(<span class="string">"init ok!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 函数：InputHouse 录入一个房子</div><div class="line"> * 入参： size  面积 [1,100]</div><div class="line"> *        type  户型 [1,4] 1:一室一厅 2:两室一厅 3:三室一厅 4三室两厅 大小4&gt;3&gt;2&gt;1</div><div class="line"> *        face  朝向 [1,4] 1:东 2:西 3:南 4:北</div><div class="line"> *        elevator 是否有电梯 [0,1] 0无 1有</div><div class="line"> *        cost  租金 [100,20000]</div><div class="line"> * 返回值：成功返回true 失败返回false</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InputHouse</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> type, <span class="keyword">int</span> face, <span class="keyword">bool</span> elevator, <span class="keyword">int</span> cost)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="comment">/* check input */</span></div><div class="line">	<span class="keyword">if</span> (size&lt;<span class="number">1</span> || size&gt;<span class="number">100</span>)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: size %d is not within [1,100]"</span>, size);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (type&lt;<span class="number">1</span> || type&gt;<span class="number">4</span>)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: type %d is not within [1,4]"</span>, type);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">if</span> (face&lt;<span class="number">1</span> || face&gt;<span class="number">4</span>)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: face %d is not within [1,4]"</span>, face);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (elevator&lt;<span class="number">0</span> || elevator&gt;<span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: elevator %d is not within [0,1]"</span>, elevator);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (cost&lt;<span class="number">100</span> || cost&gt;<span class="number">20000</span>)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: cost %d is not within [100,20000]"</span>, cost);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* input seems ok, now find a empty house to go in */</span></div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;MAX;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(houses[i].size==<span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">/* ok find one */</span></div><div class="line">			houses[i].size=size;</div><div class="line">			houses[i].type=type;</div><div class="line">			houses[i].face=face;</div><div class="line">			houses[i].elevator=elevator;</div><div class="line">			houses[i].cost=cost;</div><div class="line"></div><div class="line">			logging(<span class="string">"INFO: new house:%d : size %d type %d face %d ele %d cost %d"</span>, i, size, type, face, elevator, cost);</div><div class="line">			<span class="comment">/* ok, we are done, return now */</span></div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (i&gt;=MAX)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: cannot input more than %d houses."</span>, MAX);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	logging(<span class="string">"FATAL: program should not reach here!"</span>);</div><div class="line">	<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 函数：InputPerson 录入一个租客，并匹配房子。</div><div class="line"> * 入参： name 姓名 长度[1,20] 要求全是英文，区分大小写</div><div class="line"> *        face 朝向 [0,1] 0不限朝向 1朝南</div><div class="line"> *        size 面积 要求房子面积&gt;=size</div><div class="line"> *        elevator 是否要求电梯 [0,1] 0不要求 1要求有电梯</div><div class="line"> *        month 租房月数 [1,12]</div><div class="line"> * 返回值：成功匹配到房子返回true 否则返回false</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InputPerson</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> type, <span class="keyword">int</span> face, <span class="keyword">int</span> size, <span class="keyword">bool</span> elevator, <span class="keyword">int</span> month)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j;</div><div class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> arr[MAX]= &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">	<span class="comment">/* check input */</span></div><div class="line">	<span class="keyword">if</span>(name==<span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: name cannot be NULL"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(<span class="built_in">strlen</span>(name)&lt;<span class="number">1</span> || <span class="built_in">strlen</span>(name) &gt; NAME_LEN)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: length of %s is %d should within [1,20]"</span>, name, <span class="built_in">strlen</span>(name));</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(name);i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!<span class="built_in">isalpha</span>(name[i]))</div><div class="line">		&#123;</div><div class="line">			logging(<span class="string">"ERROR: name %s should all be alpha"</span>, name);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (type&lt;<span class="number">1</span> || type&gt;<span class="number">3</span>)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: type %d is not within [1,3]"</span>, type);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">if</span>(size&lt;<span class="number">1</span> || size&gt;<span class="number">100</span>)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: size %d is not within [1,100]"</span>, size);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(face&lt;<span class="number">0</span> || face&gt;<span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: face %d is not within [0,1]"</span>, face);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (elevator&lt;<span class="number">0</span> || elevator&gt;<span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: elevator %d is not within [0,1]"</span>, elevator);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (month&lt;<span class="number">1</span> || month&gt;<span class="number">12</span>)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: month %d is not within [1,12]"</span>, month);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check repeat */</span></div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;MAX;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(houses[i].name!=<span class="literal">NULL</span> &amp;&amp;  <span class="built_in">strcmp</span>( houses[i].name, name) == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			logging(<span class="string">"ERROR: person with name %s already rent house %d"</span>, name, i);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/* search house */</span></div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;MAX;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(houses[i].name == <span class="literal">NULL</span> &amp;&amp; <span class="comment">/* 该房还没有租出去 */</span></div><div class="line">			houses[i].type &gt;= type &amp;&amp;  <span class="comment">/* 户型大于等于要求的户型 */</span></div><div class="line">		   (face==<span class="literal">false</span> || houses[i].face == SOUTH) &amp;&amp; <span class="comment">/* 朝向不限 或者 朝南*/</span></div><div class="line">		   houses[i].size &gt;= size &amp;&amp; <span class="comment">/* 大于等于要求的面积 */</span></div><div class="line">		   (elevator==<span class="literal">false</span> || houses[i].elevator == <span class="literal">true</span>)) <span class="comment">/* 电梯不限 或者 有电梯 */</span></div><div class="line">		&#123;</div><div class="line">			<span class="comment">/* ok found a house */</span></div><div class="line">			arr[cnt++]=i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* found non */</span></div><div class="line">	<span class="keyword">if</span> (cnt==<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"WARNING: cannot find a house for %s"</span>, name);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/* 找到多个，那么把更合适的排到前面 */</span></div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;cnt;i++)</div><div class="line">	<span class="keyword">for</span> (j=i;j&lt;cnt;j++)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">/* 1. 选面积最小的 */</span></div><div class="line">		<span class="comment">/* 2. 面积相同时选户型更大的 */</span></div><div class="line">		<span class="comment">/* 3. 户型相同时选便宜的 */</span></div><div class="line">		<span class="keyword">if</span>(houses[arr[i]].size &gt; houses[arr[j]].size ||</div><div class="line">		  (houses[arr[i]].size == houses[arr[j]].size &amp;&amp; houses[arr[i]].type &lt; houses[arr[j]].type) ||</div><div class="line">		  (houses[arr[i]].type == houses[arr[j]].type &amp;&amp; houses[arr[i]].cost &gt; houses[arr[j]].cost))</div><div class="line">		&#123;</div><div class="line">			<span class="comment">/* buble sort */</span></div><div class="line">			<span class="keyword">int</span> tmp = arr[i];</div><div class="line">			arr[i] = arr[j];</div><div class="line">			arr[j] = tmp;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* 第一个合适 */</span></div><div class="line">	houses[arr[<span class="number">0</span>]].name   = strdup(name);</div><div class="line">	houses[arr[<span class="number">0</span>]].months += month;</div><div class="line">	houses[arr[<span class="number">0</span>]].refund_months = month - <span class="number">1</span>;</div><div class="line">	logging(<span class="string">"INFO: %s rent house %d( size %d type %d face %d ele %d cost %d) for %d months should cost %d money"</span>, </div><div class="line">			name, arr[<span class="number">0</span>], houses[arr[<span class="number">0</span>]].size, houses[arr[<span class="number">0</span>]].type, houses[arr[<span class="number">0</span>]].face, houses[arr[<span class="number">0</span>]].elevator, houses[arr[<span class="number">0</span>]].cost, month, month* houses[arr[<span class="number">0</span>]].cost);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 函数：Refund 退款</div><div class="line"> * 入参：name   姓名</div><div class="line"> * 返回：true 退款成功 false 退款失败</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Refund</span><span class="params">(<span class="keyword">char</span> *name)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">if</span> (name==<span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		logging(<span class="string">"ERROR: name cannot be null"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;MAX;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">/* 遍历houses数组，按照姓名找到该人租的房子*/</span></div><div class="line">		<span class="keyword">if</span>(houses[i].name!=<span class="literal">NULL</span> &amp;&amp; <span class="built_in">strcmp</span>(houses[i].name, name)==<span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">/* ok, found one */</span></div><div class="line">			<span class="built_in">free</span>(houses[i].name); <span class="comment">/* name is copied using strdup so free */</span></div><div class="line">			houses[i].name=<span class="literal">NULL</span>;</div><div class="line">			houses[i].months -= houses[i].refund_months;</div><div class="line"></div><div class="line">			logging(<span class="string">"INFO: %s has refund for house %d and get %d refund money"</span>, name, i, houses[i].refund_months*houses[i].cost);</div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	logging(<span class="string">"ERROR: cannot refund for %s "</span>, name);</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 函数： Query 查询统计信息</div><div class="line"> * 入参：无</div><div class="line"> * 返回值： 有收益返回true 否者返回false</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Query</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="comment">/* 一共有32组，然后根据 face, elevator, type 来把房子映射到组里面</span></div><div class="line">	 * 例如：face=4, elevator=1, type=4 那么映射的下标为： 414</div><div class="line">	 *       第一组0 -----通过idx来映射----&gt; idx[0] = 414  ---groups[414]-----&gt; 映射到真实的数据。</div><div class="line">	 */</div><div class="line"></div><div class="line">	House groups[MAX]; <span class="comment">/* 分配了MAX个，但是只用到了32个 */</span></div><div class="line">	<span class="keyword">int</span>   idx[<span class="number">32</span>]=&#123; </div><div class="line">					<span class="number">414</span>,<span class="number">413</span>,<span class="number">412</span>,<span class="number">411</span>,</div><div class="line">					<span class="number">404</span>,<span class="number">403</span>,<span class="number">402</span>,<span class="number">401</span>,</div><div class="line"></div><div class="line">					<span class="number">314</span>,<span class="number">313</span>,<span class="number">312</span>,<span class="number">311</span>,</div><div class="line">					<span class="number">304</span>,<span class="number">303</span>,<span class="number">302</span>,<span class="number">301</span>,</div><div class="line"></div><div class="line">					<span class="number">214</span>,<span class="number">213</span>,<span class="number">212</span>,<span class="number">211</span>,</div><div class="line">					<span class="number">204</span>,<span class="number">203</span>,<span class="number">202</span>,<span class="number">201</span>,</div><div class="line"></div><div class="line">					<span class="number">114</span>,<span class="number">113</span>,<span class="number">112</span>,<span class="number">111</span>,</div><div class="line">					<span class="number">104</span>,<span class="number">103</span>,<span class="number">102</span>,<span class="number">101</span>,</div><div class="line">	               &#125;;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> i, j;</div><div class="line">	<span class="keyword">int</span> grandTotal = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;MAX;i++)</div><div class="line">	&#123;</div><div class="line">		groups[i].size=<span class="number">0</span>;</div><div class="line">		groups[i].type=INVALID_TYPE;</div><div class="line">		groups[i].face=INVALID_FACE;</div><div class="line">		groups[i].elevator=<span class="literal">false</span>;</div><div class="line">		groups[i].cost=<span class="number">0</span>;</div><div class="line">		groups[i].name=<span class="literal">NULL</span>;</div><div class="line">		groups[i].months=<span class="number">0</span>;</div><div class="line">		groups[i].total=<span class="number">0</span>;</div><div class="line">	&#125;	</div><div class="line"></div><div class="line">	<span class="comment">/* 计算一下该类房子的收益 */</span></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;MAX;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> groupN=<span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="comment">/* 算出该类型房子的组别 */</span></div><div class="line">		groupN += <span class="number">100</span>*houses[i].face;</div><div class="line">		groupN += <span class="number">10</span>*houses[i].elevator;</div><div class="line">		groupN += <span class="number">1</span>*houses[i].type;</div><div class="line"></div><div class="line">		groups[groupN].elevator=houses[i].elevator;</div><div class="line">		groups[groupN].type=houses[i].type;</div><div class="line">		groups[groupN].face=houses[i].face;</div><div class="line">		<span class="comment">/* 加到总收益中 */</span></div><div class="line">		groups[groupN].total += houses[i].cost * houses[i].months;</div><div class="line">		grandTotal += groups[groupN].total;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(grandTotal==<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">/* 一分钱都没赚到 */</span></div><div class="line">		logging(<span class="string">"ERROR: no money"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	logging(<span class="string">"INFO: grandTotal %d$"</span>, grandTotal);</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> G(i) groups[idx[(i)]]</span></div><div class="line"></div><div class="line">	<span class="comment">/* 来个冒泡排序 */</span></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">32</span>;i++)</div><div class="line">	<span class="keyword">for</span>(j=i; j&lt;<span class="number">32</span>;j++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(G(i).total == <span class="number">0</span> || G(j).total == <span class="number">0</span>)</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>((G(i).total &lt; G(j).total)||       <span class="comment">/* 租金大的排前面 */</span></div><div class="line">			(G(i).total == G(j).total &amp;&amp; G(i).face==NORTH &amp;&amp; G(j).face!=NORTH) ||      <span class="comment">/* 租金相同按 南3&gt;东1&gt;西2&gt;北4 排, Gi朝北， Gj不朝北，Gj应该排前面 */</span></div><div class="line">			(G(i).total == G(j).total &amp;&amp; G(i).face==WEST &amp;&amp;( G(j).face==SOUTH || G(j).face==EAST)) ||   <span class="comment">/* Gi朝向西， Gj朝向南或者东 Gj应该排前面 */</span></div><div class="line">			(G(i).total == G(j).total &amp;&amp; G(i).face==EAST &amp;&amp;( G(j).face==SOUTH )) ||   <span class="comment">/* Gi朝向东， Gj朝向南 Gj应该排前面 */</span></div><div class="line">		    (G(i).total == G(j).total &amp;&amp; G(i).face==G(j).face &amp;&amp; G(i).elevator ==<span class="literal">false</span> &amp;&amp; G(j).elevator ==<span class="literal">true</span> ) ||   <span class="comment">/*钱和朝向都相同，有电梯的排前面 */</span></div><div class="line">			(G(i).total == G(j).total &amp;&amp; G(i).face==G(j).face &amp;&amp; G(i).elevator == G(j).elevator &amp;&amp; G(i).type &gt; G(j).type))   <span class="comment">/*全部都相同，户型1234从小到大，小的排前面 */</span></div><div class="line">		&#123;</div><div class="line"></div><div class="line">			<span class="comment">/* swap */</span></div><div class="line">			House tmp = G(i);</div><div class="line">			G(i) = G(j);</div><div class="line">			G(j) = tmp;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"T F E Money\n"</span>);</div><div class="line"></div><div class="line">	<span class="comment">/* output */</span></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">32</span>;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(G(i).total!=<span class="number">0</span>)</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>, G(i).type, G(i).face, G(i).elevator, G(i).total);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OID超过40亿会发生什么？]]></title>
      <url>http://shenyu.wiki/2017/08/16/OID%E8%B6%85%E8%BF%8740%E4%BA%BF%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>OID是32位无符号int类型，最大取值是2^32=42亿。如果超过了会发生什么呢？</p>
</blockquote>
<p>对于加了<code>with oids</code>属性的普通用户表，比较消耗oid，因为每行都要生成一个oid。一旦超过42亿，那么会重新从FirstNormalObjectId=16384开始。这就有可能发生表中的两行有重复的现象发生。（表A中两行oid一样，表A和表B两行oid一样。）</p>
<p>对于系统表，都是有<code>with oids</code>属性的。那么会不会在一个表中发生重复呢？答案是不会。默认数据库为系统表建了一个OID索引来保证其唯一性的。比如<code>pg_class_oid_index</code>。那么插入系统表的一行时，会先用<code>GetNewObjectId()</code>新生成一个OID，再往索引里面找，如果找到了那么继续往下找，直到这个新生成的OID在索引里面没有找到，那么就保证了这个OID在该表中是唯一的。但是这种机制只能保证该OID在一个系统表内部是不重复的，不能保证该OID没有在别的系统表或者用户表中用过。</p>
<p>冲突矩阵：</p>
<table>
<thead>
<tr>
<th>会不会冲突</th>
<th style="text-align:center">全局</th>
<th style="text-align:center">用户表中行的oid</th>
<th style="text-align:center">系统表A中行的oid</th>
<th style="text-align:center">系统表B中行的oid</th>
</tr>
</thead>
<tbody>
<tr>
<td>全局</td>
<td style="text-align:center">会</td>
<td style="text-align:center">会</td>
<td style="text-align:center">会</td>
<td style="text-align:center">会</td>
</tr>
<tr>
<td>用户表中行的oid</td>
<td style="text-align:center">会</td>
<td style="text-align:center">会</td>
<td style="text-align:center">会</td>
<td style="text-align:center">会</td>
</tr>
<tr>
<td>系统表A中行的oid</td>
<td style="text-align:center">会</td>
<td style="text-align:center">会</td>
<td style="text-align:center">不会</td>
<td style="text-align:center">会</td>
</tr>
<tr>
<td>系统表B中行的oid</td>
<td style="text-align:center">会</td>
<td style="text-align:center">会</td>
<td style="text-align:center">会</td>
<td style="text-align:center">不会</td>
</tr>
</tbody>
</table>
<p>所以假设OID是唯一是不明智的。</p>
<h2 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h2><p><img src="http://static.zybuluo.com/shenyuflying/2jto93ju1ntvvowq13hypg4o/image_1bnl2ggcv158q10s52hbh581eb99.png" alt="image_1bnl2ggcv158q10s52hbh581eb99.png-122kB"></p>
<p>所有的oid都是由<code>GetNewObjectId()</code>来生成的，其内部是维护一个全局的counter。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function">Oid</span></div><div class="line"><span class="title">GetNewObjectId</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">	LWLockAcquire(OidGenLock, LW_EXCLUSIVE);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (ShmemVariableCache-&gt;nextOid &lt; ((Oid) FirstNormalObjectId))</div><div class="line">	&#123;</div><div class="line">			<span class="comment">/* wraparound in normal environment */</span></div><div class="line">			ShmemVariableCache-&gt;nextOid = FirstNormalObjectId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	result = ShmemVariableCache-&gt;nextOid;</div><div class="line"></div><div class="line">	(ShmemVariableCache-&gt;nextOid)++;</div><div class="line"></div><div class="line">	LWLockRelease(OidGenLock);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果超出42亿那么就会重新从FirstNormalObjectId=16384开始。<br>在<code>heap_insert()</code>插入一条数据的时候，会调用<code>GetNewOid()</code>来生成一个OID，逻辑如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function">Oid</span></div><div class="line"><span class="title">GetNewOid</span><span class="params">(Relation relation)</span></div><div class="line">&#123;</div><div class="line">	oidIndex = RelationGetOidIndex(relation);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!OidIsValid(oidIndex))</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> GetNewObjectId();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	indexrel = index_open(oidIndex, AccessShareLock);</div><div class="line">	newOid = GetNewOidWithIndex(relation, indexrel);</div><div class="line">	index_close(indexrel, AccessShareLock);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> newOid;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果有oid索引(一般是系统表)，那么就会调用<code>GetNewOidWithIndex()</code>用索引来保证一致性。否则直接调用<code>GetNewObjectId()</code>来返回一个OID.</p>
<p>所以以上机制只能保证一个系统表内部的OID不会重复。</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[a very handy logging function]]></title>
      <url>http://shenyu.wiki/2017/08/15/a-very-handy-logging-function/</url>
      <content type="html"><![CDATA[<blockquote>
<p>print a log prefixed with a timestamp.</p>
</blockquote>
<h2 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-08-10 16:00:28.1050: hello</div><div class="line">2017-08-10 16:00:28.1050: 123</div></pre></td></tr></table></figure>
<h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><ol>
<li>add thread/process info</li>
<li>add log level</li>
<li>add strerror info “%m”</li>
</ol>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;sys/timeb.h&gt;</div><div class="line">#include &lt;stdarg.h&gt;</div><div class="line">#include &lt;time.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line"></div><div class="line">char *systime();</div><div class="line">void logging(char *fmt, ...);</div><div class="line"></div><div class="line">void</div><div class="line">logging(char *fmt, ...)</div><div class="line">&#123;</div><div class="line">	va_list		ap;</div><div class="line"></div><div class="line">	fprintf(stderr, &quot;%s: &quot;, systime());</div><div class="line">	va_start(ap, fmt);</div><div class="line">	vfprintf(stderr, fmt, ap);</div><div class="line">	va_end(ap);</div><div class="line">	fprintf(stderr, &quot;\n&quot;);</div><div class="line">	fflush(stderr);</div><div class="line">&#125;</div><div class="line"></div><div class="line">char * </div><div class="line">systime()</div><div class="line">&#123;</div><div class="line">	static char DataTime[25];                           /* &quot;%Y-%m-%d %H:%M:%S&quot; is just nineteen number */</div><div class="line">	char Millis[8];                                     /* Millisecond */</div><div class="line"></div><div class="line">	time_t rawtime;</div><div class="line">	struct tm *timeinfo;</div><div class="line">	struct timeb timebuffer;</div><div class="line"></div><div class="line">	ftime(&amp;timebuffer);</div><div class="line">	rawtime=timebuffer.time;</div><div class="line">	timeinfo=localtime(&amp;rawtime);                       /* get localtime */</div><div class="line">	</div><div class="line">	strftime(DataTime,25,&quot;%Y-%m-%d %H:%M:%S&quot;,timeinfo); /* Customize the system time format */</div><div class="line">	sprintf(Millis,&quot;.%+3.3hu0&quot;,timebuffer.millitm);</div><div class="line">	strncpy(DataTime+19,Millis,5);</div><div class="line">	</div><div class="line">	return DataTime;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	logging(&quot;hello&quot;);</div><div class="line">	logging(&quot;%d&quot;,123);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[postgres keepalive]]></title>
      <url>http://shenyu.wiki/2017/08/15/postgres-keepalive/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在客户端连接服务器后，由于各种异常情况，如客户端出现断网、死机、系统崩溃等情况，服务器可能并不知道对端的情况而一直维护这个连接，造成资源的浪费，因此设置了keepalive后，服务器可以探知对端发生的意外情况而释放这个连接。</p>
</blockquote>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>有三个参数可以配置：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">单位</th>
</tr>
</thead>
<tbody>
<tr>
<td>tcp_keepalives_idle</td>
<td style="text-align:center">最后一次数据交换到发送第一个探测包的间隔</td>
<td style="text-align:center">秒</td>
</tr>
<tr>
<td>tcp_keepalives_interval</td>
<td style="text-align:center">没有接收到对方确认，继续发送探测包的次数</td>
<td style="text-align:center">次</td>
</tr>
<tr>
<td>tcp_keepalives_count</td>
<td style="text-align:center">没有接收到对方确认，继续发送探测包的频率</td>
<td style="text-align:center">秒</td>
</tr>
</tbody>
</table>
<p>即在经过最后一次数据交换后，服务器会等待tcp_keepalive_idle秒的时间，然后发送第一个探测包，若没有收到确认就每隔tcp_keepalive_intvl秒发送下一个，当第tcp_keepalive_probes个探测包没有收到确认后，服务器就会释放这个连接</p>
<h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><p>在服务器的配置文件中加入三行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tcp_keepalives_idle = 180</div><div class="line">tcp_keepalives_interval = 30</div><div class="line">tcp_keepalives_count = 3</div></pre></td></tr></table></figure>
<p>在上例中，服务器先等待180秒后会每隔30秒发送一个探测包，若三个探测包均无确认，服务器会在总计240秒后断开连接。</p>
<p><strong>注意</strong>：以上配置需要重启服务器。</p>
<p>接下来登陆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ ./isql -USYSTEM -WMANAGER -h192.168.2.121 -p61123 TEST</div><div class="line">TEST=# show tcp_keepalives_idle;</div><div class="line"> tcp_keepalives_idle </div><div class="line">---------------------</div><div class="line"> 180</div><div class="line">(1 行)</div><div class="line"></div><div class="line">TEST=# show tcp_keepalives_count;</div><div class="line"> tcp_keepalives_count </div><div class="line">----------------------</div><div class="line"> 3</div><div class="line">(1 行)</div><div class="line"></div><div class="line">TEST=# show tcp_keepalives_interval;</div><div class="line"> tcp_keepalives_interval </div><div class="line">-------------------------</div><div class="line"> 30</div><div class="line">(1 行)</div></pre></td></tr></table></figure>
<h2 id="内部实现"><a href="#内部实现" class="headerlink" title="内部实现"></a>内部实现</h2><p>keepalive是通过<code>pq_setkeepalive</code>函数来设置的，该函数的调用关系如下图。<br><img src="http://static.zybuluo.com/shenyuflying/b0a8768gu9v61tsvc83lsv2f/image_1bniabaj2bp1ms11ni33pc43s9.png" alt="image_1bniabaj2bp1ms11ni33pc43s9.png-26.2kB"><br>可以看到是在连接ConnCreate的时候来设置的。具体的看<code>pg_setkeepalivesidle</code>可以看到：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">pq_setkeepalivesidle</span><span class="params">(<span class="keyword">int</span> idle, Port *port)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (port == <span class="literal">NULL</span> || IS_AF_UNIX(port-&gt;laddr.addr.ss_family))</div><div class="line">		<span class="keyword">return</span> STATUS_OK;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (idle == port-&gt;keepalives_idle)</div><div class="line">		<span class="keyword">return</span> STATUS_OK;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (setsockopt(port-&gt;sock, IPPROTO_TCP, TCP_KEEPIDLE,</div><div class="line">				   (<span class="keyword">char</span> *) &amp;idle, <span class="keyword">sizeof</span>(idle)) &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		elog(LOG, <span class="string">"setsockopt(TCP_KEEPIDLE) failed: %m"</span>);</div><div class="line">		<span class="keyword">return</span> STATUS_ERROR;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	port-&gt;keepalives_idle = idle;</div><div class="line">	<span class="keyword">return</span> STATUS_OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>首先会判断是不是空端口（比如本地fork出来的进程），和是不是本地的端口（IS_AF_UNIX）。如果是这两种情况就不会设。</li>
<li>如果已经设上那么直接返回。</li>
<li>接下来用<code>setsockopt</code>来设置。</li>
</ol>
<p><strong>注意</strong>：以上代码是简化版本。</p>
<h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><p>有反应show keepalive出来的值是0. show是利用getsockopt来获取端口实际的值。如果连接是本机的话，其实是没设上idle interval count，所以show出来是0. 连接是远程的话，才能设上，show也能显示出来。</p>
<p>根据如上代码分析：本机的连接不需要设keepalive，只有远程的连接才会设。<br>show的时候是用getsockopt来获取当前连接的keepalive值。所以本机的getsockopt获取的是0。其实是没设上。远程的正常。</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[where does bug come from]]></title>
      <url>http://shenyu.wiki/2017/06/27/where-does-bug-come-from/</url>
      <content type="html"><![CDATA[<script async class="speakerdeck-embed" data-id="8428ec82d6cb4fcc92512aa31b1d73a2" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p><img src="http://static.zybuluo.com/shenyuflying/178ausamam7ijmmscft0voa7/bug%20fix%20sharing.pdf" alt="bug fix sharing.pdf-384.4kB"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hanoi]]></title>
      <url>http://shenyu.wiki/2017/06/24/hanoi/</url>
      <content type="html"><![CDATA[<blockquote>
<p>a visualized hanoi program.</p>
</blockquote>
<center> <img src="http://static.zybuluo.com/shenyuflying/w6uja40t1dn3swbnfg6am8ou/hanoi.gif" alt="hanoi.gif-5.9kB"> </center>

<a id="more"></a>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></div><div class="line"><span class="keyword">int</span> bars[<span class="number">3</span>][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBar</span><span class="params">(<span class="keyword">int</span> *onebar)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;N;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(onebar[i]!=<span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, onebar[i]);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"-"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</div><div class="line">        printBar(bars[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> which;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> j;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</div><div class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;N;j++)</div><div class="line">        <span class="keyword">if</span>(bars[i][j] == n)</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> which, <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</div><div class="line">        <span class="keyword">if</span>(bars[which][i] == n)</div><div class="line">            bars[which][i] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> which, <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(which == <span class="number">-1</span>)</div><div class="line">        which = <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(which == <span class="number">3</span>)</div><div class="line">        which = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</div><div class="line">        <span class="keyword">if</span>(bars[which][i] == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            bars[which][i] = n;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shift</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> d)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> which;</div><div class="line"></div><div class="line">    system(<span class="string">"clear"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nshift %d %s\n"</span>, n,d&gt;<span class="number">0</span> ? <span class="string">"right"</span> : <span class="string">"left"</span>);</div><div class="line"></div><div class="line">    which = find(n);</div><div class="line">    <span class="keyword">delete</span>(which, n);</div><div class="line">    insert(which+d,n);</div><div class="line">    print();</div><div class="line">    usleep(<span class="number">300000</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> d)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">    hanoi(n<span class="number">-1</span>, -d);</div><div class="line">    shift(n, d);</div><div class="line">    hanoi(n<span class="number">-1</span>, -d);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        bars[<span class="number">0</span>][i] = n - i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n = atoi(argv[<span class="number">1</span>]);</div><div class="line"></div><div class="line">    init(n);</div><div class="line">    print();</div><div class="line">    hanoi(n,<span class="number">-1</span>);</div><div class="line">    print();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Efficient Locking for Concurrent Operations on B-Trees]]></title>
      <url>http://shenyu.wiki/2017/06/22/Efficient-Locking-for-Concurrent-Operations-on-B-Trees/</url>
      <content type="html"><![CDATA[<p><a href="/uploads/Efficient-Locking-for-Concurrent-Operations-on-B-Trees.pdf">Efficient Locking for Concurrent Operations on B-Trees</a></p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[postgres-xc concept implementation and achievements]]></title>
      <url>http://shenyu.wiki/2017/06/18/postgres-xc-concept-implementation-and-achievements/</url>
      <content type="html"><![CDATA[<p>This paper covers the very idea of pg-xc, which is a good place to start for pg-xc developers.</p>
<p><a href="/uploads/Postgres-XC-Concept-Implementation-and-Achievements.pdf">postgres-XC concept implementation and achievements</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[with hold cursor]]></title>
      <url>http://shenyu.wiki/2017/06/12/with-hold-cursor/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近在协助光大银行研发国产化平台，遇到了一个问题：客户这边需要fetch一条数据，然后根据取到的数据做update等等（不一定是对这刚取到的数据进行update），然后再fetch下一条，然后下一条取不出来。经过看客户这边的代码是因为多个fetch操作之间有update语句进行commit操作。commit会把cursor删掉，之后的fetch无法使用cursor。这时候with hold cursor就派上用场了。</p>
</blockquote>
<p>重现用例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	EXEC SQL BEGIN DECLARE SECTION;</div><div class="line">		<span class="keyword">int</span> dboid;</div><div class="line">		<span class="keyword">char</span> dbname[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">	EXEC SQL END   DECLARE SECTION;</div><div class="line"></div><div class="line">	EXEC SQL CONNECT TO postgres USER yshen;</div><div class="line"></div><div class="line">	EXEC SQL PREPARE stmt1 FROM <span class="string">"SELECT oid,datname FROM pg_database WHERE oid &gt; ?"</span>;</div><div class="line">	EXEC SQL DECLARE foo_bar CURSOR FOR stmt1;</div><div class="line"></div><div class="line">	<span class="comment">/* when end of result set reached, break out of while loop */</span></div><div class="line">	EXEC SQL WHENEVER NOT FOUND DO BREAK;</div><div class="line">	EXEC SQL WHENEVER SQLERROR STOP;</div><div class="line"></div><div class="line">	EXEC SQL OPEN foo_bar USING <span class="number">100</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		    EXEC SQL FETCH NEXT FROM foo_bar INTO :dboid, :dbname;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, dboid, dbname);</div><div class="line">		    EXEC SQL COMMIT;</div><div class="line">	&#125;</div><div class="line">	EXEC SQL CLOSE foo_bar;</div><div class="line">	EXEC SQL DEALLOCATE PREPARE stmt1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是数据库日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">LOG:  statement: begin transaction</div><div class="line">LOG:  execute &lt;unnamed&gt;: declare foo_bar cursor for SELECT oid,datname FROM sys_database WHERE oid &gt; $1</div><div class="line">DETAIL:  parameters: $1 = &apos;100&apos;</div><div class="line">LOG:  statement: fetch next from foo_bar</div><div class="line">LOG:  statement: commit</div><div class="line">LOG:  statement: begin transaction</div><div class="line">LOG:  statement: fetch next from foo_bar</div><div class="line">ERROR:  cursor &quot;foo_bar&quot; does not exist</div><div class="line">STATEMENT:  fetch next from foo_bar</div></pre></td></tr></table></figure>
<p>可以看到，commit会删掉定义的cursor，所以服务器报<code>ERROR:  cursor &quot;foo_bar&quot; does not exist</code>错误。</p>
<p>加上WITH HOLD 关键字即可解决这个问题：</p>
<p>EXEC SQL DECLARE foo_bar CURSOR <code>WITH HOLD</code> FOR stmt1;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">LOG:  statement: begin transaction</div><div class="line">LOG:  execute &lt;unnamed&gt;: declare foo_bar cursor with hold for SELECT oid,datname FROM pg_database WHERE oid &gt; $1</div><div class="line">DETAIL:  parameters: $1 = &apos;100&apos;</div><div class="line">LOG:  statement: fetch next from foo_bar</div><div class="line">LOG:  statement: commit</div><div class="line">LOG:  statement: begin transaction</div><div class="line">LOG:  statement: fetch next from foo_bar</div><div class="line">LOG:  statement: commit</div><div class="line">LOG:  statement: begin transaction</div><div class="line">LOG:  statement: fetch next from foo_bar</div><div class="line">LOG:  statement: close foo_bar</div><div class="line">LOG:  statement: deallocate &quot;stmt1&quot;</div><div class="line">LOG:  statement: commit</div></pre></td></tr></table></figure>
<p>可以看到数据是成功取出来了，服务器并没有报错。</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库使用bytea类型存取二进制文件]]></title>
      <url>http://shenyu.wiki/2017/05/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8bytea%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%8F%96%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>数据库除了存取数字、文本等数据类型之外，还经常用来存取二进制文件类型。下面用OCI接口举例如何用数据库来存储图片。可以存取二进制文件类型的可以用char、text、bytea、lob等数据类型。正常要使用lob类型来存放二进制文件，因为lob类型支持随机访问，但是需要比较复杂的接口调用。这里用postresql的bytea数据类型来存放二进制文件。</p>
</blockquote>
<h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">sample</span> (</div><div class="line">a <span class="built_in">text</span> primary <span class="keyword">key</span>,            <span class="comment">--name of file</span></div><div class="line">b bytea);                      <span class="comment">--data of file</span></div></pre></td></tr></table></figure>
<h2 id="图片导入到数据库"><a href="#图片导入到数据库" class="headerlink" title="图片导入到数据库"></a>图片导入到数据库</h2><center><img src="http://static.zybuluo.com/shenyuflying/8rpikj01xb3qbp621akbb9lo/image_1bfrp85vf1j851v581vo4dt882p9.png" alt="image_1bfrp85vf1j851v581vo4dt882p9.png-14.4kB"></center>

<h2 id="数据库导出到图片"><a href="#数据库导出到图片" class="headerlink" title="数据库导出到图片"></a>数据库导出到图片</h2><center><img src="http://static.zybuluo.com/shenyuflying/h9fs74rea0iba2cnvcngyygo/image_1bfrp8lv01oac1n8r1q021g0t5om.png" alt="image_1bfrp8lv01oac1n8r1q021g0t5om.png-16.3kB"></center><br><center><img src="http://static.zybuluo.com/shenyuflying/jm5w06dsy85czxswribdbjk7/image_1bfrp950m1v0710a710i6gd5tlt13.png" alt="image_1bfrp950m1v0710a710i6gd5tlt13.png-82.5kB"></center>


<h2 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"oci.h"</span> <span class="comment">//OCI接口头文件</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line">OCIEnv *envhp;      <span class="comment">//环境句柄</span></div><div class="line">OCIError *errhp;	<span class="comment">//错误句柄</span></div><div class="line">OCISvcCtx *svchp;	<span class="comment">//上下文句柄</span></div><div class="line">OCIStmt *stmthp = (OCIStmt *) <span class="literal">NULL</span>;<span class="comment">//语句句柄</span></div><div class="line"></div><div class="line"><span class="function">sword <span class="title">finish_demo</span><span class="params">(boolean loggedon, OCIEnv *envhp, OCISvcCtx *svchp,</span></span></div><div class="line">                   OCIError *errhp, OCIStmt *stmthp);</div><div class="line"><span class="function">sword <span class="title">init_handles</span><span class="params">(OCIEnv **envhp, OCIError **errhp)</span></span>;</div><div class="line"><span class="function">sword <span class="title">log_on</span><span class="params">(OCIEnv *envhp, OCIError *errhp,</span></span></div><div class="line">       text *uid, text *pwd, text *DbName);</div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">file_to_binary_string</span><span class="params">(<span class="keyword">char</span> *filename)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">binary_string_to_file</span><span class="params">(<span class="keyword">char</span> *filename, <span class="keyword">char</span> * str)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">store</span><span class="params">(<span class="keyword">char</span> * filename)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fetch</span><span class="params">(<span class="keyword">char</span> * filename)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">report_error</span><span class="params">(OCIError *errhp)</span>;</div><div class="line"></div><div class="line"><span class="comment">//初始化各种句柄</span></div><div class="line"><span class="function">sword</span></div><div class="line"><span class="title">init_handles</span><span class="params">(OCIEnv **envhp, OCIError **errhp)</span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Environment setup ....\n"</span>);</div><div class="line"></div><div class="line">	<span class="comment">/* 初始化OCI应用环境 */</span></div><div class="line">	<span class="keyword">if</span> (OCIInitialize(OCI_DEFAULT, (dvoid *)<span class="number">0</span>,</div><div class="line">		(dvoid * (*)(dvoid *, <span class="keyword">size_t</span>))<span class="number">0</span>,</div><div class="line">		(dvoid * (*)(dvoid *, dvoid *, <span class="keyword">size_t</span>))<span class="number">0</span>,</div><div class="line">		(<span class="keyword">void</span> (*)(dvoid *, dvoid *))<span class="number">0</span>))</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"FAILED: OCIInitialize()\n"</span>);</div><div class="line">		<span class="keyword">return</span> OCI_ERROR;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* 初始化环境句柄 */</span></div><div class="line">	<span class="keyword">if</span> (OCIEnvInit((OCIEnv **)envhp, (ub4)OCI_DEFAULT,</div><div class="line">		(<span class="keyword">size_t</span>)<span class="number">0</span>, (dvoid **)<span class="number">0</span>))</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"FAILED: OCIEnvInit()\n"</span>);</div><div class="line">		<span class="keyword">return</span> OCI_ERROR;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* 从环境句柄上分配一个错误信息句柄 */</span></div><div class="line">	<span class="keyword">if</span> (OCIHandleAlloc((dvoid *)*envhp, (dvoid **)errhp,</div><div class="line">		(ub4)OCI_HTYPE_ERROR, (<span class="keyword">size_t</span>)<span class="number">0</span>, (dvoid **)<span class="number">0</span>))</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"FAILED: OCIHandleAlloc() on errhp\n"</span>);</div><div class="line">		<span class="keyword">return</span> OCI_ERROR;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> OCI_SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用给定的用户名和口令登录到指定的数据库服务上</span></div><div class="line"><span class="function">sword</span></div><div class="line"><span class="title">log_on</span><span class="params">(OCIEnv *envhp, OCIError *errhp,</span></div><div class="line">       text *uid, text *pwd, text *DbName)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Logging on as %s  ....\n"</span>, uid);</div><div class="line"></div><div class="line">	<span class="comment">/* 连接数据库，在 OCILogon 中分配 Service handle */</span></div><div class="line">	<span class="keyword">if</span> (OCILogon(envhp, errhp, &amp;svchp, uid, (ub4)<span class="built_in">strlen</span>((<span class="keyword">char</span>*)uid),</div><div class="line">		pwd, (ub4)<span class="built_in">strlen</span>((<span class="keyword">char</span>*)pwd), DbName, (ub4)<span class="built_in">strlen</span>((<span class="keyword">char</span>*)DbName)))</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"FAILED: OCILogon()\n"</span>);</div><div class="line">		<span class="keyword">return</span> OCI_ERROR;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s logged on.\n"</span>, uid);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> OCI_SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//断开连接，并释放各种句柄</span></div><div class="line"><span class="function">sword</span></div><div class="line"><span class="title">finish_demo</span><span class="params">(boolean loggedon, OCIEnv *envhp, OCISvcCtx *svchp,</span></div><div class="line">                   OCIError *errhp, OCIStmt *stmthp)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (stmthp)</div><div class="line">		OCIHandleFree((dvoid *)stmthp, (ub4)OCI_HTYPE_STMT);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"logoff ...\n"</span>);</div><div class="line">	<span class="keyword">if</span> (loggedon)</div><div class="line">		OCILogoff(svchp, errhp);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Freeing handles ...\n"</span>);</div><div class="line">	<span class="keyword">if</span> (svchp)</div><div class="line">		OCIHandleFree((dvoid *) svchp, (ub4)OCI_HTYPE_SVCCTX);</div><div class="line">	<span class="keyword">if</span> (errhp)</div><div class="line">		OCIHandleFree((dvoid *) errhp, (ub4)OCI_HTYPE_ERROR);</div><div class="line">	<span class="keyword">if</span> (envhp)</div><div class="line">		OCIHandleFree((dvoid *) envhp, (ub4)OCI_HTYPE_ENV);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> OCI_SUCCESS;</div><div class="line">&#125;</div><div class="line"><span class="comment">//打印错误信息</span></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">report_error</span><span class="params">(OCIError *errhp)</span></div><div class="line">&#123;</div><div class="line">	text  msgbuf[<span class="number">512</span>];</div><div class="line">	sb4   errcode = <span class="number">0</span>;</div><div class="line"></div><div class="line">	OCIErrorGet((dvoid *)errhp, (ub4)<span class="number">1</span>, (text *)<span class="literal">NULL</span>, &amp;errcode,</div><div class="line">		msgbuf, (ub4)<span class="keyword">sizeof</span>(msgbuf), (ub4)OCI_HTYPE_ERROR);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"ERROR CODE = %d"</span>, errcode);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%.*s\n"</span>, <span class="number">512</span>, msgbuf);</div><div class="line"></div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//on error return NULL</span></div><div class="line"><span class="comment">//on success return the binary string</span></div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">file_to_binary_string</span><span class="params">(<span class="keyword">char</span> *filename)</span></span></div><div class="line">&#123;</div><div class="line">	FILE *fp = fopen(filename,<span class="string">"r"</span>);</div><div class="line">	<span class="keyword">char</span> *buffer = <span class="literal">NULL</span>;</div><div class="line">	<span class="keyword">size_t</span> pos = <span class="number">0</span>; <span class="comment">// file read position</span></div><div class="line">	<span class="keyword">size_t</span> size = <span class="number">1024</span>; <span class="comment">//how much mem allocated</span></div><div class="line">	<span class="keyword">size_t</span> nread = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> ch; <span class="comment">// hold byte read from file</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"error opening %s for reading\n"</span>, filename);</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	buffer = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(size);</div><div class="line"></div><div class="line">	<span class="comment">// read until end of file</span></div><div class="line">	<span class="keyword">while</span>( <span class="number">0</span> != (nread = fread(&amp;ch,<span class="number">1</span>,<span class="number">1</span>,fp)))</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">char</span> tmp[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;; <span class="comment">//hold the string form of binary data, i,e: FF</span></div><div class="line"></div><div class="line">		<span class="built_in">sprintf</span>(tmp,<span class="string">"%02x"</span>,ch);</div><div class="line">		buffer[pos++]=tmp[<span class="number">0</span>];</div><div class="line">		<span class="keyword">if</span> (pos==size)</div><div class="line">		&#123;</div><div class="line">			buffer = (<span class="keyword">char</span> *)<span class="built_in">realloc</span>(buffer, size*<span class="number">2</span>);</div><div class="line">			size = size*<span class="number">2</span>;</div><div class="line">		&#125;</div><div class="line">		buffer[pos++]=tmp[<span class="number">1</span>];</div><div class="line">		<span class="keyword">if</span> (pos==size)</div><div class="line">		&#123;</div><div class="line">			buffer = (<span class="keyword">char</span> *)<span class="built_in">realloc</span>(buffer, size*<span class="number">2</span>);</div><div class="line">			size = size*<span class="number">2</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	buffer[pos]=<span class="string">'\0'</span>; <span class="comment">// add tailing zero</span></div><div class="line"></div><div class="line">	fclose(fp);</div><div class="line"></div><div class="line">	<span class="comment">// the buffer should be freed by the caller</span></div><div class="line">	<span class="keyword">return</span> buffer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">binary_string_to_file</span><span class="params">(<span class="keyword">char</span> *filename, <span class="keyword">char</span> *str)</span></span></div><div class="line">&#123;</div><div class="line">	FILE *fp = fopen(filename,<span class="string">"w"</span>);</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> table[<span class="string">'F'</span>+<span class="number">1</span>];</div><div class="line">	<span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line"></div><div class="line">	table[<span class="string">'0'</span>]=<span class="number">0</span>;</div><div class="line">	table[<span class="string">'1'</span>]=<span class="number">1</span>;</div><div class="line">	table[<span class="string">'2'</span>]=<span class="number">2</span>;</div><div class="line">	table[<span class="string">'3'</span>]=<span class="number">3</span>;</div><div class="line">	table[<span class="string">'4'</span>]=<span class="number">4</span>;</div><div class="line">	table[<span class="string">'5'</span>]=<span class="number">5</span>;</div><div class="line">	table[<span class="string">'6'</span>]=<span class="number">6</span>;</div><div class="line">	table[<span class="string">'7'</span>]=<span class="number">7</span>;</div><div class="line">	table[<span class="string">'8'</span>]=<span class="number">8</span>;</div><div class="line">	table[<span class="string">'9'</span>]=<span class="number">9</span>;</div><div class="line">	table[<span class="string">'A'</span>]=<span class="number">10</span>;</div><div class="line">	table[<span class="string">'B'</span>]=<span class="number">11</span>;</div><div class="line">	table[<span class="string">'C'</span>]=<span class="number">12</span>;</div><div class="line">	table[<span class="string">'D'</span>]=<span class="number">13</span>;</div><div class="line">	table[<span class="string">'E'</span>]=<span class="number">14</span>;</div><div class="line">	table[<span class="string">'F'</span>]=<span class="number">15</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"error opening %s for writing\n"</span>, filename);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i+=<span class="number">2</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">char</span> bin;</div><div class="line">		bin = <span class="number">16</span>*table[str[i]] + table[str[i+<span class="number">1</span>]];</div><div class="line">		<span class="built_in">fprintf</span>(fp, <span class="string">"%c"</span>, bin);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fclose(fp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//store a file in to database</span></div><div class="line"><span class="comment">//should have a table like this:</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//create table sample ( a text primary key, -- filename</span></div><div class="line"><span class="comment">//                      b bytea );          -- data</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">store</span><span class="params">(<span class="keyword">char</span> * filename)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> *str = <span class="literal">NULL</span>;</div><div class="line">	<span class="keyword">char</span> *sql = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	str = file_to_binary_string(filename);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(str==<span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sql = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(str)+<span class="number">100</span>); <span class="comment">// more space for insert ...</span></div><div class="line">	<span class="built_in">memset</span>(sql,<span class="number">0</span>,<span class="built_in">strlen</span>(str)+<span class="number">100</span>);         <span class="comment">// more space for insert ...</span></div><div class="line"></div><div class="line">	<span class="built_in">sprintf</span>(sql, <span class="string">"insert into sample values('%s', '%s');"</span>, filename, str);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (OCIStmtPrepare(stmthp, errhp, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)sql, (ub4)<span class="built_in">strlen</span>((<span class="keyword">char</span> *)sql),</div><div class="line">		(ub4)OCI_NTV_SYNTAX, (ub4)OCI_DEFAULT))</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"FAILED: OCIStmtPrepare() insert\n"</span>);</div><div class="line">		finish_demo(TRUE, envhp, svchp, errhp, stmthp);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//非查询类型语句，iters参数必需&gt;=1</span></div><div class="line">	<span class="keyword">if</span> (OCIStmtExecute(svchp, stmthp, errhp, (ub4)<span class="number">1</span>, (ub4)<span class="number">0</span>,</div><div class="line">		(CONST OCISnapshot*)<span class="number">0</span>, (OCISnapshot*)<span class="number">0</span>,</div><div class="line">		(ub4)OCI_DEFAULT))</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"FAILED: OCIStmtExecute() insert\n"</span>);</div><div class="line">		finish_demo(TRUE, envhp, svchp, errhp, stmthp);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="built_in">free</span>(str);</div><div class="line">	<span class="built_in">free</span>(sql);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"ok!\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fetch</span><span class="params">(<span class="keyword">char</span> * filename)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// should be enough</span></div><div class="line">	OCIParam     *mypard = (OCIParam *) <span class="number">0</span>;</div><div class="line">	ub2          dtype;</div><div class="line">	text         *col_name;</div><div class="line">	ub4          counter, col_name_len, char_semantics;</div><div class="line">	ub2          col_width;</div><div class="line">	ub4 dsize = <span class="number">100</span>*<span class="number">1024</span>*<span class="number">1024</span>; <span class="comment">//100M should be enough</span></div><div class="line">	<span class="keyword">char</span> *str = <span class="literal">NULL</span>;</div><div class="line">	OCIDefine *bndhp;</div><div class="line">	ub4 stmrow = <span class="number">0</span>;</div><div class="line"></div><div class="line">	str=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(dsize+<span class="number">1</span>);</div><div class="line">	<span class="built_in">memset</span>(str,<span class="number">0</span>,dsize+<span class="number">1</span>);</div><div class="line"></div><div class="line">	<span class="built_in">sprintf</span>(sql, <span class="string">"select b from sample where a = '%s'"</span>, filename);</div><div class="line"></div><div class="line">	<span class="comment">//准备查询语句</span></div><div class="line">	<span class="keyword">if</span> (OCIStmtPrepare(stmthp, errhp, sql, (ub4)<span class="built_in">strlen</span>((<span class="keyword">char</span> *)sql),</div><div class="line">		(ub4)OCI_NTV_SYNTAX, (ub4)OCI_DEFAULT))</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"FAILED: OCIStmtPrepare() select\n"</span>);</div><div class="line">		report_error(errhp);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//执行查询语句</span></div><div class="line">	<span class="keyword">if</span> (OCIStmtExecute(svchp, stmthp, errhp, (ub4)<span class="number">0</span>, (ub4)<span class="number">0</span>,</div><div class="line">		(CONST OCISnapshot*)<span class="number">0</span>, (OCISnapshot*)<span class="number">0</span>,</div><div class="line">		(ub4)OCI_DEFAULT))</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"FAILED: OCIStmtExecute() select\n"</span>);</div><div class="line">		report_error(errhp);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">// bind</span></div><div class="line">	<span class="keyword">if</span> (OCIDefineByPos(stmthp, &amp;bndhp, errhp, <span class="number">1</span>,</div><div class="line">		(dvoid *)str, (sb4)dsize, (ub2)SQLT_STR,</div><div class="line">		(dvoid *)<span class="number">0</span>, (ub2 *)<span class="number">0</span>, (ub2 *)<span class="number">0</span>, (ub4)OCI_DEFAULT))</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"FAILED: OCIDefineByPos()\n"</span>);</div><div class="line">		report_error(errhp);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (OCIStmtFetch(stmthp, errhp, <span class="number">1</span>, OCI_FETCH_NEXT, <span class="number">0</span>) == OCI_ERROR)</div><div class="line">	&#123;</div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"FAILED: OCIStmtFetch() select\n"</span>);</div><div class="line">		report_error(errhp);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	OCIAttrGet(stmthp, OCI_HTYPE_STMT, &amp;stmrow, <span class="number">0</span>, OCI_ATTR_ROW_COUNT, errhp);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(stmrow == <span class="number">0</span>)<span class="comment">//没有新行被获取，那么跳出</span></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"no rows fetched\n"</span>);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"提取到了%d行记录\n"</span>, stmrow);</div><div class="line"></div><div class="line"></div><div class="line">	binary_string_to_file(filename, str);</div><div class="line"></div><div class="line">	<span class="built_in">free</span>(str);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"ok!\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//主程序入口</span></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">main</span><span class="params">()</span></div><div class="line">&#123;</div><div class="line">	text *DbName =(text*)<span class="string">"Kingbase"</span>; <span class="comment">//配置文件 sys_service.conf 中配置的数据源名</span></div><div class="line">	text *username = (text *)<span class="string">"SYSTEM"</span>; <span class="comment">//用户名</span></div><div class="line">	text *password = (text *)<span class="string">"MANAGER"</span>; <span class="comment">//口令</span></div><div class="line">	<span class="keyword">int</span> logged_on = FALSE;</div><div class="line">	<span class="keyword">int</span> choice = <span class="number">0</span>;</div><div class="line">	<span class="keyword">char</span> filename[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">	<span class="comment">//初始化各种句柄</span></div><div class="line">	<span class="keyword">if</span> (init_handles(&amp;envhp, &amp;errhp))</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"FAILED: init_handles()\n"</span>);</div><div class="line">		<span class="keyword">return</span> finish_demo(logged_on, envhp, svchp, errhp, stmthp);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//登录到数据库服务</span></div><div class="line">	<span class="keyword">if</span> (log_on(envhp, errhp, username, password, DbName))</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"FAILED: log_on()\n"</span>);</div><div class="line">		<span class="keyword">return</span> finish_demo(logged_on, envhp, svchp, errhp, stmthp);</div><div class="line">	&#125;</div><div class="line">	logged_on = TRUE;</div><div class="line">	<span class="keyword">if</span> (OCIHandleAlloc((dvoid *)envhp, (dvoid **)&amp;stmthp,</div><div class="line">		(ub4)OCI_HTYPE_STMT, (CONST <span class="keyword">size_t</span>)<span class="number">0</span>, (dvoid **) <span class="number">0</span>))</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"FAILED: alloc statement handle\n"</span>);</div><div class="line">		<span class="keyword">return</span> finish_demo(logged_on, envhp, svchp, errhp, stmthp);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"\n1)store a file."</span></div><div class="line">	       <span class="string">"\n2)fetch a file."</span></div><div class="line">	       <span class="string">"\nyour choice : "</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice);</div><div class="line"></div><div class="line">	<span class="keyword">switch</span>(choice)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"FileName : "</span>);</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%s"</span>, filename);</div><div class="line">			store(filename);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"FileName : "</span>);</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%s"</span>, filename);</div><div class="line">			fetch(filename);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"bad choice!\n"</span>);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//登出数据库服务，并清理各种句柄</span></div><div class="line">	<span class="keyword">return</span> finish_demo(logged_on, envhp, svchp, errhp, stmthp);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DTCC2017]]></title>
      <url>http://shenyu.wiki/2017/05/25/DTCC2017/</url>
      <content type="html"><![CDATA[<p><img src="http://static.zybuluo.com/shenyuflying/cyto7qzlpnwndm4z2ki4aagy/image_1bgvne5cr1ktvr0a1qdc1247g73m.png" alt="dtcc2017"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[postgres identifier and keyword]]></title>
      <url>http://shenyu.wiki/2017/05/10/postgres-identifier-and-keyworkd/</url>
      <content type="html"><![CDATA[<h2 id="identifier"><a href="#identifier" class="headerlink" title="identifier"></a>identifier</h2><p>identifier is defined in scan.l just like below</p>
<center><img src="http://static.zybuluo.com/shenyuflying/r9ofw87pnanbqn41qm0zib7e/image_1bfnvt1dsi911hs41pml1qmm1sf2m.png" alt="image_1bfnvt1dsi911hs41pml1qmm1sf2m.png-21.2kB"></center>

<p>it is a string start with <code>letter</code> or <code>-</code> and might following with numbers.</p>
<h2 id="keyword"><a href="#keyword" class="headerlink" title="keyword"></a>keyword</h2><p>keywords is defined in <code>kwlist.h</code> just like below</p>
<center><img src="http://static.zybuluo.com/shenyuflying/ikrcc22t1eko062lv1l818dd/image_1bfo0372n16ohq9165i18k518sl13.png" alt="image_1bfo0372n16ohq9165i18k518sl13.png-91.6kB"></center>

<p>the name of keyword is the string scanned by the lexer.<br>the value is defined in the lexer <code>%token &lt;keyword&gt;</code> session and later convert to an enum value.<br>we have four categories of keyword:</p>
<ul>
<li>reserved key workd: keywords that are usable only as ColLabel( select a as col1 …)</li>
<li>unreserved keyword : keyword can be used as any type of name.</li>
<li>column keyword: keywords that can be column, table, etc, names</li>
<li>function name keyword: keywords that can be function names</li>
</ul>
<h2 id="relation-of-identifier-and-keyword"><a href="#relation-of-identifier-and-keyword" class="headerlink" title="relation of identifier and keyword"></a>relation of identifier and keyword</h2><p>in short, keyword is a subset of identifiers. in the lex scanner, when we have an identifier matched, we first check to see if it is a keyword by <code>ScanKeywordLookup</code>. the function take a binary search in the keyword list. if a keyword is found the enum value of the keyword is returned to the parser.</p>
<p>if the identifier is not a keyword, we truncate the string in to NAMEDATELEN(which is 64 byte long) and convert into lower case. after we have done the casting, we store the string value of the identifier into <code>yylval-&gt;str</code> and return <code>IDENT</code> to the parser.</p>
<center><img src="http://static.zybuluo.com/shenyuflying/a147jgs1l59oz60obsmlbbjd/image_1bfnvkmf2kog7pd1ihf29j7ca9.png" alt="image_1bfnvkmf2kog7pd1ihf29j7ca9.png-99.5kB"></center>

<h2 id="more-about-key-word-categories"><a href="#more-about-key-word-categories" class="headerlink" title="more about key word categories"></a>more about key word categories</h2><p>the reason why we have four categories of keyword is to allow keyword to use in more cases. suppose we only have one category keyword, the reserved keyword. the keyword, for example <code>NUMERIC</code> might not be used as colnames.</p>
<p>by putting <code>NUMERIC</code> into unreserved keyword category we allow it to be used as column names.</p>
<center><img src="http://static.zybuluo.com/shenyuflying/ywt2xxzhx52c2wra5o189cx3/image_1bfo1o0g11nq44chrtqa9f1ane1t.png" alt="image_1bfo1o0g11nq44chrtqa9f1ane1t.png-34.7kB"></center>

<p>however, the <code>SELECT</code> is a reserved keyword which cannot be used as column names, else we might have a sql query like this<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select select from select;</div></pre></td></tr></table></figure></p>
<p>this will make the parser confused.</p>
<h2 id="add-new-key-word"><a href="#add-new-key-word" class="headerlink" title="add new key word"></a>add new key word</h2><p>if you want to make any keyword changes, for example add a new keyword, you can do it like this:</p>
<ol>
<li>add it in <code>kwlist.h</code> and fill in the right category</li>
<li>add it in <code>gram.y</code> <code>%token</code> section so a enum value for it can be generated</li>
<li>add your keyword into the right place of the rules in <code>gram.y</code></li>
<li>complie and test</li>
</ol>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[获取字段分组个数]]></title>
      <url>http://shenyu.wiki/2017/05/06/%E8%8E%B7%E5%8F%96%E5%AD%97%E6%AE%B5%E5%88%86%E7%BB%84%E4%B8%AA%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>现场应用有一个需求，是获取字段分组个数。这里简单介绍2种实现方法。</p>
</blockquote>
<p>表中的数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">TEST=# select * from tab1;</div><div class="line"> COL</div><div class="line">-----</div><div class="line">  10</div><div class="line">  20</div><div class="line">  10</div><div class="line">  20</div><div class="line">  10</div><div class="line">(5 rows)</div></pre></td></tr></table></figure></p>
<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>先用<code>group by</code>进行分组，可以看到有2组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">TEST=# select  count(*) from tab1 group by col;</div><div class="line"> COUNT</div><div class="line">-------</div><div class="line">     2</div><div class="line">     3</div><div class="line">(2 rows)</div></pre></td></tr></table></figure></p>
<p>在这个基础上来获取记录条数，这里用到了子查询。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">TEST=# select count(*) from (select  count(*) from tab1 group by col);</div><div class="line"> COUNT</div><div class="line">-------</div><div class="line">     2</div><div class="line">(1 row)</div></pre></td></tr></table></figure></p>
<p>结果就是有两个分组。</p>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>先用<code>distinct</code>来去重复，再<code>count</code>计算去重后的条数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">TEST=#  select count(distinct(col)) from tab1 ;</div><div class="line"> COUNT</div><div class="line">-------</div><div class="line">     2</div><div class="line">(1 row)</div></pre></td></tr></table></figure></p>
<h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">TEST=# explain analyze select count(*) from (select  count(*) from tab1 group by col);</div><div class="line">                                                       QUERY PLAN</div><div class="line">------------------------------------------------------------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=3080.65..3080.66 rows=1 width=0) (actual time=173.733..173.733 rows=1 loops=1)</div><div class="line">   -&gt;  HashAggregate  (cost=3080.60..3080.62 rows=2 width=4) (actual time=173.723..173.726 rows=2 loops=1)</div><div class="line">         -&gt;  Seq Scan on TAB1  (cost=0.00..2261.40 rows=163840 width=4) (actual time=0.015..54.264 rows=163840 loops=1)</div><div class="line"> Total runtime: 173.841 ms</div><div class="line">(4 rows)</div><div class="line"></div><div class="line">TEST=# explain analyze  select count(distinct(col)) from tab1 ;</div><div class="line">                                                    QUERY PLAN</div><div class="line">------------------------------------------------------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=2671.00..2671.01 rows=1 width=4) (actual time=189.389..189.389 rows=1 loops=1)</div><div class="line">   -&gt;  Seq Scan on TAB1  (cost=0.00..2261.40 rows=163840 width=4) (actual time=0.021..54.395 rows=163840 loops=1)</div><div class="line"> Total runtime: 189.468 ms</div><div class="line">(3 rows)</div></pre></td></tr></table></figure>
<p>可见第一种方法性能更好，区别主要是第一种方法用的HashAggregate  start time 比较小。但是区别不是很明显。</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[裤子把人搞死？一个库引发的悲剧]]></title>
      <url>http://shenyu.wiki/2017/04/22/%E8%A3%A4%E5%AD%90%E6%8A%8A%E4%BA%BA%E6%90%9E%E6%AD%BB%EF%BC%9F%E4%B8%80%E4%B8%AA%E5%BA%93%E5%BC%95%E5%8F%91%E7%9A%84%E6%82%B2%E5%89%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>穿个裤子，裤子破个洞，人应该没事吧？现实是人有可能挂掉！悲剧正在发生，一些破库经常搞挂服务器。</p>
</blockquote>
<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>服务器coredump，堆栈显示如下：</p>
<p><img src="http://static.zybuluo.com/shenyuflying/kxnvjyy0kkifws502en6rkvu/image_1bea3g6li19431k0dpq61fag16pn1t.png" alt="**x**"><br>数据库宕记前日志显示如下：</p>
<p><img src="http://static.zybuluo.com/shenyuflying/7ut8qfw12wql4rrb5x1hxl54/image_1be7j5vnq1iqh1ub1b0bcqm17oi9.png" alt="image_1be7j5vnq1iqh1ub1b0bcqm17oi9.png-3786.2kB"></p>
<p>通过数据库日志来看，这条语句为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from D5000.OP_ANA_STAT_SAMPLE_MONTH@kdb;</div></pre></td></tr></table></figure></p>
<p>手动执行这条语句，并没有引发coredump。可见并不是一个频繁发生的问题。</p>
<p>堆栈信息可知，当时在执行一条pbe语句，在execute阶段通过dblink获取数据时，由于某种原因失败，在释放内存的时候core在了odbc驱动之中。栈顶函数为free，怀疑是odbc驱动内存释放不当导致。</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="错误行定位"><a href="#错误行定位" class="headerlink" title="错误行定位"></a>错误行定位</h3><p>由于odbc没有显示行号，需要根据反汇编来确定出错行的位置。根据堆栈信息，出错的指令地址位于0x2aba66c31370位置。</p>
<p>该处汇编显示为：</p>
<center> <img src="http://static.zybuluo.com/shenyuflying/0ys6sy1fy85kiq8eofdgpu4m/image_1be76mofi1gucdfu1n8214dl17809.png" alt="image_1be76mofi1gucdfu1n8214dl17809.png-3387.8kB"> </center>

<p>当时的寄存器显示为：</p>
<center> <img src="http://static.zybuluo.com/shenyuflying/gdrztnkejhms20aij08fnaxd/image_1be770h6n1jdqp6u12ja1ltp1cvvm.png" alt="image_1be770h6n1jdqp6u12ja1ltp1cvvm.png-3299.7kB"> </center>

<p>通过反汇编定位到出错行为：511行。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="number">491</span> <span class="keyword">void</span></div><div class="line"><span class="number">492</span> QR_free_memory(QResultClass *self)</div><div class="line"><span class="number">493</span> &#123;</div><div class="line"><span class="number">494</span> ›   <span class="keyword">register</span> <span class="keyword">int</span> lf,</div><div class="line"><span class="number">495</span> ›   ›   ›   ›   row;</div><div class="line"><span class="number">496</span> ›   <span class="keyword">register</span> TupleField *tuple = self-&gt;backend_tuples;</div><div class="line"><span class="number">497</span> ›   SQLLEN› ›   num_backend_rows = self-&gt;num_backend_rows;</div><div class="line"><span class="number">498</span> ›   <span class="keyword">int</span>››   ›   num_fields = self-&gt;num_fields;</div><div class="line"><span class="number">499</span></div><div class="line"><span class="number">500</span> ›   mylog(<span class="string">"QResult: free memory in %x, fcount = %d\n"</span>, self, num_backend_rows);</div><div class="line"><span class="number">501</span> ›   <span class="keyword">if</span> (self-&gt;backend_tuples)</div><div class="line"><span class="number">502</span> ›   &#123;</div><div class="line"><span class="number">503</span> ›   ›   <span class="keyword">for</span> (row = <span class="number">0</span>; row &lt; num_backend_rows; row++)</div><div class="line"><span class="number">504</span> ›   ›   &#123;</div><div class="line"><span class="number">505</span> ›   ›   ›   mylog(<span class="string">"row = %d, num_fields = %d\n"</span>, row, num_fields);</div><div class="line"><span class="number">506</span> ›   ›   ›   <span class="keyword">for</span> (lf = <span class="number">0</span>; lf &lt; num_fields; lf++)</div><div class="line"><span class="number">507</span> ›   ›   ›   &#123;</div><div class="line"><span class="number">508</span> ›   ›   ›   ›   <span class="keyword">if</span> (tuple[lf].value != <span class="literal">NULL</span>)</div><div class="line"><span class="number">509</span> ›   ›   ›   ›   &#123;</div><div class="line"><span class="number">510</span> ›   ›   ›   ›   ›   mylog(<span class="string">"free [lf=%d] %x\n"</span>, lf, tuple[lf].value);</div><div class="line"><span class="number">511</span> ›   ›   ›   ›   ›   <span class="built_in">free</span>(tuple[lf].value);    ---出错行</div><div class="line"><span class="number">512</span> ›   ›   ›   ›   ›   tuple[lf].value = <span class="literal">NULL</span>;</div><div class="line"><span class="number">513</span> ›   ›   ›   ›   &#125;</div><div class="line"><span class="number">514</span> ›   ›   ›   &#125;</div><div class="line"><span class="number">515</span> ›   ›   ›   tuple += num_fields;›   <span class="comment">/* next row */</span></div><div class="line"><span class="number">516</span> ›   ›   &#125;</div><div class="line"><span class="number">517</span></div><div class="line"><span class="number">518</span> ›   ›   <span class="built_in">free</span>(self-&gt;backend_tuples);</div><div class="line"><span class="number">519</span> ›   ›   <span class="comment">//added by YJL 2003-03-18</span></div><div class="line"><span class="number">520</span> ›   ›   self-&gt;backend_tuples=<span class="literal">NULL</span>;</div><div class="line"><span class="number">521</span> ›   ›   self-&gt;count_backend_allocated = <span class="number">0</span>;</div><div class="line"><span class="number">522</span> ›   ›   self-&gt;backend_tuples = <span class="literal">NULL</span>;</div><div class="line"><span class="number">523</span> ›   &#125;</div></pre></td></tr></table></figure></p>
<p>free的地址为：0x286f1。</p>
<p>通过对比堆上地址来看:<br>堆地址范围：  0x2eb465c8<br>指令地址范围：0x5f0e9c 附近</p>
<p>显然free的地址0x286f1为无效地址。</p>
<h3 id="错误行dblink-c-789"><a href="#错误行dblink-c-789" class="headerlink" title="错误行dblink.c:789"></a>错误行dblink.c:789</h3><p>该处能够直接对应到行号，该行附近的代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="number">780</span></div><div class="line"><span class="number">781</span> ›   ›   ›   tuplebuf = palloc(<span class="keyword">sizeof</span>(<span class="keyword">char</span> *) * query-&gt;colcount);</div><div class="line"><span class="number">782</span></div><div class="line"><span class="number">783</span> ›   ›   ›   <span class="keyword">while</span>((rc = SQLFetch(query-&gt;hstmt)) != SQL_NO_DATA)</div><div class="line"><span class="number">784</span> ›   ›   ›   &#123;</div><div class="line"><span class="number">785</span> ›   ›   ›   ›   HeapTuple›  tuple;</div><div class="line"><span class="number">786</span> ›   ›   ›   ›   <span class="keyword">int</span>         offset;</div><div class="line"><span class="number">787</span> ›   ›   ›   ›</div><div class="line"><span class="number">788</span> ›   ›   ›   ›   <span class="keyword">if</span> (rc != SQL_SUCCESS &amp;&amp; rc != SQL_SUCCESS_WITH_INFO)</div><div class="line"><span class="number">789</span> ›   ›   ›   ›   ›   DBLinkReport(query, handle);</div><div class="line"><span class="number">790</span></div><div class="line"><span class="number">791</span> ›   ›   ›   ›   <span class="keyword">for</span>(offset = <span class="number">0</span>; offset &lt; query-&gt;fetchedrows; offset++)</div><div class="line"><span class="number">792</span> ›   ›   ›   ›   &#123;</div><div class="line"><span class="number">793</span> ›   ›   ›   ›   ›   <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt; query-&gt;colcount; i++)</div><div class="line"><span class="number">794</span> ›   ›   ›   ›   ›   &#123;</div></pre></td></tr></table></figure></p>
<p>可见，SQLFetch函数失败，程序调用DBLinkReport报错退出。报错信息通过gdb能够看到如下内容：</p>
<p><img src="http://static.zybuluo.com/shenyuflying/hprhegmbg94f8vat7jggh3jq/image_1bea3hfad80cat3mmr1u0q5ko2a.png" alt="image_1bea3hfad80cat3mmr1u0q5ko2a.png-186.6kB"></p>
<p>报的错误为：<code>Error Fetching next group</code></p>
<p>根据报错信息，对应到odbc代码中898行位置：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">in function</div><div class="line">   <span class="number">886</span> ›   ›   ›   <span class="built_in">sprintf</span>(fetch, <span class="string">"fetch %d in %s"</span>, fetch_size, self-&gt;cursor);</div><div class="line">   <span class="number">887</span></div><div class="line">   <span class="number">888</span> ›   ›   ›   mylog(<span class="string">"next_tuple: sending actual fetch (%d) query '%s'\n"</span>, fetch_size, fetch);</div><div class="line">   <span class="number">889</span></div><div class="line">   <span class="number">890</span> ›   ›   ›   <span class="comment">/* don't read ahead for the next tuple (self) ! */</span></div><div class="line">   <span class="number">891</span> ›   ›   ›   qi.row_size = self-&gt;cache_size;</div><div class="line">   <span class="number">892</span> ›   ›   ›   qi.result_in = self;</div><div class="line">   <span class="number">893</span> ›   ›   ›   qi.cursor = <span class="literal">NULL</span>;</div><div class="line">   <span class="number">894</span> ›   ›   ›   res = DBC_send_query(self-&gt;conn, fetch, &amp;qi, CLEAR_RESULT_ON_ABORT);</div><div class="line">   <span class="number">895</span> ›   ›   ›   <span class="keyword">if</span> (res == <span class="literal">NULL</span>)</div><div class="line">   <span class="number">896</span> ›   ›   ›   &#123;</div><div class="line">   <span class="number">897</span> ›   ›   ›   ›   self-&gt;status = KBRES_FATAL_ERROR;</div><div class="line">   <span class="number">898</span> ›   ›   ›   ›   QR_set_message(self, <span class="string">"Error fetching next group."</span>, <span class="number">1</span>);</div><div class="line">   <span class="number">899</span> ›   ›   ›   ›   <span class="keyword">return</span> FALSE;</div><div class="line">   <span class="number">900</span> ›   ›   ›   &#125;</div><div class="line">   <span class="number">901</span> ›   ›   ›   self-&gt;inTuples = TRUE;</div></pre></td></tr></table></figure></p>
<p>根据代码，可以看到当时<code>DBC_send_query</code>在执行<code>fetch %d in %s</code>的时候失败。</p>
<h3 id="宕机前调用堆栈"><a href="#宕机前调用堆栈" class="headerlink" title="宕机前调用堆栈"></a>宕机前调用堆栈</h3><p>目前看到的是宕记时候的堆栈，现在根据已知信息还原coredump前调用的堆栈：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DBC_send_query   --失败返回NULL--&gt;                                QR_next_tuple</div><div class="line">QR_next_tuple    --报错信息Error fetching_next group 返回FALSE--&gt; STMT_Fetch</div><div class="line">STMT_Fetch       --SQLSTATE设为HY000返回SQLERROR--&gt;               MY_ExtendedFetch</div><div class="line">MY_ExtendedFetch --返回SQLERROR--&gt;                                SQLFetch</div><div class="line">SQLFetch         --返回SQLERROR--&gt;                                dblink_record</div><div class="line">dblink_record    --调用--&gt;                                        DBLinkReport</div><div class="line">DBLinkReport     --调用--&gt;                                        SQLFreeHandle</div><div class="line">SQLFreeHandle    --经过若干调用--&gt;                                QR_free_memory</div></pre></td></tr></table></figure>
<h2 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h2><p>仿照上一节的推理，如果DBC_send_query失败，问题会不会重现？<br>那么在DBC_send_query处打断点，接下来c，直到有fetch 1024的时候，强制DBC_send_query返回0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">(gdb) b DBC_send_query</div><div class="line">Function &quot;DBC_send_query&quot; not defined.</div><div class="line">Make breakpoint pending on future shared library load? (y or [n]) y</div><div class="line">Breakpoint 1 (DBC_send_query) pending.</div><div class="line">(gdb) c</div><div class="line">Continuing.</div><div class="line">[New Thread 0x40a74940 (LWP 15989)]</div><div class="line">[Switching to Thread 0x42332940 (LWP 15981)]</div><div class="line"></div><div class="line">Breakpoint 1, DBC_send_query (self=0x9cf5e40, query=0x2aaade6554d9 &quot; &quot;, qi=0x0, flag=1) at connection.c:3820</div><div class="line">3820		QResultClass *cmdres = NULL,</div><div class="line">(gdb) c</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 1, DBC_send_query (self=0x9cf5e40, query=0x9ebed80 &quot;set DateStyle to &apos;ISO&apos;&quot;, qi=0x0, flag=0) at connection.c:3820</div><div class="line">3820		QResultClass *cmdres = NULL,</div><div class="line">(gdb)</div><div class="line">Continuing.</div><div class="line"></div><div class="line"></div><div class="line">Breakpoint 1, DBC_send_query (self=0x9cf5e40, query=0x9ee1240 &quot;declare SQL_CUR0x9ec1c20 scroll cursor for SELECT * FROM \&quot;TB1\&quot; WHERE 1 = 0&quot;, qi=0x0, flag=4) at connection.c:3820</div><div class="line">3820		QResultClass *cmdres = NULL,</div><div class="line">(gdb)</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 1, DBC_send_query (self=0x9cf5e40, query=0x2aaade6548e5 &quot;BEGIN&quot;, qi=0x0, flag=1) at connection.c:3820</div><div class="line">3820		QResultClass *cmdres = NULL,</div><div class="line">(gdb)</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 1, DBC_send_query (self=0x9cf5e40, query=0x4229ee50 &quot;fetch 0 in SQL_CUR0x9ec1c20&quot;, qi=0x4229eee0, flag=0) at connection.c:3820</div><div class="line">3820		QResultClass *cmdres = NULL,</div><div class="line">(gdb)</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 1, DBC_send_query (self=0x9cf5e40, query=0x4229f160 &quot;close SQL_CUR0x9ec1c20&quot;, qi=0x0, flag=1) at connection.c:3820</div><div class="line">3820		QResultClass *cmdres = NULL,</div><div class="line">(gdb)</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 1, DBC_send_query (self=0x9cf5e40, query=0x9ec1ba0 &quot;declare SQL_CUR0x9ee1240 scroll cursor for SELECT * FROM \&quot;TB1\&quot;&quot;, qi=0x0, flag=0) at connection.c:3820</div><div class="line">3820		QResultClass *cmdres = NULL,</div><div class="line">(gdb)</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 1, DBC_send_query (self=0x9cf5e40, query=0x4229ebc0 &quot;fetch 0 in SQL_CUR0x9ee1240&quot;, qi=0x4229ec50, flag=0) at connection.c:3820</div><div class="line">3820		QResultClass *cmdres = NULL,</div><div class="line">(gdb)</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 1, DBC_send_query (self=0x9cf5e40, query=0x4229cad0 &quot;fetch 1024 in SQL_CUR0x9ee1240&quot;, qi=0x4229cab0, flag=1) at connection.c:3820</div><div class="line">3820		QResultClass *cmdres = NULL,</div><div class="line">(gdb) return 0</div></pre></td></tr></table></figure></p>
<p>接下来就会core掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#0  0x0000003a93e7273e in free () from /lib64/libc.so.6</div><div class="line">#1  0x00002aaade575312 in QR_free_memory (self=0x1b7a17a0) at qresult.c:511</div><div class="line">#2  0x00002aaade574c04 in QR_Destructor (self=0x1b7a17a0, closeCursor=1) at qresult.c:296</div><div class="line">#3  0x00002aaade58d5f2 in STMT_Destructor (self=0x1b7bfe30) at statement.c:507</div><div class="line">#4  0x00002aaade58cec4 in MY_FreeStmt (hstmt=0x1b7bfe30, fOption=1) at statement.c:313</div><div class="line">#5  0x00002aaade59a1ad in SQLFreeHandle (HandleType=3, Handle=0x1b7bfe30) at odbcapi30.c:252</div><div class="line">#6  0x0000003a94e170ed in __SQLFreeHandle (handle_type=&lt;value optimized out&gt;, handle=0x1b7c1650) at SQLFreeHandle.c:435</div><div class="line">#7  0x0000003a94e1768c in SQLFreeHandle (handle_type=17, handle=0x0) at SQLFreeHandle.c:598</div><div class="line">#8  0x0000000000b3591b in FreeQueryHandle (conn=0x1b4117a8) at dblinkutl.c:161</div><div class="line">#9  0x0000000000b36c1c in DBLinkReport (query=0x1b79e8c0, cell=0x1b412348) at dblinkerr.c:68</div><div class="line">#10 0x0000000000b34f5a in dblink_record (fcinfo=0x417853c0) at dblink.c:789</div><div class="line">#11 0x00000000006b3b44 in ExecMakeTableFunctionResult (funcexpr=0x1b79e240, econtext=0x1b79de10, expectedDesc=0x1b79e0d0, returnDesc=0x41785820) at execQual.c:1431</div><div class="line">#12 0x00000000006d055f in FunctionNext (node=0x1b79dcf0) at nodeFunctionscan.c:68</div><div class="line">#13 0x00000000006bd964 in ExecScan (node=0x1b79dcf0, accessMtd=0x6d04f8 &lt;FunctionNext&gt;) at execScan.c:70</div></pre></td></tr></table></figure></p>
<p>那么可以说明我们目前的判断基本正确。出现故障的原因更加清晰了：当时在执行一条pbe语句，在execute阶段通过dblink获取数据时，由于DBC_send_query失败，释放内存不当导致。接下来我们需要找到那块不当释放的内存。</p>
<h2 id="问题根因"><a href="#问题根因" class="headerlink" title="问题根因"></a>问题根因</h2><p>我们找到backend_tuples分配内存的地方：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self-&gt;backend_tuples = (TupleField *) malloc(self-&gt;num_fields * sizeof(TupleField) * row);</div></pre></td></tr></table></figure></p>
<p>TupleField定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/*› Used by backend data AND manual result sets */</div><div class="line">struct TupleField_</div><div class="line">&#123;</div><div class="line">›   Int4›   ›   len;›   ›   ›   /* length of the current Tuple */</div><div class="line">›   void›      *value;› ›   ›   /* an array representing the value */</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>可见是分配了列数×行数这么大小的空间，可以看作一个表格：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">backend_tuples</div><div class="line">|---------------|---------------|---------------|---------------|</div><div class="line">|tuple[0].len   |tuple[1].len   |tuple[2].len   |tuple[3].len   |</div><div class="line">|tuple[0].value |tuple[1].value |tuple[2].value |tuple[3].value | row1</div><div class="line">|---------------|---------------|---------------|---------------|</div><div class="line">|tuple[0].len   |tuple[1].len   |tuple[2].len   |tuple[3].len   |</div><div class="line">|tuple[0].value |tuple[1].value |tuple[2].value |tuple[3].value | row2</div><div class="line">|---------------|---------------|---------------|---------------|</div><div class="line">.</div><div class="line">.</div><div class="line">.</div></pre></td></tr></table></figure></p>
<p>每个格子都是一个TupleField<br>结合<code>QR_free_memory</code>这个函数来看<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="number">491</span> <span class="keyword">void</span></div><div class="line"><span class="number">492</span> QR_free_memory(QResultClass *self)</div><div class="line"><span class="number">493</span> &#123;</div><div class="line"><span class="number">494</span> ›   <span class="keyword">register</span> <span class="keyword">int</span> lf,</div><div class="line"><span class="number">495</span> ›   ›   ›   ›   row;</div><div class="line"><span class="number">496</span> ›   <span class="keyword">register</span> TupleField *tuple = self-&gt;backend_tuples;</div><div class="line"><span class="number">497</span> ›   SQLLEN› ›   num_backend_rows = self-&gt;num_backend_rows;</div><div class="line"><span class="number">498</span> ›   <span class="keyword">int</span>››   ›   num_fields = self-&gt;num_fields;</div><div class="line"><span class="number">499</span></div><div class="line"><span class="number">500</span> ›   mylog(<span class="string">"QResult: free memory in %x, fcount = %d\n"</span>, self, num_backend_rows);</div><div class="line"><span class="number">501</span> ›   <span class="keyword">if</span> (self-&gt;backend_tuples)</div><div class="line"><span class="number">502</span> ›   &#123;</div><div class="line"><span class="number">503</span> ›   ›   <span class="keyword">for</span> (row = <span class="number">0</span>; row &lt; num_backend_rows; row++)</div><div class="line"><span class="number">504</span> ›   ›   &#123;</div><div class="line"><span class="number">505</span> ›   ›   ›   mylog(<span class="string">"row = %d, num_fields = %d\n"</span>, row, num_fields);</div><div class="line"><span class="number">506</span> ›   ›   ›   <span class="keyword">for</span> (lf = <span class="number">0</span>; lf &lt; num_fields; lf++)</div><div class="line"><span class="number">507</span> ›   ›   ›   &#123;</div><div class="line"><span class="number">508</span> ›   ›   ›   ›   <span class="keyword">if</span> (tuple[lf].value != <span class="literal">NULL</span>)</div><div class="line"><span class="number">509</span> ›   ›   ›   ›   &#123;</div><div class="line"><span class="number">510</span> ›   ›   ›   ›   ›   mylog(<span class="string">"free [lf=%d] %x\n"</span>, lf, tuple[lf].value);</div><div class="line"><span class="number">511</span> ›   ›   ›   ›   ›   <span class="built_in">free</span>(tuple[lf].value);    ---出错行</div><div class="line"><span class="number">512</span> ›   ›   ›   ›   ›   tuple[lf].value = <span class="literal">NULL</span>;</div><div class="line"><span class="number">513</span> ›   ›   ›   ›   &#125;</div><div class="line"><span class="number">514</span> ›   ›   ›   &#125;</div><div class="line"><span class="number">515</span> ›   ›   ›   tuple += num_fields;›   <span class="comment">/* next row */</span></div></pre></td></tr></table></figure></p>
<p>是需要挨个释放 tuple-&gt;value这个指针指向的地址。释放多少个tuple呢？是根据num_backend_rows来判断的。<br>那么就存在如下2个问题：</p>
<ol>
<li>malloc分配的空间，必须置空0，否则tuple.value是一个垃圾值。</li>
<li>num_backend_rows 是否准确？过小则造成内存泄漏，过大则会引起tuple.value指向未知内存。</li>
<li>tuple-&gt;value是否指向有效地址？比如指向已经释放过的地址（释放了必须置NULL），或者无效地址（比如栈空间）。</li>
</ol>
<p>通过看代码，确实存在问题，比如realloc了内存忘记清空，num_backend_rows在读取成功之前就存在递增的情况，如果DBC_send_query失败那么就会有上面第二个问题出现。<br>另外，tuple-&gt;value确实存在指向栈上空间的情况。</p>
<p>查找value指针指向的内存：</p>
<p>1、绝大部分地方value在free之后都置NULL了，但是在TL_Destructor以及STMT_pos_reload_needed函数中，value释放过后没置NULL，可能引起多次释放的问题。</p>
<p>2、在QR_read_tuple函数中，buffer指向的位置是由如下逻辑确定的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">char</span>    tidoidbuf[<span class="number">32</span>];</div><div class="line"><span class="keyword">if</span> (field_lf &gt;= effective_cols)</div><div class="line">      buffer = tidoidbuf;   --buffer指向<span class="built_in">stack</span>位置</div><div class="line"><span class="keyword">else</span></div><div class="line"> &#123;</div><div class="line">    buffer = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(len + <span class="number">1</span>); --buffer指向heap位置</div><div class="line">    <span class="keyword">if</span>(buffer == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果满足field_lf &gt;= effective_cols那么是指向stack上的内存，否则是指向heap上的内存。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (field_lf &gt;= effective_cols &amp;&amp; self-&gt;haskeyset)</div><div class="line">&#123;</div><div class="line">           &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    this_tuplefield[field_lf].len = len;</div><div class="line">    this_tuplefield[field_lf].value = buffer;   --buffer有可能指向<span class="built_in">stack</span></div><div class="line">          &#125;</div></pre></td></tr></table></figure>
<p>但是如上代码在实际使用过程中，当<code>self-&gt;haskeyset = false</code>的时候，就会返回stack上的内存。</p>
<h2 id="问题修复"><a href="#问题修复" class="headerlink" title="问题修复"></a>问题修复</h2><p>主要是对上面提出的3个问题进行修复：</p>
<ol>
<li>记录malloc,realloc分配内存的范围，检查tuple是否在这个范围之中。</li>
<li>malloc,realloc之后，用memset置空内存，防止垃圾值影响tuple.value。</li>
<li>确保tuple.value不会指向栈上的内存。</li>
</ol>
<p>修复过后，在DBC_send_query失败之后就不会core了，错误正常返回给客户端。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">TEST=# SELECT count(*) from tb1@kdb;</div><div class="line">ERROR:  error in database link &quot;KDB&quot;, SQLSTATE=[HY000] Error fetching next group.</div><div class="line">STATEMENT:  SELECT count(*) from tb1@kdb;</div><div class="line">LOG:  statement: ROLLBACK</div><div class="line">ERROR:  error in database link &quot;KDB&quot;, SQLSTATE=[HY000] Error fetching next group.</div><div class="line">TEST=#</div></pre></td></tr></table></figure></p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[a nice progressbar with time estimation]]></title>
      <url>http://shenyu.wiki/2017/04/12/a-nice-progressbar-with-time-estimation/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Recently I’ve been making a progressbar for database server. I took a full day’s time to carefully implement a linux shell based progressbar which not only can print progress on the terminal but also can estimate the remaining time. </p>
</blockquote>
<p>a screen shot of the progressbar.</p>
<center> <img src="http://static.zybuluo.com/shenyuflying/50vqgj0i2dr4anyg5sdndqx2/main.gif" alt="main.gif-47kB"> </center>

<p>It is implement by C programming language. The source code is below:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * print a progress bar like this</div><div class="line"> *</div><div class="line"> * LOG:  [========&gt;                    ] 20%  (1h 30m 5s remaining)</div><div class="line"> *</div><div class="line"> * Argument:</div><div class="line"> *      precentage range [0,100]</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">elog_progress</span><span class="params">(<span class="keyword">int</span> precentage)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span>          str[<span class="number">1024</span>]           = &#123;<span class="number">0</span>&#125;; <span class="comment">/* the progress str to print, should be enough */</span></div><div class="line">	<span class="keyword">char</span>         *fmt                 = <span class="string">"LOG:  [%-100s] %3d%%  %s\r"</span>;</div><div class="line">	<span class="keyword">char</span>          bars[<span class="number">100</span>+<span class="number">1</span>]         = &#123;<span class="number">0</span>&#125;;</div><div class="line">	<span class="keyword">int</span>           i;</div><div class="line">	<span class="comment">/* start time will be used the next call, make it static */</span></div><div class="line">	<span class="keyword">static</span> <span class="keyword">time_t</span> start_time          = <span class="number">0</span>;</div><div class="line">	<span class="comment">/* we start estimate after 5 seconds */</span></div><div class="line">	<span class="keyword">const</span>  <span class="keyword">int</span>    estimate_start_time = <span class="number">5</span>;</div><div class="line">	<span class="keyword">char</span>          time_str[<span class="number">1024</span>]      = &#123;<span class="number">0</span>&#125;;</div><div class="line">	<span class="keyword">char</span>         *time_fmt            = <span class="string">"( %dh %2dm %2ds remaining )      "</span>;</div><div class="line">	<span class="keyword">int</span>                             h = <span class="number">0</span>,</div><div class="line">	                                m = <span class="number">0</span>,</div><div class="line">	                                s = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="comment">/* if not within [0,100], return now */</span></div><div class="line">	<span class="keyword">if</span> (precentage &lt; <span class="number">0</span> || precentage &gt; <span class="number">100</span>)</div><div class="line">		<span class="keyword">return</span>;</div><div class="line"></div><div class="line">	<span class="comment">/* fillin the progress bar */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; precentage; i++)</div><div class="line">	&#123;</div><div class="line">		bars[i] = <span class="string">'='</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* fill the head of the progress bar */</span></div><div class="line">	<span class="keyword">if</span> (precentage &gt; <span class="number">0</span> &amp;&amp; precentage &lt; <span class="number">100</span>)</div><div class="line">		bars[precentage] = <span class="string">'&gt;'</span>;</div><div class="line"></div><div class="line">	<span class="comment">/* estimate time */</span></div><div class="line">	<span class="keyword">if</span> (start_time != <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">time_t</span> time_remaining = <span class="number">0</span>;</div><div class="line">		<span class="keyword">time_t</span> time_cost = <span class="number">0</span>;</div><div class="line">		<span class="comment">/* time cost since start */</span></div><div class="line">		time_cost = time(<span class="literal">NULL</span>) - start_time;</div><div class="line"></div><div class="line">		<span class="comment">/* estimate time remaining */</span></div><div class="line">		<span class="keyword">if</span>(precentage &gt; <span class="number">0</span> &amp;&amp; time_cost &gt;= estimate_start_time)</div><div class="line">		&#123;</div><div class="line">			time_remaining  = time_cost * (<span class="number">100</span> - precentage) / precentage;</div><div class="line">			h = time_remaining/<span class="number">3600</span>;</div><div class="line">			m = time_remaining/<span class="number">60</span>%<span class="number">60</span>;</div><div class="line">			s = time_remaining%<span class="number">60</span>;</div><div class="line">			<span class="built_in">sprintf</span>(time_str, time_fmt, h, m, s);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* init start time on first run */</span></div><div class="line">	<span class="keyword">if</span> (start_time == <span class="number">0</span>)</div><div class="line">		start_time = time(<span class="literal">NULL</span>);</div><div class="line"></div><div class="line">	<span class="comment">/* ok, we have everything we need , ready to output*/</span></div><div class="line">	<span class="built_in">sprintf</span>(str, fmt, bars, precentage, time_str);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s"</span>,str);</div><div class="line">	fflush(<span class="built_in">stdout</span>);</div><div class="line"></div><div class="line">	<span class="comment">/* start a new line when 100% */</span></div><div class="line">	<span class="keyword">if</span> (precentage == <span class="number">100</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">		fflush(<span class="built_in">stdout</span>);</div><div class="line">		<span class="comment">/* reset time estimate */</span></div><div class="line">		start_time = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> precentage = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(precentage&lt;=<span class="number">100</span>)</div><div class="line">	&#123;</div><div class="line">		elog_progress(precentage);</div><div class="line">		precentage++;</div><div class="line">		usleep(<span class="number">100000</span>);<span class="comment">/* sleep for 10sec */</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim build from source]]></title>
      <url>http://shenyu.wiki/2017/04/09/vim-build-from-source/</url>
      <content type="html"><![CDATA[<blockquote>
<p>the default vim shipped with your system might not have some important features required for some plugins. so you have to build vim from source. here is the steps i took to build vim on my ubuntu based linux plantform.</p>
</blockquote>
<h2 id="prerequisite"><a href="#prerequisite" class="headerlink" title="prerequisite"></a>prerequisite</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev \</div><div class="line">    libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \</div><div class="line">    libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev \</div><div class="line">    python3-dev ruby-dev lua5.1 liblua5.1-dev libperl-dev git</div></pre></td></tr></table></figure>
<h2 id="remove-vim-if-you-have-it-already"><a href="#remove-vim-if-you-have-it-already" class="headerlink" title="remove vim if you have it already"></a>remove vim if you have it already</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get remove vim vim-runtime gvim</div></pre></td></tr></table></figure>
<h2 id="configure-amp-amp-make-amp-amp-make-amp-amp-install"><a href="#configure-amp-amp-make-amp-amp-make-amp-amp-install" class="headerlink" title="configure &amp;&amp; make &amp;&amp; make &amp;&amp; install"></a>configure &amp;&amp; make &amp;&amp; make &amp;&amp; install</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">./configure --with-features=huge \</div><div class="line">            --enable-multibyte \</div><div class="line">            --enable-rubyinterp=yes \</div><div class="line">            --enable-pythoninterp=yes \</div><div class="line">            --with-python-config-dir=/usr/lib/python2.7/config \</div><div class="line">            --enable-python3interp=yes \</div><div class="line">            --with-python3-config-dir=/usr/lib/python3.5/config \</div><div class="line">            --enable-perlinterp=yes \</div><div class="line">            --enable-luainterp=yes \</div><div class="line">            --enable-gui=gtk2 --enable-cscope --prefix=/usr</div><div class="line"></div><div class="line">make VIMRUNTIMEDIR=/usr/share/vim/vim80</div><div class="line"></div><div class="line">sudo make install</div></pre></td></tr></table></figure>
<h2 id="update-alternatives"><a href="#update-alternatives" class="headerlink" title="update-alternatives"></a>update-alternatives</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo update-alternatives --install /usr/bin/editor editor /usr/bin/vim 1</div><div class="line">sudo update-alternatives --set editor /usr/bin/vim</div><div class="line">sudo update-alternatives --install /usr/bin/vi vi /usr/bin/vim 1</div><div class="line">sudo update-alternatives --set vi /usr/bin/vim</div></pre></td></tr></table></figure>
<h2 id="done"><a href="#done" class="headerlink" title="done"></a>done</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~/coding/vim $ vim --version</div><div class="line">VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Apr  8 2017 20:02:05)</div><div class="line">Included patches: 1-550</div><div class="line">Compiled by pi@raspberrypi</div><div class="line">Huge version with GTK2 GUI.  Features included (+) or not (-):</div><div class="line">+acl             +file_in_path    +mouse_sgr       +tag_old_static</div><div class="line">+arabic          +find_in_path    -mouse_sysmouse  -tag_any_white</div><div class="line">+autocmd         +float           +mouse_urxvt     -tcl</div><div class="line">+balloon_eval    +folding         +mouse_xterm     +termguicolors</div><div class="line">+browse          -footer          +multi_byte      +terminfo</div><div class="line">++builtin_terms  +fork()          +multi_lang      +termresponse</div><div class="line">+byte_offset     +gettext         -mzscheme        +textobjects</div><div class="line">+channel         -hangul_input    +netbeans_intg   +timers</div><div class="line">+cindent         +iconv           +num64           +title</div><div class="line">+clientserver    +insert_expand   +packages        +toolbar</div><div class="line">+clipboard       +job             +path_extra      +user_commands</div><div class="line">+cmdline_compl   +jumplist        +perl            +vertsplit</div><div class="line">+cmdline_hist    +keymap          +persistent_undo +virtualedit</div><div class="line">+cmdline_info    +lambda          +postscript      +visual</div><div class="line">+comments        +langmap         +printer         +visualextra</div><div class="line">+conceal         +libcall         +profile         +viminfo</div><div class="line">+cryptv          +linebreak       +python/dyn      +vreplace</div><div class="line">+cscope          +lispindent      +python3/dyn     +wildignore</div><div class="line">+cursorbind      +listcmds        +quickfix        +wildmenu</div><div class="line">+cursorshape     +localmap        +reltime         +windows</div><div class="line">+dialog_con_gui  +lua             +rightleft       +writebackup</div><div class="line">+diff            +menu            +ruby            +X11</div><div class="line">+digraphs        +mksession       +scrollbind      -xfontset</div><div class="line">+dnd             +modify_fname    +signs           +xim</div><div class="line">-ebcdic          +mouse           +smartindent     +xpm</div><div class="line">+emacs_tags      +mouseshape      +startuptime     +xsmp_interact</div><div class="line">+eval            +mouse_dec       +statusline      +xterm_clipboard</div><div class="line">+ex_extra        -mouse_gpm       -sun_workshop    -xterm_save</div><div class="line">+extra_search    -mouse_jsbterm   +syntax</div><div class="line">+farsi           +mouse_netterm   +tag_binary</div><div class="line">   system vimrc file: &quot;$VIM/vimrc&quot;</div><div class="line">     user vimrc file: &quot;$HOME/.vimrc&quot;</div><div class="line"> 2nd user vimrc file: &quot;~/.vim/vimrc&quot;</div><div class="line">      user exrc file: &quot;$HOME/.exrc&quot;</div><div class="line">  system gvimrc file: &quot;$VIM/gvimrc&quot;</div><div class="line">    user gvimrc file: &quot;$HOME/.gvimrc&quot;</div><div class="line">2nd user gvimrc file: &quot;~/.vim/gvimrc&quot;</div><div class="line">       defaults file: &quot;$VIMRUNTIME/defaults.vim&quot;</div><div class="line">    system menu file: &quot;$VIMRUNTIME/menu.vim&quot;</div><div class="line">  fall-back for $VIM: &quot;/usr/share/vim&quot;</div><div class="line"> f-b for $VIMRUNTIME: &quot;/usr/share/vim/vim80&quot;</div><div class="line">Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I/usr/include/gtk-2.0 -I/usr/lib/arm-linux-gnueabihf/gtk-2.0/include -I/usr/include/gio-unix-2.0/ -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/libpng12 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/libpng12 -I/usr/include/pango-1.0 -I/usr/include/harfbuzz -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/arm-linux-gnueabihf/glib-2.0/include -I/usr/include/freetype2    -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1  </div><div class="line">Linking: gcc   -L. -Wl,-z,relro -L/build/ruby2.1-Fv_iUe/ruby2.1-2.1.5/debian/lib -fstack-protector -rdynamic -Wl,-export-dynamic -Wl,-E   -L/usr/local/lib -Wl,--as-needed -o vim   -lgtk-x11-2.0 -lgdk-x11-2.0 -lpangocairo-1.0 -latk-1.0 -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lpangoft2-1.0 -lpango-1.0 -lgobject-2.0 -lglib-2.0 -lfontconfig -lfreetype  -lSM -lICE -lXpm -lXt -lX11 -lXdmcp -lSM -lICE  -lm -ltinfo -lnsl  -lselinux   -ldl  -L/usr/lib -llua5.1 -Wl,-E  -fstack-protector -L/usr/local/lib  -L/usr/lib/arm-linux-gnueabihf/perl/5.20/CORE -lperl -ldl -lm -lpthread -lcrypt    -lruby-2.1 -lpthread -lgmp -ldl -lcrypt -lm</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[bitmap sets sorting]]></title>
      <url>http://shenyu.wiki/2017/04/03/bit-map-sets-sorting/</url>
      <content type="html"><![CDATA[<blockquote>
<p>BitMapSet can be a very powerful when used for sorting/finding. Because work can be done in O(N) time for sorting and O(1) for finding. Compared to quick sort algorithm, the data is stored in BitMapSet once the data is read into memory. Compared to hash finding, the data is sorted in BitMapSet. In my test, 1,000,000 numbers can be sorted in less than 0.09s on my respberripi and only occupy 125k of memory.</p>
</blockquote>
<a id="more"></a>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> bool int </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> true !(0) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0 </span></div><div class="line"></div><div class="line"><span class="comment">/* start of BitMapSet implementation */</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> BitMapSet &#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">int</span>   bits;  <span class="comment">/* how many bit are there ? */</span></div><div class="line">    <span class="keyword">void</span>      *data; <span class="comment">/* data repersenting the bit 0 or 1 */</span></div><div class="line">&#125; BitMapSet;</div><div class="line"></div><div class="line"><span class="function">BitMapSet *<span class="title">bitmapset_new</span><span class="params">(<span class="keyword">long</span> <span class="keyword">int</span> max_number)</span></span></div><div class="line">&#123;</div><div class="line">    BitMapSet *res = (BitMapSet *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*res));</div><div class="line">    <span class="keyword">int</span>        bytes; <span class="comment">/* for memalloc  */</span></div><div class="line"></div><div class="line">    bytes = max_number/<span class="number">8</span> + <span class="number">1</span>;</div><div class="line"></div><div class="line">    res-&gt;bits  = max_number;</div><div class="line">    res-&gt;data = (<span class="keyword">void</span> *)<span class="built_in">calloc</span>(bytes, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"mem:%d\n"</span>,bytes);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> </span></div><div class="line"><span class="title">bitmapset_set_or_get</span><span class="params">(BitMapSet *bms, <span class="keyword">long</span> <span class="keyword">int</span> location, <span class="keyword">bool</span> is_set)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *ptr;</div><div class="line">    <span class="keyword">int</span> pos; <span class="comment">/* which char in the bms data ? */</span></div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> value = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> res=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (location &gt;= bms-&gt;bits)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"value %d exceeds the capcity of bitmapset(%d)\n"</span>,location,bms-&gt;bits);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ptr = (<span class="keyword">char</span> *)bms-&gt;data;</div><div class="line">    pos = location/<span class="number">8</span>;</div><div class="line"></div><div class="line">    ptr+=pos;</div><div class="line">    location-=(<span class="number">8</span>*pos);</div><div class="line"></div><div class="line">    value=value&lt;&lt;(location);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(is_set)</div><div class="line">        *ptr = (*ptr)|value;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        res = (*ptr)&amp;value;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">bool</span>)res;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">bitmapset_set</span><span class="params">(BitMapSet *bms, <span class="keyword">long</span> <span class="keyword">int</span> location)</span></div><div class="line">&#123;</div><div class="line">    bitmapset_set_or_get(bms,location,<span class="literal">true</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span></span></div><div class="line"><span class="title">bitmapset_get</span><span class="params">(BitMapSet *bms, <span class="keyword">long</span> <span class="keyword">int</span> location)</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span>  bitmapset_set_or_get(bms,location,<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BitMapSet *<span class="title">bitmapset_add</span><span class="params">(BitMapSet *bms, <span class="keyword">int</span> value)</span></span></div><div class="line">&#123;</div><div class="line">    bitmapset_set(bms, value);</div><div class="line">    <span class="keyword">return</span> bms;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">bitmapset_print</span><span class="params">(BitMapSet *bms)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"cap = %d\n"</span>,bms-&gt;bits);</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i &lt; bms-&gt;bits;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(bitmapset_get(bms,i))</div><div class="line">          <span class="built_in">printf</span>(<span class="string">"%d\t"</span>,i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* end of BitMapSet implementation */</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> max=<span class="number">1000000</span>;</div><div class="line">    BitMapSet *bms = bitmapset_new(max);</div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        bitmapset_add(bms,--max);</div><div class="line">    &#125;<span class="keyword">while</span>(max);</div><div class="line"></div><div class="line">    bitmapset_print(bms);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[awesome awesome lots of good stuff]]></title>
      <url>http://shenyu.wiki/2017/03/26/awesome-awesome-lots-of-good-stuff/</url>
      <content type="html"><![CDATA[<p>Awesome awesome is a collection of community maintained lists on a wide range of topics. From front-end development to hardware, from Pokémon to machine learning. It’s a great way to discover and learn new things! Sure you will find something you like!<br>Click the <a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">link</a> to find out more.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[traversing tree in preorder inorder postorder and level order]]></title>
      <url>http://shenyu.wiki/2017/03/25/traversing-tree-in-preorder-inorder-postorder-and-level-order/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Tree as a very common and useful data structure is worth extensive study. Years after I took the Data-structure lesson when I was in school, for the last few days, I regrab the knowledge of how to implement and tranversing a binary tree in servral ways. Besides of the old ways such as preorder/indorder/postorder to traversing a tree, I learnt new knowledge of ways to traversing a tree: level order traversing. Further more, I knew how to print the graph of the tree using graphviz.</p>
</blockquote>
<center><img src="http://static.zybuluo.com/shenyuflying/d5btsnjedki9jmw8klc8p6it/image_1bc2d7db4nop98t1ukvunk61p9.png" alt="image_1bc2d7db4nop98t1ukvunk61p9.png-29.5kB"> </center><br><center>Fig.1 a binary tree</center>

<p>The graph above is drawn by <code>graphviz</code> using the output data by our traverse program list below. You can easily figure out the several ways of how to traverse such a binary tree:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root first:	5	3	2	1	4	6	7	8	</div><div class="line">root secnd:	1	2	3	4	5	6	7	8	</div><div class="line">root last:	1	2	4	3	8	7	6	5	</div><div class="line">level out:	5	3	6	2	4	7	1	8</div></pre></td></tr></table></figure>
<p>As you might have seen, the root-second  or the inorder traverse way of such a binary search tree is ordered. In the following section, I will try to (1) constructing a binary tree using basic C structs and pointers. (2) implement different ways of how to traversing a tree.</p>
<h2 id="Constructing-a-binary-tree"><a href="#Constructing-a-binary-tree" class="headerlink" title="Constructing a binary tree"></a>Constructing a binary tree</h2><p>In many books, the <code>Tree</code> and  <code>Node</code> structure often share the same defination. However, it is much more clear if you store them seperatly in two different struct. Therefore, you can store additional info in <code>Tree</code> structure inaddtion to <code>Node</code> structure. Currently, the <code>Tree</code> structure only has a member <code>struct _node *</code> which point to the root of the tree. So, I decided to use the following basic data-structure as the fondation brick of my implementation.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>node&#123;</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line">    <span class="keyword">struct</span> <span class="number">_</span>node  * left;</div><div class="line">    <span class="keyword">struct</span> <span class="number">_</span>node  * right;</div><div class="line">&#125; Node;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>tree&#123;</div><div class="line">    <span class="keyword">struct</span> <span class="number">_</span>node  *root;</div><div class="line">&#125; Tree;</div><div class="line"></div><div class="line"><span class="function">Tree * <span class="title">new_tree</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    Tree *tree;</div><div class="line"></div><div class="line">    tree = (Tree *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*tree));</div><div class="line">    tree-&gt;root = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> tree;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Function <code>Tree * new_tree()</code> return an empty tree whose root point to <code>NULL</code>.</p>
<h2 id="Inserting-in-to-a-binary-tree"><a href="#Inserting-in-to-a-binary-tree" class="headerlink" title="Inserting in to a binary tree"></a>Inserting in to a binary tree</h2><p>Here we’ll insert values in order so we have a binary search tree. In binary search, lookup and other operations can use the principle of binary search. They allow fast lookup, addition and removal of items, and can be used to implement either dynamic sets of items, or lookup tables that allow finding an item by its key.<br>The insert interface is defined as <code>void insert(Tree *tree, int value)</code>, which we insert an int value into the tree. However, a more portable interface is <code>void insert(Tree *tree, void *ptr)</code> which allowing to store a pointer value in the tree. The pointer can point to any other value/struct.<br>In order to call the insert function recursivily we have a workhorse function <code>insert_internal</code> to do most of the inserting job. Since we have to alter the <code>tree-&gt;root</code> pointer when new node is added into the tree, the working horse function’s defination is <code>static void insert_internal(Node **node, int value)</code> in which the address of <code>tree-&gt;root</code> is passed as the first argument.<br>This part of code is below. When inserting a value, if the current position is pointing to NULL we have to allcate a Node structure and store value in it. Else we compare the value against the current node and insert the smaller value into the left part of the tree and the bigger value into the right part of the tree.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Tree *tree, <span class="keyword">int</span> value)</span></span></div><div class="line">&#123;</div><div class="line">  insert_internal(&amp;(tree-&gt;root),value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert_internal</span><span class="params">(Node **node, <span class="keyword">int</span> value)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(*node == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        Node * new_node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*node));</div><div class="line">        new_node-&gt;left = <span class="literal">NULL</span>;</div><div class="line">        new_node-&gt;right = <span class="literal">NULL</span>;</div><div class="line">        new_node-&gt;value = value;</div><div class="line">        *node = new_node;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; (*node)-&gt;value)</div><div class="line">      insert_internal(&amp;((*node)-&gt;right), value);</div><div class="line">    <span class="keyword">else</span></div><div class="line">      insert_internal(&amp;((*node)-&gt;left), value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Preorder-traversing"><a href="#Preorder-traversing" class="headerlink" title="Preorder traversing"></a>Preorder traversing</h2><p>Pre-order traversing, also known as root-first traversing(which is more clear), is done by visiting the root first, then the left child, the the right child.</p>
<h3 id="by-using-recursive"><a href="#by-using-recursive" class="headerlink" title="by using recursive"></a>by using recursive</h3><p>Recursive make the preorder traversing much simpler and more clear to implement. Much the same as inserting we have two separte functions to do the job. The latter one <code>print_internal</code> is mainly used for recurse purposes.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>   <span class="title">print</span><span class="params">(Tree *tree)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(tree-&gt;root == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(null)"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"root first:\t"</span>);</div><div class="line">    print_internal(tree-&gt;root);</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_internal</span><span class="params">(Node *node)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(node!=<span class="literal">NULL</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, node-&gt;value);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(node-&gt;left!=<span class="literal">NULL</span>)</div><div class="line">        print_internal(node-&gt;left);</div><div class="line">    <span class="keyword">if</span>(node-&gt;right!=<span class="literal">NULL</span>)</div><div class="line">        print_internal(node-&gt;right);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="by-using-stack"><a href="#by-using-stack" class="headerlink" title="by using stack"></a>by using stack</h3><p>If we are not using recursive ways, we can also use stack to do the same. This saves lots of function calls which is likely to be much more faster.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>   <span class="title">print5</span><span class="params">(Tree *tree)</span></span></div><div class="line">&#123;</div><div class="line">    Stack *<span class="built_in">stack</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(tree-&gt;root == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(null)"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">stack</span> = new_stack();</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"root first:\t"</span>);</div><div class="line">    print_internal5(<span class="built_in">stack</span>,tree-&gt;root);</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_internal5</span><span class="params">(Stack *<span class="built_in">stack</span>, Node *node)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(node!=<span class="literal">NULL</span>)</div><div class="line">        push(<span class="built_in">stack</span>,(<span class="keyword">void</span> *)node);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(!is_stack_empty(<span class="built_in">stack</span>))</div><div class="line">    &#123;</div><div class="line">        Node *top;</div><div class="line"></div><div class="line">        top = (Node *)pop(<span class="built_in">stack</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>,top-&gt;value);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(top-&gt;right!=<span class="literal">NULL</span>)</div><div class="line">          push(<span class="built_in">stack</span>,(<span class="keyword">void</span> *)top-&gt;right);</div><div class="line">        <span class="keyword">if</span>(top-&gt;left!=<span class="literal">NULL</span>)</div><div class="line">          push(<span class="built_in">stack</span>,(<span class="keyword">void</span> *)top-&gt;left);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>It is worth noticing, we have to push right part of the tree first and left part of the tree last, since the stack is LIFO data structure. So the left part is poped out first in the next loop. When the left part is poped out, its value is printed and the right/left part is pushed on the top of the stack. So, always the root first then the left part then the right part.</p>
<h2 id="inorder-traversing"><a href="#inorder-traversing" class="headerlink" title="inorder traversing"></a>inorder traversing</h2><p>The inorder traversing is done by visiting the left child first, then the root, then the right child last.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>   <span class="title">print2</span><span class="params">(Tree *tree)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(tree-&gt;root == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(null)"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"root second:\t"</span>);</div><div class="line">    print_internal2(tree-&gt;root);</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_internal2</span><span class="params">(Node *node)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(node-&gt;left!=<span class="literal">NULL</span>)</div><div class="line">        print_internal2(node-&gt;left);</div><div class="line">    <span class="keyword">if</span>(node!=<span class="literal">NULL</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, node-&gt;value);</div><div class="line">    <span class="keyword">if</span>(node-&gt;right!=<span class="literal">NULL</span>)</div><div class="line">        print_internal2(node-&gt;right);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="postorder-traversing"><a href="#postorder-traversing" class="headerlink" title="postorder traversing"></a>postorder traversing</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>   <span class="title">print3</span><span class="params">(Tree *tree)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(tree-&gt;root == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(null)"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"root last:\t"</span>);</div><div class="line">    print_internal3(tree-&gt;root);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_internal3</span><span class="params">(Node *node)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(node-&gt;left!=<span class="literal">NULL</span>)</div><div class="line">        print_internal3(node-&gt;left);</div><div class="line">    <span class="keyword">if</span>(node-&gt;right!=<span class="literal">NULL</span>)</div><div class="line">        print_internal3(node-&gt;right);</div><div class="line">    <span class="keyword">if</span>(node!=<span class="literal">NULL</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, node-&gt;value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="level-order-traversing"><a href="#level-order-traversing" class="headerlink" title="level order traversing"></a>level order traversing</h2><p>A queue(FIFO) can be used to do the level traversing of a tree. By put the root in queue, then the left child of the root in queue, then the right child of the tree in queue.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>   <span class="title">print4</span><span class="params">(Tree *tree)</span></span></div><div class="line">&#123;</div><div class="line">    Queue *<span class="built_in">queue</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(tree-&gt;root == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(null)"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">queue</span> = new_queue();</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"level out:\t"</span>);</div><div class="line">    print_internal4(<span class="built_in">queue</span>,tree-&gt;root);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_internal4</span><span class="params">(Queue * <span class="built_in">queue</span>,Node *node)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(node!=<span class="literal">NULL</span>)</div><div class="line">        inqueue(<span class="built_in">queue</span>,(<span class="keyword">void</span> *)node);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(!is_queue_empty(<span class="built_in">queue</span>))</div><div class="line">    &#123;</div><div class="line">        Node *front;</div><div class="line"></div><div class="line">        front = (Node *)dequeue(<span class="built_in">queue</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>,front-&gt;value);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(front-&gt;left!=<span class="literal">NULL</span>)</div><div class="line">          inqueue(<span class="built_in">queue</span>,(<span class="keyword">void</span> *)front-&gt;left);</div><div class="line">        <span class="keyword">if</span>(front-&gt;right!=<span class="literal">NULL</span>)</div><div class="line">          inqueue(<span class="built_in">queue</span>,(<span class="keyword">void</span> *)front-&gt;right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>This algorithm is worth much thinking to have a full understanding of how it works.</p>
<h2 id="Graphic-output"><a href="#Graphic-output" class="headerlink" title="Graphic output"></a>Graphic output</h2><p>Any of the above traversing algorithm can be modified to print the edge between the parent and child. Making it much easy to adapt to the <code>graphviz</code> grammer.<br>One sample of the Fig1 converted to graphviz format is following. Each line representing either a vertex of the tree or the edge of the tree.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">digraph G &#123;</div><div class="line">5</div><div class="line">5 -&gt; 3</div><div class="line">3</div><div class="line">3 -&gt; 2</div><div class="line">2</div><div class="line">2 -&gt; 1</div><div class="line">1</div><div class="line">3 -&gt; 4</div><div class="line">4</div><div class="line">5 -&gt; 6</div><div class="line">6</div><div class="line">6 -&gt; 7</div><div class="line">7</div><div class="line">7 -&gt; 8</div><div class="line">8</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>It is done by the following code:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>   <span class="title">print_graph</span><span class="params">(Tree *tree)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(tree-&gt;root == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(null)"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"digraph G &#123;\n"</span>);</div><div class="line">    print_graph_internal(tree-&gt;root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_graph_internal</span><span class="params">(Node *node)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(node!=<span class="literal">NULL</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, node-&gt;value);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(node-&gt;left!=<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d -&gt; %d\n"</span>, node-&gt;value, node-&gt;left-&gt;value);</div><div class="line">        print_graph_internal(node-&gt;left);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(node-&gt;right!=<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d -&gt; %d\n"</span>, node-&gt;value, node-&gt;right-&gt;value);</div><div class="line">        print_graph_internal(node-&gt;right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Later, issue command <code>dot -Tjpg file.dot -o file.jpg</code> to draw the actual graph as shown in figure1.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Source insight color theme]]></title>
      <url>http://shenyu.wiki/2017/03/12/source-insight-color-theme/</url>
      <content type="html"><![CDATA[<p><img src="http://static.zybuluo.com/shenyuflying/zwofd8d075r44j23do1pabg0/image_1bb1802ofnuv148n1f226261heu9.png" alt="image_1bb1802ofnuv148n1f226261heu9.png-665.5kB"></p>
<p><a href="/uploads/souce-insight-sublime-color-theme.CF3">click to download</a></p>
<h2 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h2><ol>
<li>download the file <code>/uploads/souce-insight-sublime-color-theme.CF3</code></li>
<li>open source insight</li>
<li>click Options-&gt;Load configuration</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Readings of query optimizer]]></title>
      <url>http://shenyu.wiki/2017/03/11/Readings-of-query-optimizer/</url>
      <content type="html"><![CDATA[<blockquote>
<p> Query Optimizer is one of the hard part of  Relational Database Implimentation. A good reading of the related paper will help you understand why the code is implimented as such. Here I choose some of the basic papers of query optimizer.</p>
</blockquote>
<p><a href="https://en.wikipedia.org/wiki/Query_optimization" target="_blank" rel="external">Query optimization Wiki</a> : Fundamentals about query optimization, that’s a good palace to start.<br><a href="http://citeseer.ist.psu.edu/viewdoc/download;jsessionid=D6EAC438BC476CE50F9D7399D1B01E07?doi=10.1.1.137.3356&amp;rep=rep1&amp;type=pdf" target="_blank" rel="external">An Overview of Query Optimization in Relational Systems
</a> : a good review of considerations of query optimizer.<br><a href="https://wenku.baidu.com/view/b1889fd9d15abe23482f4d0c.html" target="_blank" rel="external">Access Path Selection in a Relational Database Management System</a> : Classic System R database optimizer implimentation.</p>
<p>to be cont …</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[For developers: how to build & run Greenplum for debugging purposes]]></title>
      <url>http://shenyu.wiki/2017/03/08/For-developers-how-to-build-run-Greenplum-for-debugging-purposes/</url>
      <content type="html"><![CDATA[<blockquote>
<p>The binary install package downloaded from the official website is not suit for developers. Following reasons: 1) the debug symbol is often not included. 2) there is often a high level of compilier optimization. 3) you cannot match the binary executable with the original source code. As a result, you will find trouble when debugging using gdb. So, developers often dowload the source code and complile it on their own, keeping whatever infos avaliable in the binary executable for debugging. This article is about how to build Greenplum from source code and deploy it on a single machine for developer debugging purposes.</p>
</blockquote>
<h2 id="Install-from-source"><a href="#Install-from-source" class="headerlink" title="Install from source"></a>Install from source</h2><p>The first step of get everything going is always the same: get the source code. The greenplum is currently hosted on github, which you can get the source code like this<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/greenplum-db/gpdb.git</div></pre></td></tr></table></figure></p>
<p>Afterwards, it much the same like all other Linux based software, you have to do the 3 steps: configure, make, make install.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./configure  CFLAGS=&quot;-O0 -gdwarf-2 -g3&quot; --prefix=`pwd`/release  --with-perl --with-python --with-libxml --enable-mapreduce --enable-debug</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<p>Here we add <code>-O0</code> to the CFLAGS, so that no complier optimization will take place. And we have <code>--enable-debug</code> configuration option set to build all the debugging info in the binary file.  We also add <code>-gdwarf-2 -g3</code> to the CFLAGS so all the defination of  macros is keeped.<br>If you met configure error, it is because you are missing some of the libs refer to FAQ for more info.<br>After you <code>make install</code> the gp database, all the binary executable file will be located under the <code>release</code> directroy.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gpadmin@yshen-ThinkPad-X201:~/gpdb/release$ ls</div><div class="line">bin  conf  demo  doc  docs  greenplum_path.sh  include  lib  sbin  share</div></pre></td></tr></table></figure></p>
<h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><h3 id="layout-of-the-gp-database-cluster"><a href="#layout-of-the-gp-database-cluster" class="headerlink" title="layout of the gp database cluster"></a>layout of the gp database cluster</h3><p>It considered easier to debug  if we only have all segemets installed on one computer. By doing so, it will not cause trouble for you to set up miltiple computers or virtual machines. In the meantime, you still have the basic distribution layout of the system. So the cluster layout is as follows:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">master host</div><div class="line">|</div><div class="line">-----&gt;segment host1 [primary1 primary2 primary3  mirror1 mirror2 mirror3]</div></pre></td></tr></table></figure>
<p>We have master and segement hosts installed on our localhost, and 3 primary segements plus 3 mirror segements installed on segment host which is also localhost. So, alltogether we have 7 postgres backend running on localhost. You can examin how many postgres backend process is running by <code>ps aux | grep bin/postgres | wc -l</code>, in this situation, the output is 7.</p>
<h3 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h3><p>By editing <code>hosts</code> file, the mdw ( master ) and sdw ( segment ) will point to the local host.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cat /etc/hosts</div><div class="line">127.0.0.1 mdw</div><div class="line">127.0.0.1 sdw1</div></pre></td></tr></table></figure></p>
<p>we should also create a file <code>all_hosts</code> to keep a list of all master and segment hosts.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cat /home/gpadmin/gpdb/release/conf/all_hosts </div><div class="line">mdw</div><div class="line">sdw1</div></pre></td></tr></table></figure></p>
<p>The <code>seg_hosts</code> file only have all the segment hosts.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat /home/gpadmin/gpdb/release/conf/seg_hosts </div><div class="line">sdw1</div></pre></td></tr></table></figure></p>
<p>Later the two files will be used by <code>gpinitsystem</code> command.</p>
<p>We also have to set up the folder to store the data. Each primary and mirror segment plus the master segment have a folder, in our case there are 7 folders.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mkdir -p /home/gpadmin/gpdata/gpmaster</div><div class="line">mkdir -p /home/gpadmin/gpdata/gpdatap1</div><div class="line">mkdir -p /home/gpadmin/gpdata/gpdatap2</div><div class="line">mkdir -p /home/gpadmin/gpdata/gpdatap3</div><div class="line">mkdir -p /home/gpadmin/gpdata/gpdatam1</div><div class="line">mkdir -p /home/gpadmin/gpdata/gpdatam2</div><div class="line">mkdir -p /home/gpadmin/gpdata/gpdatam3</div></pre></td></tr></table></figure></p>
<h3 id="Ininit-the-system"><a href="#Ininit-the-system" class="headerlink" title="Ininit the system"></a>Ininit the system</h3><p>The file <code>gpinitsystem_config</code> is for the command <code>gpinitsystem</code> to know how many hosts are there in the cluster and how many primary/mirror segments will have on a single host. You can find a sample of configuration file in <code>$GPHOME/docs/cli_help/gpconfigs/gpinitsystem_config</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"># FILE NAME: gpinitsystem_config</div><div class="line"></div><div class="line"># Configuration file needed by the gpinitsystem</div><div class="line"></div><div class="line">################################################</div><div class="line">#### REQUIRED PARAMETERS</div><div class="line">################################################</div><div class="line"></div><div class="line">#### Name of this Greenplum system enclosed in quotes.</div><div class="line">ARRAY_NAME=&quot;Greenplum&quot;</div><div class="line"></div><div class="line">#### Naming convention for utility-generated data directories.</div><div class="line">SEG_PREFIX=gpseg</div><div class="line"></div><div class="line">#### Base number by which primary segment port numbers </div><div class="line">#### are calculated.</div><div class="line">PORT_BASE=40000</div><div class="line"></div><div class="line">#### File system location(s) where primary segment data directories </div><div class="line">#### will be created. The number of locations in the list dictate</div><div class="line">#### the number of primary segments that will get created per</div><div class="line">#### physical host (if multiple addresses for a host are listed in </div><div class="line">#### the hostfile, the number of segments will be spread evenly across</div><div class="line">#### the specified interface addresses).</div><div class="line">declare -a DATA_DIRECTORY=(/home/gpadmin/gpdata/gpdatap1 /home/gpadmin/gpdata/gpdatap2 /home/gpadmin/gpdata/gpdatap3)</div><div class="line"></div><div class="line">#### OS-configured hostname or IP address of the master host.</div><div class="line">MASTER_HOSTNAME=mdw</div><div class="line"></div><div class="line">#### File system location where the master data directory </div><div class="line">#### will be created.</div><div class="line">MASTER_DIRECTORY=/home/gpadmin/gpdata/gpmaster</div><div class="line"></div><div class="line">#### Port number for the master instance. </div><div class="line">MASTER_PORT=5432</div><div class="line"></div><div class="line">#### Shell utility used to connect to remote hosts.</div><div class="line">TRUSTED_SHELL=ssh</div><div class="line">#### Maximum log file segments between automatic WAL checkpoints.</div><div class="line">CHECK_POINT_SEGMENTS=8</div><div class="line"></div><div class="line">#### Default server-side character set encoding.</div><div class="line">ENCODING=UNICODE</div><div class="line"></div><div class="line">################################################</div><div class="line">#### OPTIONAL MIRROR PARAMETERS</div><div class="line">################################################</div><div class="line"></div><div class="line">#### Base number by which mirror segment port numbers </div><div class="line">#### are calculated.</div><div class="line">MIRROR_PORT_BASE=50000</div><div class="line"></div><div class="line">#### Base number by which primary file replication port </div><div class="line">#### numbers are calculated.</div><div class="line">REPLICATION_PORT_BASE=41000</div><div class="line"></div><div class="line">#### Base number by which mirror file replication port </div><div class="line">#### numbers are calculated. </div><div class="line">MIRROR_REPLICATION_PORT_BASE=51000</div><div class="line"></div><div class="line">#### File system location(s) where mirror segment data directories </div><div class="line">#### will be created. The number of mirror locations must equal the</div><div class="line">#### number of primary locations as specified in the </div><div class="line">#### DATA_DIRECTORY parameter.</div><div class="line">declare -a MIRROR_DATA_DIRECTORY=(/home/gpadmin/gpdata/gpdatam1 /home/gpadmin/gpdata/gpdatam2 /home/gpadmin/gpdata/gpdatam3)</div><div class="line"></div><div class="line">################################################</div><div class="line">#### OTHER OPTIONAL PARAMETERS</div><div class="line">################################################</div><div class="line"></div><div class="line">#### Create a database of this name after initialization.</div><div class="line">DATABASE_NAME=postgres</div><div class="line"></div><div class="line">#### Specify the location of the host address file here instead of</div><div class="line">#### with the the -h option of gpinitsystem.</div><div class="line">MACHINE_LIST_FILE=/home/gpadmin/gpdb/release/conf/seg_hosts</div></pre></td></tr></table></figure></p>
<p>Before doing the initialization, we have to add a few environment variable, like <code>GPHOME</code> by doing:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/gpdb/release$ source greenplum_path.sh</div></pre></td></tr></table></figure>
<p>The GPHOME is set up by <code>configure</code>, so be sure to make it correct after you move the <code>release</code> folder to another location.<br>Inorder all the paths remain effective, you’d better add all the PATHs to your profile by:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat greenplum_path.sh &gt;&gt; ~/.profile</div></pre></td></tr></table></figure></p>
<blockquote>
<p>NOTICE: in order to run py scripts under bin directoy you have to  <code>export PYTHONPATH=$PYTHONPATH:~/gpdb/gpMgmt/bin/ext</code></p>
</blockquote>
<p>Ok, if you get here we are ready to rock and roll. Start the initialization of the system by typing the command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gpadmin@yshen-ThinkPad-X201:~/gpdb/release/bin$ ./gpinitsystem -c gpinitsystem_config</div></pre></td></tr></table></figure></p>
<p>There will be long list of logs showing what happend.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line">20170307:21:30:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Checking configuration parameters, please wait...</div><div class="line">20170307:21:30:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Reading Greenplum configuration file gpinitsystem_config</div><div class="line">20170307:21:30:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Locale has not been set in gpinitsystem_config, will set to default value</div><div class="line">20170307:21:30:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Locale set to en_US.utf8</div><div class="line">20170307:21:30:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[WARN]:-Master hostname mdw does not match hostname output</div><div class="line">20170307:21:30:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Checking to see if mdw can be resolved on this host</div><div class="line">20170307:21:30:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Can resolve mdw to this host</div><div class="line">20170307:21:30:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-MASTER_MAX_CONNECT not set, will set to default value 250</div><div class="line">20170307:21:30:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Detected a single host GPDB array build, reducing value of BATCH_DEFAULT from 60 to 4</div><div class="line">20170307:21:30:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[WARN]:-Master open file limit is 1024 should be &gt;= 65535</div><div class="line">20170307:21:30:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Checking configuration parameters, Completed</div><div class="line">20170307:21:30:53:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Commencing multi-home checks, please wait...</div><div class="line">.</div><div class="line">20170307:21:30:53:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Configuring build for standard array</div><div class="line">20170307:21:30:53:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Commencing multi-home checks, Completed</div><div class="line">20170307:21:30:53:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Building primary segment instance array, please wait...</div><div class="line">...</div><div class="line">20170307:21:30:55:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Building group mirror array type , please wait...</div><div class="line">...</div><div class="line">20170307:21:30:57:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Checking Master host</div><div class="line">20170307:21:30:57:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Checking new segment hosts, please wait...</div><div class="line">20170307:21:30:58:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[WARN]:-Host mdw open files limit is 1024 should be &gt;= 65535</div><div class="line">......</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Checking new segment hosts, Completed</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Greenplum Database Creation Parameters</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:---------------------------------------</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master Configuration</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:---------------------------------------</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master instance name       = Greenplum</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master hostname            = mdw</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master port                = 5432</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master instance dir        = /home/gpadmin/gpdata/gpmaster/gpseg-1</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master LOCALE              = en_US.utf8</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Greenplum segment prefix   = gpseg</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master Database            = postgres</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master connections         = 250</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master buffers             = 128000kB</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Segment connections        = 750</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Segment buffers            = 128000kB</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Checkpoint segments        = 8</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Encoding                   = UNICODE</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Postgres param file        = Off</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Initdb to be used          = /home/gpadmin/gpdb/release/bin/initdb</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-GP_LIBRARY_PATH is         = /home/gpadmin/gpdb/release/lib</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[WARN]:-Ulimit check               = Warnings generated, see log file &lt;&lt;&lt;&lt;&lt;</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Array host connect type    = Single hostname per node</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master IP address [1]      = ::1</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master IP address [2]      = 192.168.1.111</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master IP address [3]      = fe80::e181:909d:d2a4:8de0</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Standby Master             = Not Configured</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Primary segment #          = 3</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Total Database segments    = 3</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Trusted shell              = ssh</div><div class="line">20170307:21:31:04:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Number segment hosts       = 1</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Mirror port base           = 50000</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Replicaton port base       = 41000</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Mirror replicaton port base= 51000</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Mirror segment #           = 3</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Mirroring config           = ON</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Mirroring type             = Group</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:----------------------------------------</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Greenplum Primary Segment Configuration</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:----------------------------------------</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-sdw1 	/home/gpadmin/gpdata/gpdatap1/gpseg0 	40000 	2 	0 	41000</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-sdw1 	/home/gpadmin/gpdata/gpdatap2/gpseg1 	40001 	3 	1 	41001</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-sdw1 	/home/gpadmin/gpdata/gpdatap3/gpseg2 	40002 	4 	2 	41002</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:---------------------------------------</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Greenplum Mirror Segment Configuration</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:---------------------------------------</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-sdw1 	/home/gpadmin/gpdata/gpdatam1/gpseg0 	50000 	5 	0 	51000</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-sdw1 	/home/gpadmin/gpdata/gpdatam2/gpseg1 	50001 	6 	1 	51001</div><div class="line">20170307:21:31:05:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-sdw1 	/home/gpadmin/gpdata/gpdatam3/gpseg2 	50002 	7 	2 	51002</div><div class="line"></div><div class="line">Continue with Greenplum creation Yy|Nn (default=N):</div><div class="line">&gt; Y</div><div class="line">20170307:21:31:07:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Building the Master instance database, please wait...</div><div class="line">20170307:21:31:15:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Starting the Master in admin mode</div><div class="line">20170307:21:31:23:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Commencing parallel build of primary segment instances</div><div class="line">20170307:21:31:23:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Spawning parallel processes    batch [1], please wait...</div><div class="line">...</div><div class="line">20170307:21:31:24:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Waiting for parallel processes batch [1], please wait...</div><div class="line">............................</div><div class="line">20170307:21:31:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:------------------------------------------------</div><div class="line">20170307:21:31:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Parallel process exit status</div><div class="line">20170307:21:31:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:------------------------------------------------</div><div class="line">20170307:21:31:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Total processes marked as completed           = 3</div><div class="line">20170307:21:31:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Total processes marked as killed              = 0</div><div class="line">20170307:21:31:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Total processes marked as failed              = 0</div><div class="line">20170307:21:31:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:------------------------------------------------</div><div class="line">20170307:21:31:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Commencing parallel build of mirror segment instances</div><div class="line">20170307:21:31:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Spawning parallel processes    batch [1], please wait...</div><div class="line">...</div><div class="line">20170307:21:31:52:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Waiting for parallel processes batch [1], please wait...</div><div class="line">...................</div><div class="line">20170307:21:32:12:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:------------------------------------------------</div><div class="line">20170307:21:32:12:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Parallel process exit status</div><div class="line">20170307:21:32:12:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:------------------------------------------------</div><div class="line">20170307:21:32:12:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Total processes marked as completed           = 3</div><div class="line">20170307:21:32:12:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Total processes marked as killed              = 0</div><div class="line">20170307:21:32:12:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Total processes marked as failed              = 0</div><div class="line">20170307:21:32:12:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:------------------------------------------------</div><div class="line">20170307:21:32:12:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Deleting distributed backout files</div><div class="line">20170307:21:32:12:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Removing back out file</div><div class="line">20170307:21:32:12:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-No errors generated from parallel processes</div><div class="line">20170307:21:32:12:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Restarting the Greenplum instance in production mode</div><div class="line">20170307:21:32:13:004724 gpstop:yshen-ThinkPad-X201:gpadmin-[INFO]:-Starting gpstop with args: -a -l /home/gpadmin/gpAdminLogs -i -m -d /home/gpadmin/gpdata/gpmaster/gpseg-1</div><div class="line">20170307:21:32:13:004724 gpstop:yshen-ThinkPad-X201:gpadmin-[INFO]:-Gathering information and validating the environment...</div><div class="line">20170307:21:32:13:004724 gpstop:yshen-ThinkPad-X201:gpadmin-[INFO]:-Obtaining Greenplum Master catalog information</div><div class="line">20170307:21:32:13:004724 gpstop:yshen-ThinkPad-X201:gpadmin-[INFO]:-Obtaining Segment details from master...</div><div class="line">20170307:21:32:13:004724 gpstop:yshen-ThinkPad-X201:gpadmin-[INFO]:-Greenplum Version: &apos;postgres (Greenplum Database) 5.0.0-alpha.0-96-g0701a77 build dev&apos;</div><div class="line">20170307:21:32:13:004724 gpstop:yshen-ThinkPad-X201:gpadmin-[INFO]:-There are 0 connections to the database</div><div class="line">20170307:21:32:13:004724 gpstop:yshen-ThinkPad-X201:gpadmin-[INFO]:-Commencing Master instance shutdown with mode=&apos;immediate&apos;</div><div class="line">20170307:21:32:13:004724 gpstop:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master host=yshen-ThinkPad-X201</div><div class="line">20170307:21:32:13:004724 gpstop:yshen-ThinkPad-X201:gpadmin-[INFO]:-Commencing Master instance shutdown with mode=immediate</div><div class="line">20170307:21:32:13:004724 gpstop:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master segment instance directory=/home/gpadmin/gpdata/gpmaster/gpseg-1</div><div class="line">20170307:21:32:14:004724 gpstop:yshen-ThinkPad-X201:gpadmin-[INFO]:-Attempting forceful termination of any leftover master process</div><div class="line">20170307:21:32:14:004724 gpstop:yshen-ThinkPad-X201:gpadmin-[INFO]:-Terminating processes for segment /home/gpadmin/gpdata/gpmaster/gpseg-1</div><div class="line">20170307:21:32:14:004724 gpstop:yshen-ThinkPad-X201:gpadmin-[ERROR]:-Failed to kill processes for segment /home/gpadmin/gpdata/gpmaster/gpseg-1: ([Errno 3] No such process)</div><div class="line">20170307:21:32:14:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Starting gpstart with args: -a -l /home/gpadmin/gpAdminLogs -d /home/gpadmin/gpdata/gpmaster/gpseg-1</div><div class="line">20170307:21:32:14:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Gathering information and validating the environment...</div><div class="line">20170307:21:32:14:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Greenplum Binary Version: &apos;postgres (Greenplum Database) 5.0.0-alpha.0-96-g0701a77 build dev&apos;</div><div class="line">20170307:21:32:14:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Greenplum Catalog Version: &apos;301702171&apos;</div><div class="line">20170307:21:32:14:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Starting Master instance in admin mode</div><div class="line">20170307:21:32:15:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Obtaining Greenplum Master catalog information</div><div class="line">20170307:21:32:15:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Obtaining Segment details from master...</div><div class="line">20170307:21:32:15:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Setting new master era</div><div class="line">20170307:21:32:15:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Master Started...</div><div class="line">20170307:21:32:15:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Shutting down master</div><div class="line">20170307:21:32:17:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Commencing parallel primary and mirror segment instance startup, please wait...</div><div class="line">... </div><div class="line">20170307:21:32:20:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Process results...</div><div class="line">20170307:21:32:20:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-----------------------------------------------------</div><div class="line">20170307:21:32:20:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-   Successful segment starts                                            = 6</div><div class="line">20170307:21:32:20:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-   Failed segment starts                                                = 0</div><div class="line">20170307:21:32:20:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-   Skipped segment starts (segments are marked down in configuration)   = 0</div><div class="line">20170307:21:32:20:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-----------------------------------------------------</div><div class="line">20170307:21:32:20:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-</div><div class="line">20170307:21:32:20:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Successfully started 6 of 6 segment instances </div><div class="line">20170307:21:32:20:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-----------------------------------------------------</div><div class="line">20170307:21:32:20:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Starting Master instance yshen-ThinkPad-X201 directory /home/gpadmin/gpdata/gpmaster/gpseg-1 </div><div class="line">20170307:21:32:21:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Command pg_ctl reports Master yshen-ThinkPad-X201 instance active</div><div class="line">20170307:21:32:21:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-No standby master configured.  skipping...</div><div class="line">20170307:21:32:21:004811 gpstart:yshen-ThinkPad-X201:gpadmin-[INFO]:-Database successfully started</div><div class="line">20170307:21:32:21:010106 gpinitsystem:yshen-ThinkPad-X201:gpadmin-[INFO]:-Completed restart of Greenplum instance in production mode</div><div class="line">20170307:21:32:21:gpinitsystem:yshen-ThinkPad-X201:gpadmin-[FATAL]:-Failed to complete create database postgres  Script Exiting!</div></pre></td></tr></table></figure></p>
<h2 id="startup-amp-stop-database-server"><a href="#startup-amp-stop-database-server" class="headerlink" title="startup &amp; stop database server"></a>startup &amp; stop database server</h2><p>There are python script <code>gpstart</code>`gpstop` to start and stop the cluster all at once, so will save your the trouble of start\stop each of the segment by yourself.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gpadmin@yshen-ThinkPad-X201:~/gpdb/release/bin$ ./gpstart -d ~/gpdata/gpmaster/gpseg-1/</div></pre></td></tr></table></figure>
<p>When the cluster is up and running, you can see each segment is running under each’s data directory. And you can tell easily which of them is master segment and primary/mirror segment.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ ps aux | grep bin/postgres</div><div class="line">gpadmin   4938  0.3  2.8 426780 230960 ?       Ss   21:32   0:00 /home/gpadmin/gpdb/release/bin/postgres -D /home/gpadmin/gpdata/gpdatap2/gpseg1 -p 40001 --gp_dbid=3 --gp_num_contents_in_cluster=3 --silent-mode=true -i -M quiescent --gp_contentid=1</div><div class="line">gpadmin   4939  0.3  2.8 424808 229148 ?       Ss   21:32   0:00 /home/gpadmin/gpdb/release/bin/postgres -D /home/gpadmin/gpdata/gpdatam2/gpseg1 -p 50001 --gp_dbid=6 --gp_num_contents_in_cluster=3 --silent-mode=true -i -M quiescent --gp_contentid=1</div><div class="line">gpadmin   4944  0.3  2.8 424804 229172 ?       Ss   21:32   0:00 /home/gpadmin/gpdb/release/bin/postgres -D /home/gpadmin/gpdata/gpdatam1/gpseg0 -p 50000 --gp_dbid=5 --gp_num_contents_in_cluster=3 --silent-mode=true -i -M quiescent --gp_contentid=0</div><div class="line">gpadmin   4946  0.3  2.9 426784 231048 ?       Ss   21:32   0:00 /home/gpadmin/gpdb/release/bin/postgres -D /home/gpadmin/gpdata/gpdatap3/gpseg2 -p 40002 --gp_dbid=4 --gp_num_contents_in_cluster=3 --silent-mode=true -i -M quiescent --gp_contentid=2</div><div class="line">gpadmin   4947  0.3  2.8 424808 229128 ?       Ss   21:32   0:00 /home/gpadmin/gpdb/release/bin/postgres -D /home/gpadmin/gpdata/gpdatam3/gpseg2 -p 50002 --gp_dbid=7 --gp_num_contents_in_cluster=3 --silent-mode=true -i -M quiescent --gp_contentid=2</div><div class="line">gpadmin   4948  0.3  2.8 426784 230904 ?       Ss   21:32   0:00 /home/gpadmin/gpdb/release/bin/postgres -D /home/gpadmin/gpdata/gpdatap1/gpseg0 -p 40000 --gp_dbid=2 --gp_num_contents_in_cluster=3 --silent-mode=true -i -M quiescent --gp_contentid=0</div><div class="line">gpadmin   5039  0.3  2.5 384580 205840 ?       Ss   21:32   0:00 /home/gpadmin/gpdb/release/bin/postgres -D /home/gpadmin/gpdata/gpmaster/gpseg-1 -p 5432 --gp_dbid=1 --gp_num_contents_in_cluster=3 --silent-mode=true -i -M master --gp_contentid=-1 -x 0 -E</div><div class="line">gpadmin   5306  0.0  0.0  21312  1092 pts/1    S+   21:33   0:00 grep --color=auto bin/postgres</div></pre></td></tr></table></figure></p>
<p>Much the same like how to start the cluster, you can use python script <code>gpstop</code> to stop all the cluster at once.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gpadmin@yshen-ThinkPad-X201:~/gpdb/release/bin$ ./gpstop -d ~/gpdata/gpmaster/gpseg-1/</div></pre></td></tr></table></figure></p>
<h2 id="run-regression-test"><a href="#run-regression-test" class="headerlink" title="run regression test"></a>run regression test</h2><p>The first time cluster is running you can do a regression test to varify the correctness of your code.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make installcheck-world</div></pre></td></tr></table></figure></p>
<p>It took quite a while to finish all the tests. Later whenever you modify the source code you will have to run the regression test to make sure you do not affect other part of the code.</p>
<h2 id="Connecting-to-greenplum-cluster-using-psql"><a href="#Connecting-to-greenplum-cluster-using-psql" class="headerlink" title="Connecting to greenplum cluster using psql"></a>Connecting to greenplum cluster using psql</h2><p>You can connect to the <code>master segment</code> by  a CLI tool  called <code>psql</code>. The default port is <code>5432</code> and the default database we connect to is <code>postgres</code>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">gpadmin@yshen-ThinkPad-X201:~/gpdb/release/bin$ ./psql</div><div class="line">psql (8.3.23)</div><div class="line">Type &quot;help&quot; for help.</div><div class="line"></div><div class="line">postgres=# SELECT version();</div><div class="line">                                                                                                version                                     </div><div class="line">                                                            </div><div class="line">--------------------------------------------------------------------------------------------------------------------------------------------</div><div class="line">------------------------------------------------------------</div><div class="line"> PostgreSQL 8.3.23 (Greenplum Database 5.0.0-alpha.0-96-g0701a77 build dev) on x86_64-pc-linux-gnu, compiled by GCC gcc (Ubuntu 5.4.0-6ubunt</div><div class="line">u1~16.04.4) 5.4.0 20160609 compiled on Mar  7 2017 18:25:13</div><div class="line">(1 row)</div></pre></td></tr></table></figure></p>
<p>You can issue a query to find out how the cluster is configured by<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">postgres=# SELECT * from gp_segment_configuration order by 1;</div><div class="line"> dbid | content | role | preferred_role | mode | status | port  |      hostname       | address | replication_port | san_mounts </div><div class="line">------+---------+------+----------------+------+--------+-------+---------------------+---------+------------------+------------</div><div class="line">    1 |      -1 | p    | p              | s    | u      |  5432 | yshen-ThinkPad-X201 | mdw     |                  | </div><div class="line">    2 |       0 | m    | p              | s    | d      | 40000 | yshen-ThinkPad-X201 | sdw1    |            41000 | </div><div class="line">    3 |       1 | p    | p              | s    | u      | 40001 | yshen-ThinkPad-X201 | sdw1    |            41001 | </div><div class="line">    4 |       2 | p    | p              | s    | u      | 40002 | yshen-ThinkPad-X201 | sdw1    |            41002 | </div><div class="line">    5 |       0 | p    | m              | c    | u      | 50000 | yshen-ThinkPad-X201 | sdw1    |            51000 | </div><div class="line">    6 |       1 | m    | m              | s    | u      | 50001 | yshen-ThinkPad-X201 | sdw1    |            51001 | </div><div class="line">    7 |       2 | m    | m              | s    | u      | 50002 | yshen-ThinkPad-X201 | sdw1    |            51002 | </div><div class="line">(7 rows)</div></pre></td></tr></table></figure></p>
<p>Here is some explaination about each column.</p>
<p>dbid : range from 1-N, where master segment is 1, then the primary segment, the last is the mirror segment.</p>
<p>content : master is -1, each primary &amp; mirror segment share the same value since there content is the same.</p>
<p>role : primary or mirror status of a segment is running in.</p>
<p>preferred_role : the original defination of primary or mirror for a segment.</p>
<p>mode : ‘s’ means synchronized. ‘r’ means resyncing. ‘c’ change logging.</p>
<p>status : ‘u’ means up. ‘d’ means down.</p>
<h2 id="Feature-testing"><a href="#Feature-testing" class="headerlink" title="Feature testing"></a>Feature testing</h2><p>Different from the original postgres, greenplum allows you to store your table data separetly on each segment host. The master segment stores only meta-data while each primary/mirror segment store the acutal data.<br>You can setup the distribution key when creating table:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">postgres=# CREATE TABLE tb1 ( id int, name varchar(100)) DISTRIBUTED BY (id);</div><div class="line">CREATE TABLE</div><div class="line">postgres=# \d tb1</div><div class="line">             Table &quot;public.tb1&quot;</div><div class="line"> Column |          Type          | Modifiers </div><div class="line">--------+------------------------+-----------</div><div class="line"> id     | integer                | </div><div class="line"> name   | character varying(100) | </div><div class="line">Distributed by: (id)</div><div class="line"></div><div class="line"></div><div class="line">postgres=# INSERT INTO tb1 values(generate_series(1,1000));</div><div class="line">INSERT 0 1000</div></pre></td></tr></table></figure></p>
<p>After the data is inserted all the data is distribute by ID on each segment host. You can exmain how they are distributed by issuing command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">postgres=# select gp_segment_id,count(*) from tb1 group by 1 order by 1;</div><div class="line"> gp_segment_id | count </div><div class="line">---------------+-------</div><div class="line">             0 |   321</div><div class="line">             1 |   342</div><div class="line">             2 |   337</div><div class="line">(3 rows)</div></pre></td></tr></table></figure></p>
<p>Or you can find out which segment a specific tuple is reside by the system column <code>gp_segment_id</code> :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">postgres=# SELECT gp_segment_id , * from tb1 where id = 99;</div><div class="line"> gp_segment_id | id |       name        </div><div class="line">---------------+----+-------------------</div><div class="line">             2 | 99 | 0.459008027799428</div><div class="line">(1 row)</div></pre></td></tr></table></figure>
<p>When you query some data from the cluster. The plan is parallized, each segment is execute a seq scan on its part of data and gathered by the master host</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">postgres=# EXPLAIN SELECT * FROM tb1;</div><div class="line">                                   QUERY PLAN                                    </div><div class="line">---------------------------------------------------------------------------------</div><div class="line"> Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..13.00 rows=1000 width=22)</div><div class="line">   -&gt;  Seq Scan on tb1  (cost=0.00..13.00 rows=334 width=22)</div><div class="line">(2 rows)</div></pre></td></tr></table></figure>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="dependences-might-have-to-be-installed"><a href="#dependences-might-have-to-be-installed" class="headerlink" title="dependences might have to be installed"></a>dependences might have to be installed</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo apt install libapr1-dev   libevent-dev </div><div class="line">sudo apt install  libxml2*</div><div class="line">sudo apt install libcurl3-dev</div><div class="line">sudo apt install libghc-bzlib-dev</div><div class="line">sudo apt install libyaml-dev</div><div class="line">sudo apt install libpython-all-dev</div><div class="line">sudo apt install libperl-dev</div><div class="line">sudo apt install libpython-all-dev</div><div class="line">sudo apt install python-py  pip</div></pre></td></tr></table></figure>
<h3 id="cannot-establish-ssh-access-into-the-local-host"><a href="#cannot-establish-ssh-access-into-the-local-host" class="headerlink" title="cannot establish ssh access into the local host"></a>cannot establish ssh access into the local host</h3><p>if you see the following erro message:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ gpssh-exkeys -f ../conf/all_hosts </div><div class="line">[STEP 1 of 5] create local ID and authorize on local host</div><div class="line">  ... /home/yshen/.ssh/id_rsa file exists ... key generation skipped</div><div class="line">[ERROR yshen-ThinkPad-X201] authentication check failed:</div><div class="line">     ssh: connect to host yshen-thinkpad-x201 port 22: Connection refused</div><div class="line">[ERROR] cannot establish ssh access into the local host</div></pre></td></tr></table></figure></p>
<p>that means you have’t install ssh-server on your os, run the following commands to do so:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$  sudo apt-get install openssh-server</div><div class="line">$ sudo /etc/init.d/ssh start</div><div class="line">[ ok ] Starting ssh (via systemctl): ssh.service.</div></pre></td></tr></table></figure></p>
<h3 id="bad-password"><a href="#bad-password" class="headerlink" title="bad password"></a>bad password</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ gpssh-exkeys -f ../conf/all_hosts </div><div class="line">[STEP 1 of 5] create local ID and authorize on local host</div><div class="line">  ... /home/yshen/.ssh/id_rsa file exists ... key generation skipped</div><div class="line"></div><div class="line">[STEP 2 of 5] keyscan all hosts and update known_hosts file</div><div class="line"></div><div class="line">[STEP 3 of 5] authorize current user on remote hosts</div><div class="line">  ... send to mdw</div><div class="line">  ***</div><div class="line">  *** Enter password for mdw: </div><div class="line">[ERROR mdw] bad password</div><div class="line">  ***</div><div class="line">  *** Enter password for mdw: </div><div class="line">[ERROR mdw] bad password</div><div class="line">  ***</div><div class="line">  *** Enter password for mdw: </div><div class="line">[ERROR mdw] bad password</div><div class="line">  ***</div><div class="line">  *** Enter password for mdw:</div></pre></td></tr></table></figure>
<p>If you met the above error message, means you are not logged in as gpadmin user.</p>
<h3 id="No-module-named-paramiko"><a href="#No-module-named-paramiko" class="headerlink" title="No module named paramiko"></a>No module named paramiko</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./gpssh-exkeys -f ../conf/all_hosts </div><div class="line">Error: unable to import module: No module named paramiko</div></pre></td></tr></table></figure>
<p>You are missing some of the python libs.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install paramiko psutil</div></pre></td></tr></table></figure></p>
<h3 id="cannot-run-the-python-script-under-GPHOME-bin-dir"><a href="#cannot-run-the-python-script-under-GPHOME-bin-dir" class="headerlink" title="cannot run the python script under $GPHOME/bin dir"></a>cannot run the python script under $GPHOME/bin dir</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/gpdb/release/bin$ export PYTHONPATH=~/gpdb/gpMgmt/bin/ext:$PYTHONPATH</div></pre></td></tr></table></figure>
<h3 id="ImportError-No-module-named-lockfile-pidlockfile"><a href="#ImportError-No-module-named-lockfile-pidlockfile" class="headerlink" title="ImportError: No module named lockfile.pidlockfile"></a>ImportError: No module named lockfile.pidlockfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ ./gpstart -a</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;./gpstart&quot;, line 9, in &lt;module&gt;</div><div class="line">    from gppylib.mainUtils import *</div><div class="line">  File &quot;/home/gpadmin/gpdb/release/lib/python/gppylib/mainUtils.py&quot;, line 37, in &lt;module&gt;</div><div class="line">    from lockfile.pidlockfile import PIDLockFile, LockTimeout</div><div class="line">ImportError: No module named lockfile.pidlockfile</div><div class="line">```You are missing some of the python libs.</div><div class="line">You are missing some of the python libs.</div></pre></td></tr></table></figure>
<p>pip install lockfile<br>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nextcloud——搭建自己的云盘]]></title>
      <url>http://shenyu.wiki/2017/03/05/nextcloud%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%91%E7%9B%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近多家云盘相继关停，费了很多时间才把上面的东西下载到本地，而且各大云盘都限速500KB/s，尤其是百度云上的小电影都变成了8秒。技术宅岂能容忍？是时候搭建自己的私有云盘了！</p>
</blockquote>
<p>搭建自己的私有云有什么好处呢？首先没有什么容量、下载速度的限制，而且本地访问速度很快。然后可以和本地的cifs、ftp配合使用来实现多个设备文件共享：比如可以在电视、手机等等智能设备上挂载云盘中的文件来实现播放电影、看照片、听歌等需求。最后可以防止泄密和和谐^_^</p>
<p>说到私有云，其实有很多现成的产品可以使用，比如群晖、铁威马、西数等。买过来，插上一块硬盘就可以用，十分适合小白。但是成本略高，仅仅主机就需要1000多元，再加上一块硬盘，这种解决方案的成本一般都要超过2000元。自己搭建私有云的话，不仅成本很低，而且可以自己定制很多功能，比如在线笔记、邮件等等功能。但是需要会折腾linux哦！</p>
<p>自己搭建私有云其实很简单，首先需要一台主机，然后需要选择一个私有云软件（比如ownCloud、nextCloud、seafile）。在这里我还是用我的树莓派作为主机，虽然IO能力差了点，大概上传下载为2MB/s（无线），但是足够自己日常使用而且很省电。在对比几个不同的私有云软件之后，最终采用了nextCloud，感觉这个功能更为强大。具体如何搭建和配置nextCloud，它的<a href="https://nextcloud.com/" target="_blank" rel="external">官网</a>上说的很清楚，在这里就不再赘述了。搭建很快，最后的效果如下：</p>
<center><img src="http://static.zybuluo.com/shenyuflying/iqi9hampq8pdkmqfoptmoszr/image_1baf0hai9veg123ib61dbe7blm.png" alt="image_1baf0hai9veg123ib61dbe7blm.png-250.6kB"></center><br><center>登录界面</center>


<center><img src="http://static.zybuluo.com/shenyuflying/vn1xzj23galuj8mihi3tm3hd/image_1baf0gev81c3bhhl1mae3a21uh49.png" alt="image_1baf0gev81c3bhhl1mae3a21uh49.png-32.1kB"></center><br><center>首页</center>

<p>nextCloud提供了一个大气的web界面，实现了基本的文件上传、下载、图片视频预览等基本功能。然而其强大之处就是可以安装<a href="https://apps.nextcloud.com/" target="_blank" rel="external">apps</a>来实现云盘的功能扩展。</p>
<h2 id="外部存储"><a href="#外部存储" class="headerlink" title="外部存储"></a>外部存储</h2><p>在这里我用到了<strong>外部存储app</strong>来挂载诸多本地的资源，比如移动硬盘、smb/cifs等。</p>
<center><img src="http://static.zybuluo.com/shenyuflying/s0ksgdqnowh9nws8l67wp544/image_1baf176hj7qr12ltkum1c0vfj213.png" alt="image_1baf176hj7qr12ltkum1c0vfj213.png-70.7kB"></center>

<h2 id="在线笔记"><a href="#在线笔记" class="headerlink" title="在线笔记"></a>在线笔记</h2><p>另外用到了<strong>在线笔记app</strong>，这样可以有自己的在线笔记了，支持markdown语法而且是存储在本机的哦！</p>
<center><img src="http://static.zybuluo.com/shenyuflying/t7ok5ieds41aa3tdkmddvjmu/image_1baf1g8jfbl1934gecen2apm1g.png" alt="image_1baf1g8jfbl1934gecen2apm1g.png-23.1kB"></center>

<h2 id="markdown-editor"><a href="#markdown-editor" class="headerlink" title="markdown editor"></a>markdown editor</h2><p>最后可以<strong>markdown editor</strong>实现在线写博客，这样不用每次麻烦ssh登录到服务器来发布博客了。</p>
<center><img src="http://static.zybuluo.com/shenyuflying/m0off98icgxcnlfqjdo5gki2/image_1baf1m16ql8t1nnpgmmuac1u8a1t.png" alt="image_1baf1m16ql8t1nnpgmmuac1u8a1t.png-238.3kB"></center>

<p>功能是不是很强大，nextCloud你值得拥有！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[how to set your linux's timezone]]></title>
      <url>http://shenyu.wiki/2017/02/16/how-to-change-your-linux-timezone/</url>
      <content type="html"><![CDATA[<blockquote>
<p>my blog post time seems not correct these days. but time is fetched from the internet, so it is verly likely caused by an incorrect timezone setting of the linux server.</p>
</blockquote>
<p>type a few commands to see which timezone is set.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~/hexo-blog $ date</div><div class="line">2017年  3月  4日 星期六 13:47:09 UTC</div><div class="line">pi@raspberrypi:~/hexo-blog $ date -R</div><div class="line">Sat, 04 Mar 2017 13:47:14 +0000</div></pre></td></tr></table></figure></p>
<p>opps, the timezone is +0, but we are in china, the timezone shoud be +8</p>
<p>then use <code>tzselect</code> to set the correct timezone now!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~/hexo-blog $ sudo tzselect</div><div class="line">Please identify a location so that time zone rules can be set correctly.</div><div class="line">Please select a continent, ocean, &quot;coord&quot;, or &quot;TZ&quot;.</div><div class="line"> 1) Africa</div><div class="line"> 2) Americas</div><div class="line"> 3) Antarctica</div><div class="line"> 4) Arctic Ocean</div><div class="line"> 5) Asia</div><div class="line"> 6) Atlantic Ocean</div><div class="line"> 7) Australia</div><div class="line"> 8) Europe</div><div class="line"> 9) Indian Ocean</div><div class="line">10) Pacific Ocean</div><div class="line">11) coord - I want to use geographical coordinates.</div><div class="line">12) TZ - I want to specify the time zone using the Posix TZ format.</div><div class="line">#? 5</div><div class="line">Please select a country whose clocks agree with yours.</div><div class="line"> 1) Afghanistan		  18) Israel		    35) Palestine</div><div class="line"> 2) Armenia		  19) Japan		    36) Philippines</div><div class="line"> 3) Azerbaijan		  20) Jordan		    37) Qatar</div><div class="line"> 4) Bahrain		  21) Kazakhstan	    38) Russia</div><div class="line"> 5) Bangladesh		  22) Korea (North)	    39) Saudi Arabia</div><div class="line"> 6) Bhutan		  23) Korea (South)	    40) Singapore</div><div class="line"> 7) Brunei		  24) Kuwait		    41) Sri Lanka</div><div class="line"> 8) Cambodia		  25) Kyrgyzstan	    42) Syria</div><div class="line"> 9) China		  26) Laos		    43) Taiwan</div><div class="line">10) Cyprus		  27) Lebanon		    44) Tajikistan</div><div class="line">11) East Timor		  28) Macau		    45) Thailand</div><div class="line">12) Georgia		  29) Malaysia		    46) Turkmenistan</div><div class="line">13) Hong Kong		  30) Mongolia		    47) United Arab Emirates</div><div class="line">14) India		  31) Myanmar (Burma)	    48) Uzbekistan</div><div class="line">15) Indonesia		  32) Nepal		    49) Vietnam</div><div class="line">16) Iran		  33) Oman		    50) Yemen</div><div class="line">17) Iraq		  34) Pakistan</div><div class="line">#? 9</div><div class="line">Please select one of the following time zone regions.</div><div class="line">1) Beijing Time</div><div class="line">2) Xinjiang Time</div><div class="line">#? 1</div><div class="line"></div><div class="line">The following information has been given:</div><div class="line"></div><div class="line">	China</div><div class="line">	Beijing Time</div><div class="line"></div><div class="line">Therefore TZ=&apos;Asia/Shanghai&apos; will be used.</div><div class="line">Local time is now:	Sat Mar  4 21:46:15 CST 2017.</div><div class="line">Universal Time is now:	Sat Mar  4 13:46:15 UTC 2017.</div><div class="line">Is the above information OK?</div><div class="line">1) Yes</div><div class="line">2) No</div><div class="line">#? 1</div><div class="line"></div><div class="line">You can make this change permanent for yourself by appending the line</div><div class="line">	TZ=&apos;Asia/Shanghai&apos;; export TZ</div><div class="line">to the file &apos;.profile&apos; in your home directory; then log out and log in again.</div><div class="line"></div><div class="line">Here is that TZ value again, this time on standard output so that you</div><div class="line">can use the /usr/bin/tzselect command in shell scripts:</div><div class="line">Asia/Shanghai</div></pre></td></tr></table></figure>
<p>let’s see if the time is correct now:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~/hexo-blog $ date</div><div class="line">2017年  3月  4日 星期六 13:47:09 UTC</div><div class="line">pi@raspberrypi:~/hexo-blog $ date -R</div><div class="line">Sat, 04 Mar 2017 13:47:14 +0000</div></pre></td></tr></table></figure>
<p>still incorrect! may be we should follow the instruction above, say we have to set TZ in the .profile and logout/login.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~/hexo-blog $ echo &quot;TZ=&apos;Asia/Shanghai&apos;; export TZ&quot; &gt;&gt; ~/.profile </div><div class="line">pi@raspberrypi:~/hexo-blog $ exit</div><div class="line">logout</div><div class="line"></div><div class="line">Connection closed by foreign host.</div><div class="line"></div><div class="line">Disconnected from remote host(pi) at 21:48:00.</div><div class="line"></div><div class="line">Type `help&apos; to learn how to use Xshell prompt.</div><div class="line">[d:\~]$ </div><div class="line"></div><div class="line">Connecting to 192.168.1.10:22...</div><div class="line">Connection established.</div><div class="line">To escape to local shell, press &apos;Ctrl+Alt+]&apos;.</div><div class="line"></div><div class="line"></div><div class="line">The programs included with the Debian GNU/Linux system are free software;</div><div class="line">the exact distribution terms for each program are described in the</div><div class="line">individual files in /usr/share/doc/*/copyright.</div><div class="line"></div><div class="line">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</div><div class="line">permitted by applicable law.</div><div class="line">Last login: Sat Mar  4 12:09:50 2017 from 192.168.1.111</div><div class="line">pi@raspberrypi:~ $ date</div><div class="line">2017年  3月  4日 星期六 21:48:13 CST</div></pre></td></tr></table></figure>
<p>ok, we are done!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[科学上网——搭建自己的DNS服务器]]></title>
      <url>http://shenyu.wiki/2017/02/16/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84DNS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>DNS（Domain Name Server）故名思议就是把把域名解析为IP地址。为啥要自己搭DNS服务器呢？好处主要有以下几个：（1）通过缓存来提高域名解析的速度。（2）通过域名指向正确的IP地址能够访问被wall的网站。（3）通过域名指向无效的IP地址来过滤网站的广告。那么这篇文章就带领你搭建自己的DNS服务器来实现上述功能。</p>
</blockquote>
<p>首先你需要一台主机来做DNS服务器：可以用普通电脑，或者树莓派，或者一个路由器刷openwrt系统。其设置都是大同小异。这里我用树莓派，比较省电，可以7x24小时开机、性能也还不错。</p>
<center> <img src="http://static.zybuluo.com/shenyuflying/dn5f81hxruayw9fcy79ox4u6/image_1b92v70v7a93gac1ofog7k1no29.png" alt="image_1b92v70v7a93gac1ofog7k1no29.png-172.7kB"> </center>

<h2 id="安装dnsmasq"><a href="#安装dnsmasq" class="headerlink" title="安装dnsmasq"></a>安装dnsmasq</h2><p>dnsmasq是linux下的一个轻量级DHCP和DNS服务器。在这里我们只用到它的DNS服务。那我们先把它装好：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install dnsmasq -y</div></pre></td></tr></table></figure></p>
<p>把如下配置项加入<code>/etc/dnsmasq.conf</code>里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">listen-address=127.0.0.1,192.168.1.10</div><div class="line">cache-size=15000</div></pre></td></tr></table></figure></p>
<p>这个地址<code>192.168.1.10</code>就是树莓派的固定IP。<br>设置好之后我们通过<code>service dnsmasq status</code>能看到服务是否跑起来了。</p>
<h2 id="设置hosts"><a href="#设置hosts" class="headerlink" title="设置hosts"></a>设置hosts</h2><p><a href="https://github.com/racaljk/hosts" target="_blank" rel="external">这里</a>提供了能访问很多被wall网站的hosts<br><a href="https://github.com/vokins/yhosts" target="_blank" rel="external">这里</a>提供了能去广告的hosts<br>下面我们需要把这些hosts加入到本机的<code>/etc/hosts</code>文件里面，我写了一个脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line"># script to update the hosts file</div><div class="line"></div><div class="line"># Must be run as root</div><div class="line">if [[ `whoami` != &quot;root&quot; ]]</div><div class="line">then</div><div class="line">  echo &quot;This install must be run as root or with sudo.&quot;</div><div class="line">  exit</div><div class="line">fi</div><div class="line"></div><div class="line">DATE=`date`</div><div class="line"></div><div class="line">cp /etc/hosts /etc/hosts.bak</div><div class="line">echo &quot;&quot; &gt; /etc/hosts</div><div class="line"></div><div class="line"># for google, wiki, etc.</div><div class="line">git clone https://github.com/racaljk/hosts</div><div class="line">cat hosts/hosts &gt;&gt; /etc/hosts</div><div class="line">rm -rf hosts</div><div class="line"></div><div class="line"># wipe out ads</div><div class="line">git clone https://github.com/vokins/yhosts</div><div class="line">cat yhosts/hosts &gt;&gt; /etc/hosts</div><div class="line">rm -rf yhosts</div><div class="line"></div><div class="line"># delete some entry: taobao alipay ...</div><div class="line">sed -i &apos;/taobao/d&apos; /etc/hosts</div><div class="line">sed -i &apos;/alipay/d&apos; /etc/hosts</div><div class="line"></div><div class="line"># restart the dns server</div><div class="line">service dnsmasq restart</div><div class="line"></div><div class="line">echo &quot;updated at &quot;$DATE &gt;&gt; update_hosts.log</div></pre></td></tr></table></figure></p>
<p>接下来把这个脚本加入定时任务<code>crontab -e</code>，设为每周执行一次来获取最新的hosts。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># m h  dom mon dow   command</div><div class="line">0 0 * * 1 /root/update_hosts.sh</div></pre></td></tr></table></figure></p>
<h2 id="配置路由器"><a href="#配置路由器" class="headerlink" title="配置路由器"></a>配置路由器</h2><p>接下来需要把路由器的首选DNS服务器设置为我们刚刚搭建的DNS服务器的IP地址<code>192.168.1.10</code>。设置完之后你的手机、平板、电脑等设备就会在每次接入路由器的时候从路由器获取DNS。当然也可以挨个设置每个设备的DNS。很显然，因此如果你有多个设备比如手机平板的话，在路由器统一设置比较方便。</p>
<center> <img src="http://static.zybuluo.com/shenyuflying/o40fxl4rt87oui5ikbqonsl6/image_1b8uf1bb49o41hh6eakk0ugn9.png" alt="image_1b8uf1bb49o41hh6eakk0ugn9.png-63.3kB"> </center>



<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><table>
<thead>
<tr>
<th>网站</th>
<th>网址</th>
<th>是否能访问</th>
</tr>
</thead>
<tbody>
<tr>
<td>谷歌</td>
<td><a href="https://www.google.com.hk" target="_blank" rel="external">https://www.google.com.hk</a></td>
<td>OK</td>
</tr>
<tr>
<td>YouTube</td>
<td><a href="https://www.youtube.com" target="_blank" rel="external">https://www.youtube.com</a></td>
<td>OK</td>
</tr>
<tr>
<td>维基百科</td>
<td><a href="https://www.wikipedia.org" target="_blank" rel="external">https://www.wikipedia.org</a></td>
<td>OK</td>
</tr>
<tr>
<td>Facebook</td>
<td><a href="https://www.facebook.com" target="_blank" rel="external">https://www.facebook.com</a></td>
<td>OK</td>
</tr>
<tr>
<td>twitter</td>
<td><a href="https://www.facebook.com" target="_blank" rel="external">https://www.facebook.com</a></td>
<td>OK</td>
</tr>
</tbody>
</table>
<p>有些网站需要用https协议才能正常访问，所以需要输入https打头的地址。</p>
<p>另外好多原来被wall的app都可以用了，好多视频网站的广告也消失了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://wiki.archlinux.org/index.php/Dnsmasq" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Dnsmasq</a><br><a href="http://debugo.com/dnsmasq/" target="_blank" rel="external">http://debugo.com/dnsmasq/</a><br><a href="http://www.heystephenwood.com/2013/06/use-your-raspberry-pi-as-dns-cache-to.html" target="_blank" rel="external">http://www.heystephenwood.com/2013/06/use-your-raspberry-pi-as-dns-cache-to.html</a></p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何阅读程序源码之——call graph]]></title>
      <url>http://shenyu.wiki/2017/02/14/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E7%A8%8B%E5%BA%8F%E6%BA%90%E7%A0%81%E4%B9%8B%E2%80%94%E2%80%94call-graph/</url>
      <content type="html"><![CDATA[<blockquote>
<p>多阅读大型开源项目能够显著提升自己的能力，但是面对几万甚至几十万行的代码是不是感觉无从下手。理解大型工程的一个诀窍就是能够理清函数之间的调用关系。这篇文章介绍几个好用的工具，用来帮助我们生成代码的调用关系，以便更好的理解项目代码。</p>
</blockquote>
<p>说到函数调用关系（call graph）相信大家都不陌生，函数调用关系其实就是程序的执行流程。生成函数调用关系的方法一般来说有2个，即动态方法和静态方法。</p>
<h2 id="动态方法"><a href="#动态方法" class="headerlink" title="动态方法"></a>动态方法</h2><p>动态方法就是在程序执行过程中，把函数的调用情况记录下来，一些程序性能分析工具常常都有这个功能，比如<code>gprof</code>。相对于静态方法来说，动态方法准确的反映了程序执行的过程。但是一些没有实际执行到的分支没有显示出来。<br>常用的工具有：</p>
<ol>
<li><a href="https://sourceware.org/binutils/docs/gprof/" target="_blank" rel="external">gprof</a>：可以输出每个函数的调用次数，每个函数消耗的处理器时间，函数之间的调用关系。通过在编译和链接程序的时候（使用 -pg 编译和链接选项），gcc 在你应用程序的每个函数中都加入了一个名为mcount函数，也就是说你的应用程序里的每一个函数都会调用mcount，而mcount会在内存中保存一张函数调用图，并通过函数调用堆栈的形式查找子函数和父函数的地址。这张调用图也保存了所有与函数相关的调用时间，调用次数等等的所有信息。在程序结束后会生成gmon.out文件，然后再用gprof来分析gmon.out文件。但是gprof不支持多线程应用，多线程下只能采集主线程性能数据。原因是gprof采用ITIMER_PROF信号，在多线程内只有主线程才能响应该信号。如果需要支持多线程程序那么需要程序员自己处理线程信号。另外gprof只能输出文本形式的调用关系。</li>
<li><a href="http://kcachegrind.sourceforge.net/html/Home.html" target="_blank" rel="external">KCachegrind</a>：利用calgrind生成的结果，绘制调用关系图形。使用也非常简单,首先用valgrind来执行程序<code>valgrind --tools=callgrind ./prog</code>，程序结束后在目录下生成<code>callgrind.out.pid</code>文件，然后用kcachegrind打开这个文件即可。</li>
</ol>
<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>静态方法就是直接分析程序源码文件，把函数调用关系记录下来。静态方法能够更为全面的反映函数的调用情况（不管实际是否能调用）。相对于动态方法来说，静态方法不用编译，速度较快节约了大量时间。但是，静态方法的函数调用关系不一定能够反映程序的实际执行情况。<br>常用的工具有：</p>
<ol>
<li><a href="http://www.doxygen.nl/manual/index.html" target="_blank" rel="external">doxygen</a>：可由代码以生成html等各种格式的文档，需要编码时按照一定的规范，十分适合大型工程，可以看<a href="https://doxygen.postgresql.org/" target="_blank" rel="external">postgresql</a>的在线文档。但是已有工程由于不符合doxygen的规范，不适合使用。</li>
<li><a href="http://www.gnu.org/software/cflow/" target="_blank" rel="external">cflow</a>：直接解析C源代码，用lex&amp;yacc来生成文本格式的调用关系图。不需要任何改动。但是只能生成文本格式，不能生成图像。</li>
<li><a href="http://www.gson.org/egypt/egypt.html" target="_blank" rel="external">egypt</a>：用gcc的-fdump-rtl-expand选项生成调用关系，然后用graphviz生成调用图图像。需要简单改动一下Makefile,或者是make CFLAGS=”-fdump-rtl-expand”。</li>
<li><a href="http://www.vim.org/scripts/script.php?script_id=2368" target="_blank" rel="external">CCTree</a>：这个是vim的一个插件，利用cscope的输出来生成交叉引用的信息。和SourceInsight的交叉引用很像。</li>
<li><a href="http://freecode.com/projects/codeviz/" target="_blank" rel="external">codeviz</a> :其基本原理是给 GCC 打个补丁，让它在编译时每个源文件时 dump 出其中函数的 call graph，然后用 Perl 脚本收集并整理调用关系，转交给Graphviz绘制图形。这种方法还需要重新编译gcc，比较麻烦。</li>
</ol>
<p>动态方法和静态方法各有好处，在实际使用过程中需要两者相结合才会发挥更大力量。下面是他们生成的调用关系效果图：</p>
<ol>
<li>gprof</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">$ gprof -b ./node2dot ./gmon.out </div><div class="line">Flat profile:</div><div class="line"></div><div class="line">Each sample counts as 0.01 seconds.</div><div class="line">  %   cumulative   self              self     total           </div><div class="line"> time   seconds   seconds    calls  ms/call  ms/call  name    </div><div class="line">100.22      0.03     0.03        8     3.76     3.76  add_node</div><div class="line">  0.00      0.03     0.00       54     0.00     0.00  get_one_name</div><div class="line">  0.00      0.03     0.00       32     0.00     0.00  add_item</div><div class="line">  0.00      0.03     0.00       16     0.00     0.00  pop</div><div class="line">  0.00      0.03     0.00       16     0.00     0.00  push</div><div class="line">  0.00      0.03     0.00        8     0.00     0.00  add_link</div><div class="line">  0.00      0.03     0.00        1     0.00     0.00  print_body</div><div class="line">  0.00      0.03     0.00        1     0.00     0.00  print_footer</div><div class="line">  0.00      0.03     0.00        1     0.00     0.00  print_header</div><div class="line"></div><div class="line"></div><div class="line">			Call graph</div><div class="line"></div><div class="line"></div><div class="line">granularity: each sample hit covers 2 byte(s) for 33.26% of 0.03 seconds</div><div class="line"></div><div class="line">index % time    self  children    called     name</div><div class="line">                0.03    0.00       8/8           main [2]</div><div class="line">[1]    100.0    0.03    0.00       8         add_node [1]</div><div class="line">-----------------------------------------------</div><div class="line">                                                 &lt;spontaneous&gt;</div><div class="line">[2]    100.0    0.00    0.03                 main [2]</div><div class="line">                0.03    0.00       8/8           add_node [1]</div><div class="line">                0.00    0.00      54/54          get_one_name [3]</div><div class="line">                0.00    0.00      32/32          add_item [4]</div><div class="line">                0.00    0.00      16/16          push [6]</div><div class="line">                0.00    0.00      16/16          pop [5]</div><div class="line">                0.00    0.00       8/8           add_link [7]</div><div class="line">                0.00    0.00       1/1           print_header [10]</div><div class="line">                0.00    0.00       1/1           print_footer [9]</div><div class="line">                0.00    0.00       1/1           print_body [8]</div><div class="line">-----------------------------------------------</div><div class="line">                0.00    0.00      54/54          main [2]</div><div class="line">[3]      0.0    0.00    0.00      54         get_one_name [3]</div><div class="line">-----------------------------------------------</div><div class="line">                0.00    0.00      32/32          main [2]</div><div class="line">[4]      0.0    0.00    0.00      32         add_item [4]</div><div class="line">-----------------------------------------------</div><div class="line">                0.00    0.00      16/16          main [2]</div><div class="line">[5]      0.0    0.00    0.00      16         pop [5]</div><div class="line">-----------------------------------------------</div><div class="line">                0.00    0.00      16/16          main [2]</div><div class="line">[6]      0.0    0.00    0.00      16         push [6]</div><div class="line">-----------------------------------------------</div><div class="line">                0.00    0.00       8/8           main [2]</div><div class="line">[7]      0.0    0.00    0.00       8         add_link [7]</div><div class="line">-----------------------------------------------</div><div class="line">                0.00    0.00       1/1           main [2]</div><div class="line">[8]      0.0    0.00    0.00       1         print_body [8]</div><div class="line">-----------------------------------------------</div><div class="line">                0.00    0.00       1/1           main [2]</div><div class="line">[9]      0.0    0.00    0.00       1         print_footer [9]</div><div class="line">-----------------------------------------------</div><div class="line">                0.00    0.00       1/1           main [2]</div><div class="line">[10]     0.0    0.00    0.00       1         print_header [10]</div><div class="line">-----------------------------------------------</div><div class="line"></div><div class="line"></div><div class="line">Index by function name</div><div class="line"></div><div class="line">   [4] add_item                [3] get_one_name            [9] print_footer</div><div class="line">   [7] add_link                [5] pop                    [10] print_header</div><div class="line">   [1] add_node                [8] print_body              [6] push</div></pre></td></tr></table></figure>
<ol>
<li>kcachegrind<center><img src="http://static.zybuluo.com/shenyuflying/bz18v8q1z4vif7o5h9lpepra/image_1b8t50qjn1p7f9i0bjs1qud1cqc9.png" alt="image_1b8t50qjn1p7f9i0bjs1qud1cqc9.png-253.8kB"></center></li>
<li>egypt <center><img src="http://static.zybuluo.com/shenyuflying/4n143s2us4sxph95uhh5tbij/image_1b8renepf1ckbd1d1qjk1ikv4a0m.png" alt="image_1b8renepf1ckbd1d1qjk1ikv4a0m.png-42.6kB"></center></li>
<li>CCTree<center><img src="http://static.zybuluo.com/shenyuflying/rt5utk4711iyfaoo77c2anem/image_1b8rei332c4v1ppefci182muf49.png" alt="image_1b8rei332c4v1ppefci182muf49.png-128.3kB"></center>

</li>
</ol>
<p>PS:以上分析的源码来自我的两个开源项目：<br>pgNodeGraph: <a href="http://github.com/shenyuflying/pgNodeGraph" target="_blank" rel="external">http://github.com/shenyuflying/pgNodeGraph</a><br>codeRunner: <a href="http://github.com/shenyuflying/codeRunner" target="_blank" rel="external">http://github.com/shenyuflying/codeRunner</a></p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[soname]]></title>
      <url>http://shenyu.wiki/2017/02/09/soname/</url>
      <content type="html"><![CDATA[<p>客户反映一个动态库改名为后，编译时链接也是正确的。但在编译出来的应用做依赖分析时(ldd)，发现加载的还是改名之前的动态库。经过分析，是由于编译时带了<code>-Wl,-soname -Wl,libclntsh.so</code>选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -shared  .libs/bind.o ... .libs/kociapi.o  -L/lib  -Wl,--version-script=koci.lds -Wl,-soname -Wl,libclntsh.so -o .libs/libclntsh.so</div></pre></td></tr></table></figure></p>
<p>那么这样在连接时传给<code>ld</code>的参数就会是<code>ld -soname libclntsh.so</code><br>生成的动态库也就带上了<code>SONAME</code>这个字段。</p>
<p><center> <img src="http://static.zybuluo.com/shenyuflying/lklzdw5gskd5dmuzlnpazkl8/image_1b8gve8oi15h91nd0qjsb5eaju9.png" alt="image_1b8gve8oi15h91nd0qjsb5eaju9.png-52.2kB"> </center><br>关于这个选项手册<code>man ld</code>里面解释是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-hname</div><div class="line">-soname=name</div><div class="line">    When creating an ELF shared object, set the internal DT_SONAME field  to  the  specified</div><div class="line">    name.   When  an  executable is linked with a shared object which has a DT_SONAME field,</div><div class="line">    then when the executable is run the dynamic linker  will  attempt  to  load  the  shared</div><div class="line">    object specified by the DT_SONAME field rather than the using the file name given to the</div><div class="line">    linker.</div></pre></td></tr></table></figure></p>
<p>意思是如创建动态链接库的时候，如果加了<code>soname</code>按么生成的ELF文件中就会有<code>SONAME</code>这个字段。之后可执行文件加载这个动态链接库的时候，就会按照<code>SONAME</code>这个字段来找对应的文件，而不是当初链接可执行文件时候指定的动态链接库的文件名。这就是问题发生的原因。</p>
<p>那么<code>soname</code>有什么作用呢？<br><a href="https://en.wikipedia.org/wiki/Soname" target="_blank" rel="external">google</a>上的解释是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The soname is often used to provide version backwards-compatibility information. For instance, if versions 1.0 through 1.9 of the shared library libx provide identical interface, they would all have the same soname, e.g. libx.so.1. If the system only includes version 1.3 of that shared object, with filename libx.so.1.3, the soname field of the shared object tells the system that it can be used to fill the dependency for a binary which was originally compiled using version 1.2.</div></pre></td></tr></table></figure></p>
<p>也就是说<code>soname</code>是为了向下兼容的目的，比如老版本的名字是lib1.2，升级之后lib1.3。如果没有加-soname那么系统还会找lib1.2，也就没有达到升级的目的。如果-soname lib1那么系统认为lib1.2和lib1.3是兼容的，找的时候文件名只要是匹配lib1这个soname前缀就可以了。</p>
<p>考虑到目前我们的动态链接库目前都是叫libclntsh.so，并没有名字的区分。最后的解决方法很简单，就是增加编译选项: <code>--disable-soname</code>在编译的时候不加<code>-soname</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --disable-soname</div><div class="line"> make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ODBC programming]]></title>
      <url>http://shenyu.wiki/2017/02/06/odbc-programming/</url>
      <content type="html"><![CDATA[<center><br><iframe src=" http://shenyu.wiki/uploads/odbc-programming.html" scrolling="no" frameborder="0" width="800" height="600"> </iframe><br></center>


]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[An introduction to ODBC]]></title>
      <url>http://shenyu.wiki/2017/02/06/an-introduction-to-odbc/</url>
      <content type="html"><![CDATA[<center><br><iframe src=" http://shenyu.wiki/uploads/an-introduction-to-odbc.html" width="800" height="600"> </iframe><br></center>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How to setup postgresql ODBC]]></title>
      <url>http://shenyu.wiki/2017/02/06/how-to-setup-postgresql-odbc/</url>
      <content type="html"><![CDATA[<center><br><iframe src=" http://shenyu.wiki/uploads/how-to-setup-postgresql-odbc.html" width="800" height="600"> </iframe><br></center>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[过年在家写了一个蛮有趣的小程序：codeRunner]]></title>
      <url>http://shenyu.wiki/2017/01/31/%E8%BF%87%E5%B9%B4%E5%9C%A8%E5%AE%B6%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA%E8%9B%AE%E6%9C%89%E8%B6%A3%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%9AcodeRunner/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在工作中经常需要临时试验一小段代码，比如想要知道sizeof(int)的大小是多少？对于C语言这样的编译型语言来说，需要进行<code>编辑</code>,<code>编译</code>,<code>运行</code>等等系列操作，如果出现错误就需要重新来过，非常的耗费时间。针对这个痛点，借鉴一些解释型语言能够逐行运行的特点，输入一行就能马上看到输出，写了<code>codeRunner</code>这个程序，用C语言模仿解释型语言逐行运行的这种特性，方便临时开发调试。</p>
</blockquote>
<p>代码已经开源在了<a href="https://github.com/shenyuflying/codeRunner" target="_blank" rel="external">github</a>上，有兴趣的同学可以试用一下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/shenyuflying/codeRunner</div><div class="line">cd codeRunner</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<p>默认是安装在了<code>/usr/local/bin/codeRunner</code>这里。</p>
<p>一个小例子：</p>
<center><img src="/uploads/codeRunner-eg1.gif" alt=""></center>

<p>另外，codeRunner还支持循环等等各种C语言的数据类型、流程控制等等。</p>
<center><img src="/uploads/codeRunner-eg2.gif" alt=""></center>

<p>下面一个例子输出乘法口诀表：</p>
<center><img src="/uploads/codeRunner-eg3.gif" alt=""></center>

<p>如果有错误，会马上提示，纠正错误之后，可以再次运行：</p>
<center><img src="/uploads/codeRunner-eg4.gif" alt=""></center>

<p>还有更复杂的用法，比如通过<code>程序模板</code>来支持<code>函数</code>等等。详细的用法可以看README哦。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[The best career advice I’ve received]]></title>
      <url>http://shenyu.wiki/2017/01/22/The-best-career-advice-I%E2%80%99ve-received/</url>
      <content type="html"><![CDATA[<h1 id="The-best-career-advice-I’ve-received"><a href="#The-best-career-advice-I’ve-received" class="headerlink" title="The best career advice I’ve received"></a>The best career advice I’ve received</h1><p>Posted at October 15, 2013 by Nicholas C. Zakas</p>
<p>原文链接：<a href="https://www.nczonline.net/blog/2013/10/15/the-best-career-advice-ive-received/" target="_blank" rel="external">https://www.nczonline.net/blog/2013/10/15/the-best-career-advice-ive-received/</a></p>
<p>I recently had an interesting discussion with a colleague. We were recounting our job histories and how our, shall we say colorful personalities, could have negatively impacted us long term. The truth is, I was kind of an asshole coming out of college (some would argue I’m still kind of an asshole, but that’s beside the point). I was arrogant and bitingly sarcastic, a generally irreverent character. I thought I knew it all and was quite proud of myself for it.</p>
<p>I had a habit of telling more experienced engineers that they were doing things wrong, and despite being right most of the time, I didn’t have the personality to make it effective. During one particularly engaging conversation, one of the senior engineers stopped and said, in these exact words, “I’m going to beat the shit out of you if you don’t shut up.” I laughed it off because I knew he wouldn’t dare, and only years later did I realize the relevance of that statement: it was actually what he wanted to do.</p>
<p>Since that time I’ve grown up a lot, learned to watch what I say, and treat people with respect regardless of defining characteristics. The sarcasm stays in check while in a professional environment; I let it out to play when I’m with good friends. This self-control, along with a lot of other invaluable lessons, came to me not of my own accord, but through the careful guidance of the mentors I’ve had along the way. If not for them, who knows if my interpersonal relationships would have short-circuited my career.</p>
<p>The truth is that I have been incredibly blessed in my career because of the people I’ve come into contact with. My managers along the way molded a really rough-around-the-edges character into someone I’m proud to be. More than that, because of their influence, I’m not just a good programmer – I’m a good teammate and a good person. So impactful were these people on my life that I frequently recount their advice to the colleagues that I now mentor.</p>
<p>I also find their advice to be universally applicable, so I’d like to share the things I was told that helped me along the way. Of course, some of these are paraphrased since my memory for exact phrases isn’t all that great, but I believe I’ve captured the important parts correctly.</p>
<h2 id="Don’t-be-a-short-order-cook"><a href="#Don’t-be-a-short-order-cook" class="headerlink" title="Don’t be a short-order cook"></a>Don’t be a short-order cook</h2><p>My very first job lasted 8 months because the company shut down. As I was talking with my manager about what I would do next, he gave me this advice:</p>
<pre><code>Nicholas, you’re worth more than your code. Whatever your next gig is, make sure that you’re not a short-order cook. Don’t accept a job where you’re told exactly what to build and how to build it. You need to work somewhere that appreciates your insights into the product as well as your ability to build it.
</code></pre><p>This is something I’ve kept in mind throughout my career. Simply being an implementer isn’t good enough – you need to be involved in the process that leads up to implementation. Good engineers don’t just follow orders, they give feedback to and work with product owners to make the product better. Fortunately, I’ve chosen my jobs wisely and never ended up in a situation where people didn’t respect or value my insights.</p>
<h2 id="Self-promote"><a href="#Self-promote" class="headerlink" title="Self-promote"></a>Self-promote</h2><p>My second manager at Yahoo pulled me aside one day to give me some advice. He had been watching my work and felt like I was hiding a bit:</p>
<pre><code>You do great work. I mean really great work. I like how your code looks and that it rarely breaks. The problem is that others don’t see it. In order for you to get credit for the work you’re doing, you have to let people know. You need to do a bit of self-promotion to get noticed.
</code></pre><p>It took me a little while to digest what he was saying, but I finally figured it out. If you do good work, but no one knows that you did good work, then it doesn’t really help you. Your manager can back you up but can’t make your case for you. People within the organization need to understand your value, and the best way to do that is to tell people what you did.</p>
<p>This is advice I give to many of my colleagues now. Self-promoting doesn’t mean, “look at me, I’m awesome.” It means letting people know when you’ve hit major milestones, or when you’ve learned something new. It means showing people the work that you’re proud of. It means celebrating your accomplishments and the accomplishments of others. It means being visible within the organization. The engineer who sits quietly in a corner and just codes away is always a bit mysterious – don’t be like that. A quick email to say, “hey, I finished the new email layout. Let me know what you think” goes a long way.</p>
<h2 id="It’s-about-people"><a href="#It’s-about-people" class="headerlink" title="It’s about people"></a>It’s about people</h2><p>I was very title-driven earlier in my career. I always wanted to know what I had to do to be promoted. During my first one-on-one with my new manager on the Yahoo homepage, I asked what it would take for me to get promoted. His words still ring in my ears:</p>
<pre><code>At a certain point, you stop being judged on your technical knowledge and start being judged on the way you interact with people.
</code></pre><p>I’m not sure I’ve ever received a better insight into the software engineering profession since that time. He was exactly right. At that point, no one was questioning my technical ability. I was known as a guy who wrote good, high-quality code that rarely had bugs. What I lacked was leadership skill.</p>
<p>Since that time, I’ve seen countless engineers get stuck at one level in their career. Smart people, good code, but the inability to work effectively with others keeps them where they are. Anytime someone feels stuck in their software engineering career, I recount this advice and it has always been right on the money.</p>
<h2 id="None-of-this-matters"><a href="#None-of-this-matters" class="headerlink" title="None of this matters"></a>None of this matters</h2><p>I went through a period at Yahoo where I was frustrated. Maybe frustrated isn’t the right word, more like angry. I had angry outbursts and was arguing with people constantly. Things were going wrong and I didn’t like that. During one particularly rough day, I asked one of my mentors how he managed to stay calm when so many things were going wrong. His response:</p>
<pre><code>It’s easy. You see, none of this matters. So some crappy code got checked in, so the site went down. So what? Work can’t be your whole life. These aren’t real problems, they’re work problems. What really matters is what happens outside of work. I go home and my wife is waiting for me. That’s pretty nice.
</code></pre><p>I had moved to California from Massachusetts and had a hard time making friends. Work was my life, it was what kept me sane, so when it wasn’t going that meant my life wasn’t going well. This conversation made me realize I had to have something else going on in my life, something I could go back to and forget about the troubles I had at work.</p>
<p>He was right, once I shifted my mindset and recategorized the annoying things at work as “work things,” I was able to think more clearly. I was able to calm down at work and have much more pleasant interactions with people.</p>
<h2 id="Authority-your-way"><a href="#Authority-your-way" class="headerlink" title="Authority, your way"></a>Authority, your way</h2><p>When I was first promoted to principal engineer at Yahoo, I sat down with my director to better understand what the role entailed. I knew I had to be more of a leader, but I was having trouble being authoritative. I asked for help. Here’s what he said:</p>
<pre><code>I can’t tell you how to be authoritative, that’s something you need to figure out on your own. Different people have different styles. What you need to do is find a style that you can live with, that makes you comfortable. I can’t tell you what that is, but you do need to find it for this position.
</code></pre><p>I spent a lot of time that year observing people of authority and how they interacted with others. I took note as to how they walked, how they talked, how they dealt with problem situations. I tried different styles before I finally came across one that worked for me. My style is uniquely me and anyone learning to be in a position of authority has to go through the same growing pains. My advantage was that my mentor clued me about the process up front.</p>
<h2 id="Moving-from-“how-”-to-“what-”"><a href="#Moving-from-“how-”-to-“what-”" class="headerlink" title="Moving from “how?” to “what?”"></a>Moving from “how?” to “what?”</h2><p>During a conversation with my manager at Yahoo, I asked what the expectations were with my new position. He answered:</p>
<pre><code>To this point in your career, you’ve answered the question, “how?” As in, we tell you what needs to be done and you figure out how to do it. At this point, though, you need to answer the question, “what?” I’m expecting you to come and tell me what needs to be done.
</code></pre><p>This is the part where I see a lot of engineers get tripped up, and I would have as well if not for this piece of advice. Switching from “how?” to “what?” is very hard and takes time to develop. It also takes a bit of maturity to be left to your own desires as to what you focus on. After all, if you can spend your time on anything you want, you are also solely responsible for what you produce.</p>
<p>At Box, we call this “running open loop,” meaning that you do your job with minimal oversight and yet still are making a significant positive impact on the engineering organization and the company as a whole. This is the step where many engineers fail to make the leap, and I still give this advice to anyone who is trying to get to the next level.</p>
<h2 id="Act-like-you’re-in-charge"><a href="#Act-like-you’re-in-charge" class="headerlink" title="Act like you’re in charge"></a>Act like you’re in charge</h2><p>I had just sat through a meeting where I had nothing to say. During my one-on-one with my director, I mentioned that I was just in a meeting where I had no idea why I was there and had nothing to contribute. He said:</p>
<pre><code>Don’t ever do that again. If you’re in a meeting, it’s because you are there to participate. If you’re not sure why you’re there, stop and ask. If you’re not needed, leave. You’re in a leadership position, act like it. Don’t go quietly into a room. Just act like you’re in charge and people will believe it.
</code></pre><p>In that piece of advice, my mentor had reminded me of a lesson I learned while acting in high school: no one knows when you’re acting. If you’re nervous but act like you’re not, then people won’t know that you’re nervous. The same with leadership. The old phrase fake it til you make it comes to mind. From that point on, I never sat quietly in a meeting. I made sure I only went to meetings that needed me to participate and then I would participate.</p>
<h2 id="Let-them-win"><a href="#Let-them-win" class="headerlink" title="Let them win"></a>Let them win</h2><p>I went through a particular period where there were a lot of arguments on the team. I prided myself on ending those arguments with authority. I had a “my ruling is final” mentality, and my manager noticed that and gave me this piece of advice:</p>
<pre><code>I see a lot of arguing going on, and I see you pushing through to win a lot. I know that most of the time you are right, but every once in a while let them win. Pick the things that really matter to you and push for those but let the other things go. There’s no need to win every argument.
</code></pre><p>This was one piece of advice I resisted initially. I was right nearly all of the time, why would I ever let someone else win? However, as I had grown to trust his instincts, I gave it a shot. The result: there were less arguments. People didn’t feel like they had to get one over on me, and in turn, I became better at identifying things I really didn’t care that much about. I stuck to my guns on important issues and let the others ones get resolved by the other party. The intensity of all conversations dropped considerably.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Looking back at the brash guy I was when I graduated college, my career could have ended up very different. I was seen as a malcontent, a smart but hard-to-deal-with guy who people dealt with because they had to. If it weren’t for the mentors I had along the way, as well as some humbling failures early in my career, my interpersonal skills (or lack thereof) could have very well done me in. These days, I regularly seek out those who are more experienced than me and ask for advice. I may no longer make big, glaring mistakes, but I also don’t want to wait for one to happen to seek out the experienced insights of someone I trust.</p>
<p>The nearly five years I was at Yahoo were some of the most transformative in my career. I got to work on interesting problems at a large scale, but moreso I was blessed with a series of wonderful managers and other mentors within my organization. I credit those conversations with turning me into a person that I’m proud of today, both at work and outside in “real life.”</p>
<p>If I can leave you with one overriding piece of career advice, it would be this: identify someone at your work that is smarter than you in some way (technically, organizationally, etc.) and attach yourself to them. See if you can regularly have lunch or coffee and pick their brain for the vast amount of knowledge it has. Your career, and maybe even your life, could end up drastically better by doing so.</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[汇编调试方法-20160526]]></title>
      <url>http://shenyu.wiki/2017/01/19/%E6%B1%87%E7%BC%96%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95-20160526/</url>
      <content type="html"><![CDATA[<blockquote>
<p>计算机基本架构、汇编基础知识、C语言与汇编、GDB汇编调试。带你进入C语言的底层世界。</p>
</blockquote>
<center><iframe height="498" width="510" src="http://player.youku.com/embed/XMjQxMTk0NjMyOA==" frameborder="0" 'allowfullscreen'=""></iframe></center>

<p>2016年5月26日</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[汇编调试方法-20160506]]></title>
      <url>http://shenyu.wiki/2017/01/19/%E6%B1%87%E7%BC%96%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95-20160506/</url>
      <content type="html"><![CDATA[<blockquote>
<p>计算机基本架构、汇编基础知识、C语言与汇编、GDB汇编调试。带你进入C语言的底层世界。</p>
</blockquote>
<center><iframe height="498" width="510" src="http://player.youku.com/embed/XMjQxMTgzNzM2NA==" frameborder="0" 'allowfullscreen'=""></iframe></center>

<p>2016年5月6日</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[修改hosts来访问谷歌]]></title>
      <url>http://shenyu.wiki/2017/01/18/%E4%BF%AE%E6%94%B9hosts%E6%9D%A5%E8%AE%BF%E9%97%AE%E8%B0%B7%E6%AD%8C/</url>
      <content type="html"><![CDATA[<blockquote>
<p>想用google查东西，可以通过修改hosts方式,非常简单。</p>
</blockquote>
<p>用root用户执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/racaljk/hosts</div><div class="line">cp /etc/hosts /etc/hosts.bak</div><div class="line">cat hosts/hosts &gt; /etc/hosts</div><div class="line">rm -rf hosts</div></pre></td></tr></table></figure>
<p><a href="https://github.com/racaljk/hosts" target="_blank" rel="external">这个网址</a>上面有人在维护最新的hosts。如果hosts过期，可以通过这个脚本定时执行，来确保总是最新的。</p>
<center><img src="http://static.zybuluo.com/shenyuflying/5jgl6gv0e53fdfne1o0ofyjh/image_1b6o85n6c14021lv0s2bh0b190c9.png" alt="image_1b6o85n6c14021lv0s2bh0b190c9.png-212.2kB"></center>

<p>这样就可以来搜索需要的东西。比如我的博客就可以通过google搜到哦。</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如果你要给学生一些学习建议，你会说些什么]]></title>
      <url>http://shenyu.wiki/2017/01/17/%E5%A6%82%E6%9E%9C%E4%BD%A0%E8%A6%81%E7%BB%99%E5%AD%A6%E7%94%9F%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE%EF%BC%8C%E4%BD%A0%E4%BC%9A%E8%AF%B4%E4%BA%9B%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Q：如果你要给学生一些学习建议，你会说些什么？</p>
</blockquote>
<p><strong>吴恩达:</strong></p>
<p>当你在思考今天应该如何打发时间时，你需要考虑两个问题，一是你所做的事情是否能改变世界；二是你需要学习多少知识。</p>
<p>即使到了今天，我也是这样安排自己的时间的。</p>
<p>我们的社会为个体提供了改变世界的机会。拥有互联网化的技术与先进的沟通方式，创意与产品能够比以往更快的方式传播。只要有正确的想法与强大的执行力，任何人都能够做出贡献，造福世界上的其它人。</p>
<p>所以，问问自己，如果我实现了梦想，取得成功，它是否能帮助其它人？如果答案是肯定的，继续寻找你应该研究的方向；如果答案是否定的，说明你最大的潜能还没有爆发。</p>
<p>第二点是，特别是你还年轻的时候，不要吝惜自己在教育方面的投资。</p>
<p>我的「年轻」指的是那些小于 100 岁的人。</p>
<p>你学习的任何东西，在未来的某一天都会给你应有的报答。但这并不简单。当你走出校园，把时间花在学习上，短期内几乎看不到什么回报。没有老师督促你，但如果你能让自己在学习中得到快乐，开始尝试用各种方式思考，并与人们交流你所学到的东西，那么在数年时间内，你会在自己的领域里成为独挡一面的专家。</p>
<p>我个人非常爱阅读。我的 kindle 上有超过 1000 本书，而且每天晚上和周末我都会花时间阅读，涉猎的方向包括学术研究论文、商业战略书籍、具有变革及创新性的产品及进展、我所崇拜的人的自传等等。有时间我会看看 MOOC，也喜欢与能带给我启迪的人交流，不论对方是一个陌生人还是老朋友。</p>
<p>学习的过程能够帮助你决定工作的方向，当你看到其它人改变世界的先例，你也会知晓自己应该如何改变世界。</p>
<p>总而言之：即使做到这一点很难，但要不断投入（时间、金钱）学习。坚持寻找能够帮助人类的终极方式吧！</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo博客增加菜单栏目]]></title>
      <url>http://shenyu.wiki/2017/01/16/hexo%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E8%8F%9C%E5%8D%95%E6%A0%8F%E7%9B%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>hexo中的yelee主题默认提供了<code>主页</code>、<code>归档</code>、<code>标签</code>、<code>关于</code>这几个菜单条目。那么如何增加新的条目呢？</p>
</blockquote>
<h2 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page &quot;message&quot;</div></pre></td></tr></table></figure>
<p>新建的页面会在<code>source/message/index.md</code>这里，打开之后可以输入内容。</p>
<h2 id="加入到菜单栏目"><a href="#加入到菜单栏目" class="headerlink" title="加入到菜单栏目"></a>加入到菜单栏目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim themes/yelee/_config.yml</div></pre></td></tr></table></figure>
<p>在<code>menu</code>下面加入新建立的<code>message</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  主页: /</div><div class="line">  归档: /archives/</div><div class="line">  标签: /tags/</div><div class="line">  导航: /map/</div><div class="line">  留言: /message/  ##加在这里</div><div class="line">  关于: /about/</div></pre></td></tr></table></figure></p>
<h2 id="更改css"><a href="#更改css" class="headerlink" title="更改css"></a>更改css</h2><p>博客增加了两个栏目：<code>导航</code>和<code>留言</code>。然后发现地方不够了，最后的<code>关于</code>被下面的图标覆盖了。怎么增加导航栏上下的高度呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ./themes/yelee/source/css/_partial/main.styl</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">.header-menu&#123;</div><div class="line">    menu-line-height = (28/16)rem</div><div class="line">    font-weight: 550;</div><div class="line">    line-height: menu-line-height;</div><div class="line">    font-family: inherit;</div><div class="line">    cursor: pointer;</div><div class="line">    text-transform: uppercase;</div><div class="line">    float: none;</div><div class="line">    min-height: @line-height * 5; ## 增加这个，控制了菜单的最小高度。</div><div class="line">    max-height: @line-height * 7; ## 增加这个，控制了菜单的最大高度。</div><div class="line">    overflow: visible;</div><div class="line">    text-align: center;</div><div class="line">    display: -webkit-box;</div><div class="line">    -webkit-box-orient: horizontal;</div><div class="line">    -webkit-box-pack: center;</div><div class="line">    -webkit-box-align: center;</div><div class="line">    li&#123;</div><div class="line">        cursor: default;</div><div class="line">        a&#123;</div><div class="line">            font-size: (14/16)rem;</div><div class="line">            min-width: left-col-width;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后的效果如下：</p>
<center><img src="http://static.zybuluo.com/shenyuflying/9wmd7ty8zmzysvltpy2o0p3s/image_1b6ijg51it7m1512m9m12331h8k9.png" alt="image_1b6ijg51it7m1512m9m12331h8k9.png-125.7kB"></center>

<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL中的PL/SQL实现]]></title>
      <url>http://shenyu.wiki/2017/01/13/PostgreSQL%E4%B8%AD%E7%9A%84PL-SQL%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><ol>
<li>函数创建<br>1.1 create function的语法解析<br>1.2 创建plsql函数 ProcessUtility-&gt;CreateFunction-&gt;CreateProcedure</li>
<li>调用plsql函数<br>2.1 编译<br>2.2 执行</li>
</ol>
<h2 id="函数创建"><a href="#函数创建" class="headerlink" title="函数创建"></a>函数创建</h2><h3 id="create-function的语法解析"><a href="#create-function的语法解析" class="headerlink" title="create function的语法解析"></a>create function的语法解析</h3><p>创建plsql存储过程的基本语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> [<span class="keyword">or</span> <span class="keyword">replace</span>] <span class="keyword">function</span> &lt;fname&gt;</div><div class="line">		[(&lt;<span class="keyword">type</span><span class="number">-1</span>&gt; &#123; , &lt;<span class="keyword">type</span>-n&gt;&#125;)]</div><div class="line">		<span class="keyword">returns</span> &lt;<span class="keyword">type</span>-r&gt;</div><div class="line">		<span class="keyword">as</span> &lt;filename <span class="keyword">or</span> code <span class="keyword">in</span> <span class="keyword">language</span> <span class="keyword">as</span> appropriate&gt;</div><div class="line">		<span class="keyword">language</span> &lt;lang&gt; [<span class="keyword">with</span> <span class="keyword">parameters</span>]</div></pre></td></tr></table></figure></p>
<p>对应到实现gram.y:6770 中有<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CreateFunctionStmt:</div><div class="line">			CREATE opt_or_replace FUNCTION func_name func_args_with_defaults</div><div class="line">			RETURNS func_return createfunc_opt_list opt_definition</div><div class="line">				&#123;</div><div class="line">					CreateFunctionStmt *n = makeNode(CreateFunctionStmt);</div><div class="line">					n-&gt;replace = $2;</div><div class="line">					n-&gt;funcname = $4;</div><div class="line">					n-&gt;parameters = $5;</div><div class="line">					n-&gt;returnType = $7;</div><div class="line">					n-&gt;options = $8;</div><div class="line">					n-&gt;withClause = $9;</div><div class="line">					$$ = (Node *)n;</div></pre></td></tr></table></figure></p>
<p>可以看到是主要解析如下内容：</p>
<ol>
<li>func_name 函数名</li>
<li>fuc_args 参数</li>
<li>fuc_return 返回值</li>
<li>createfunc_opt_list 内容，对于plsql来说</li>
</ol>
<h3 id="插入系统表"><a href="#插入系统表" class="headerlink" title="插入系统表"></a>插入系统表</h3><p>解析完了之后调用CreateFunction函数来实现实际的创建，然后调用ProcedureCreate来插入系统表pg_proc中<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">ObjectAddress</span></div><div class="line"><span class="title">CreateFunction</span><span class="params">(CreateFunctionStmt *stmt,  <span class="comment">//入参就是语法解析返回的结构体</span></span></div><div class="line">                <span class="keyword">const</span> <span class="keyword">char</span> *queryString)</div><div class="line">&#123;</div><div class="line">...做一些检查和转换</div><div class="line">ProcedureCreate() <span class="comment">//来完成实际的创建工作，其实就是插入到了系统表pg_proc</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：此时只是把plsql的文本存下来了，并没有编译。编译会在后续进行</p>
<h2 id="调用plsql函数"><a href="#调用plsql函数" class="headerlink" title="调用plsql函数"></a>调用plsql函数</h2><p>plpgsql语言对应的处理函数，已经在系统初始化时通过脚本加载。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./backend/catalog/postgres.bki:insert ( <span class="string">"plpgsql"</span> t t <span class="string">"plpgsql_call_handler"</span> <span class="string">"plpgsql_inline_handler"</span> <span class="string">"plpgsql_validator"</span> <span class="string">"$libdir/plpgsql"</span> <span class="number">_</span>null_ )</div></pre></td></tr></table></figure></p>
<p>所以，当调用plsql函数就会调用相应的处理程序。相关函数在pl_handler.c文件中。<br>在该文件中我们看到如下函数：</p>
<p>_PG_init  系统启动加载plpgsql.so动态链接库之后，即调用该函数完成一系列初始化工作<br>plpgsql_call_handler 编译执行plsql函数<br>plpgsql_inline_handler 编译执行plsql匿名块<br>plpgsql_validator 在Create Function时检验函数的有效性</p>
<p>可以看到，当用户调用plsql函数时就会进入plpgsql_call_handler函数中,经过精简的函数如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function">Datum</span></div><div class="line"><span class="title">plpgsql_call_handler</span><span class="params">(PG_FUNCTION_ARGS)</span></div><div class="line">&#123;</div><div class="line">...</div><div class="line">	SPI_connect()  <span class="comment">// SPI 用于实际执行sql语句</span></div><div class="line"></div><div class="line">	func = plpgsql_compile(fcinfo, <span class="literal">false</span>); <span class="comment">// 编译plsql</span></div><div class="line">...</div><div class="line">	retval = plpgsql_exec_function(func, fcinfo, <span class="literal">NULL</span>); <span class="comment">//执行plsql</span></div><div class="line">...</div><div class="line">	SPI_finish() <span class="comment">// 断开SPI</span></div><div class="line">	<span class="keyword">return</span> retval;</div></pre></td></tr></table></figure>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">PLpgSQL_function *</span></div><div class="line"><span class="title">plpgsql_compile</span><span class="params">(FunctionCallInfo fcinfo, <span class="keyword">bool</span> forValidator)</span></div><div class="line">&#123;</div><div class="line">...</div><div class="line">先看hash表里面有没缓存，以及缓存是否失效，如果有效则直接返回，不用再编译啦。</div><div class="line">否则需要编译，调用do_compile()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> PLpgSQL_function *</span></div><div class="line"><span class="title">do_compile</span><span class="params">(FunctionCallInfo fcinfo,</span></div><div class="line">		   HeapTuple procTup,</div><div class="line">		   PLpgSQL_function *function,</div><div class="line">		   PLpgSQL_func_hashkey *hashkey,</div><div class="line">		   <span class="keyword">bool</span> forValidator)</div><div class="line">&#123;</div><div class="line">	plpgsql_scanner_init(proc_source); <span class="comment">// 这里的proc_source就是plsql函数文本</span></div><div class="line">	plpgsql_ns_init(); <span class="comment">// 初始化name stack</span></div><div class="line">	plpgsql_ns_push(NameStr(procStruct-&gt;proname), PLPGSQL_LABEL_BLOCK); <span class="comment">//name stack 中的第一个值就是proname</span></div><div class="line">	plpgsql_start_datums(); <span class="comment">// 初始化本地变量，默认先分配128个变量空间</span></div><div class="line">	plpgsql_resolve_polymorphic_argtypes(); <span class="comment">//解析函数参数</span></div><div class="line">	plpgsql_build_datatype(); <span class="comment">// 建立对应的数据类型</span></div><div class="line">	plpgsql_build_variable(); <span class="comment">// 分配入参的存储，加入变量空间，加入命名空间</span></div><div class="line">    plpgsql_build_variable(<span class="string">"found"</span>... <span class="comment">// 建立以后要用到的found变量</span></div><div class="line"> 	parse_rc = plpgsql_yyparse(); <span class="comment">// 词法、语法解析</span></div><div class="line"> 	<span class="keyword">if</span> (plpgsql_DumpExecTree)</div><div class="line">		plpgsql_dumptree(function);  <span class="comment">// 调试模式:打出编译树</span></div><div class="line">	plpgsql_HashTableInsert(function, hashkey); <span class="comment">// 加到编译缓存里面</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ps：调试模式很有用，可以通过下面方式打开：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CREATE FUNCTION less_than(a text, b text) RETURNS boolean AS $$</div><div class="line"># option dump</div><div class="line">BEGIN</div><div class="line">RETURN a &lt; b;</div><div class="line">END;</div><div class="line">$$ LANGUAGE plpgsql;</div></pre></td></tr></table></figure>
<p>在函数体里面加上# option dump即可。执行会显示出来<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">STATEMENT:  select less_than (1 ,2);</div><div class="line"></div><div class="line">Execution tree of successfully compiled PL/pgSQL function less_than(text,text):</div><div class="line"></div><div class="line">Function's data area:</div><div class="line">    entry 0: VAR $1               type text (typoid 25) atttypmod -1</div><div class="line">    entry 1: VAR $2               type text (typoid 25) atttypmod -1</div><div class="line">    entry 2: VAR found            type bool (typoid 16) atttypmod -1</div><div class="line"></div><div class="line">Function's statements:</div><div class="line">  3:BLOCK &lt;&lt;*unnamed*&gt;&gt;</div><div class="line">  4:  RETURN 'SELECT a &lt; b'</div><div class="line">    END -- *unnamed*</div><div class="line"></div><div class="line">End of execution tree of function less_than(text,text)</div></pre></td></tr></table></figure></p>
<h3 id="语法解析"><a href="#语法解析" class="headerlink" title="语法解析"></a>语法解析</h3><p>postgreSQL 9.5的用户文档<br><a href="https://www.postgresql.org/docs/9.5/static/plpgsql.html" target="_blank" rel="external">https://www.postgresql.org/docs/9.5/static/plpgsql.html</a><br>可以对照用法来看实现<br>一个plsql形如<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[ &lt;&lt;label&gt;&gt; ]         -- [标签，可选]</div><div class="line">[ DECLARE             -- [DELARE开头</div><div class="line">    declarations ]    -- 中间是变量的声明，这部分是可选的]</div><div class="line">BEGIN                 -- BEGIN</div><div class="line">    statements        -- 各语句</div><div class="line">END [ label ];        -- END [标签，可选]</div></pre></td></tr></table></figure></p>
<p>对应到实现<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">pl_block		: decl_sect K_BEGIN proc_sect exception_sect K_END opt_label</div><div class="line">					&#123;</div><div class="line">						PLpgSQL_stmt_block *<span class="keyword">new</span>;</div><div class="line"></div><div class="line">						<span class="keyword">new</span> = palloc0(<span class="keyword">sizeof</span>(PLpgSQL_stmt_block));</div><div class="line">...各种成员填充</div><div class="line">						check_labels($<span class="number">1.l</span>abel, $<span class="number">6</span>, @<span class="number">6</span>);</div><div class="line">						plpgsql_ns_pop();</div><div class="line"></div><div class="line">						$$ = (PLpgSQL_stmt *)<span class="keyword">new</span>;</div><div class="line">					&#125;</div><div class="line">				;</div></pre></td></tr></table></figure></p>
<p>可以看到是按如下顺序解析的</p>
<ol>
<li>decl_sec 声明部分   –重点</li>
<li>prc_sec  语句部分   –重点</li>
<li>exception 异常部分</li>
<li>opt_label 标签部分<br>解析完成之后PLpgSQL_stmt_block强制转为一个PLpgSQL_stmt类型的结构返回，可以认为一个declare…begin…end对应一个PLpgSQL_stmt结构。</li>
</ol>
<h3 id="声明部分解析"><a href="#声明部分解析" class="headerlink" title="声明部分解析"></a>声明部分解析</h3><p>用户声明一个变量语法：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name [ CONSTANT ] type [ COLLATE collation_name ] [ NOT NULL ] [ &#123; DEFAULT | := | = &#125; expression ];</div></pre></td></tr></table></figure></p>
<p>例子：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">quantity integer DEFAULT 32;</div><div class="line">url varchar := 'http://mysite.com';</div><div class="line">user_id CONSTANT integer := 10;</div></pre></td></tr></table></figure></p>
<p>先介绍下面两个全局变量用来存放plsql中的变量<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PLpgSQL_datum **plpgsql_Datums;  <span class="comment">//变量数组</span></div><div class="line"><span class="keyword">int</span>			plpgsql_nDatums;     <span class="comment">//数组长度</span></div></pre></td></tr></table></figure></p>
<p>在pl_gram.y：478解析变量，并加入全局变量数组<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">decl_statement	: decl_varname decl_const decl_datatype decl_collate decl_notnull decl_defval</div><div class="line">		&#123;</div><div class="line">			PLpgSQL_variable	*var;</div><div class="line">...</div><div class="line">			var = plpgsql_build_variable($<span class="number">1.</span>name, $<span class="number">1.l</span>ineno,</div><div class="line">													 $<span class="number">3</span>, <span class="literal">true</span>);</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>对于解析的变量，加到变量数组里面<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function">PLpgSQL_variable *</span></div><div class="line"><span class="title">plpgsql_build_variable</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *refname, <span class="keyword">int</span> lineno, PLpgSQL_type *dtype,</span></div><div class="line">					   <span class="keyword">bool</span> add2namespace)</div><div class="line">&#123;</div><div class="line">	PLpgSQL_variable *result;</div><div class="line"></div><div class="line">	<span class="keyword">switch</span> (dtype-&gt;ttype)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">case</span> PLPGSQL_TTYPE_SCALAR:</div><div class="line">			&#123;</div><div class="line">				<span class="comment">/* Ordinary scalar datatype */</span></div><div class="line">				PLpgSQL_var *var;</div><div class="line">...</div><div class="line">				plpgsql_adddatum((PLpgSQL_datum *) var);</div><div class="line">				<span class="keyword">if</span> (add2namespace)</div><div class="line">					plpgsql_ns_additem(PLPGSQL_NSTYPE_VAR,</div><div class="line">									   var-&gt;dno,</div><div class="line">									   refname);</div><div class="line">				result = (PLpgSQL_variable *) var;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>变量解析重点关注<br>decl_varname    – 变量名解析<br>decl_datatype   – 变量类型解析</p>
<h3 id="语句部分解析"><a href="#语句部分解析" class="headerlink" title="语句部分解析"></a>语句部分解析</h3><p>可以看到如下，是按每个语句规则匹配，不再详细展开了。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">proc_stmt		: pl_block <span class="string">';'</span></div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_assign</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_if</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_case</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_loop</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_while</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_for</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_foreach_a</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_exit</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_return</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_raise</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_assert</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_execsql</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_dynexecute</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_perform</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_getdiag</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_open</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_fetch</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_move</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_close</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				| stmt_null</div><div class="line">						&#123; $$ = $<span class="number">1</span>; &#125;</div><div class="line">				;</div></pre></td></tr></table></figure>
<h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>编译完了之后我们回到plpgsql_call_handler看到接下来要进入这个函数 plpgsql_exec_function来实际执行编译好的语句。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function">Datum</span></div><div class="line"><span class="title">plpgsql_exec_function</span><span class="params">(PLpgSQL_function *func, FunctionCallInfo fcinfo,</span></div><div class="line">					  EState *simple_eval_estate)</div><div class="line">&#123;</div><div class="line"></div><div class="line">	plpgsql_estate_setup();<span class="comment">//填充PLpgSQL_execstate estat结构体，该结构体里面保存了执行状态的基本信息。</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; estate.ndatums; i++)</div><div class="line">		estate.datums[i] = copy_plpgsql_datum(func-&gt;datums[i]); <span class="comment">//注意：这里把func里面的本地变量挨个拷贝到了estate  里面</span></div><div class="line">	...</div><div class="line">	把入参的值赋给对应的本地变量</div><div class="line">    ...</div><div class="line">    rc = exec_stmt_block(&amp;estate, func-&gt;action); <span class="comment">//实际执行阶段</span></div><div class="line">    </div><div class="line">    <span class="comment">// 对返回值进行处理</span></div></pre></td></tr></table></figure>
<p>接下来看看 exec_stmt_block 这个函数</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">exec_stmt_block</span><span class="params">(PLpgSQL_execstate *estate, PLpgSQL_stmt_block *block)</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 先对本地变量进行初始化</span></div><div class="line">    rc = exec_stmts(estate, block-&gt;body); <span class="comment">//执行语句</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">exec_stmts</span><span class="params">(PLpgSQL_execstate *estate, List *stmts)</span></div><div class="line">&#123;</div><div class="line">	ListCell   *s;</div><div class="line"></div><div class="line">	foreach(s, stmts)  <span class="comment">// 遍历每个语句</span></div><div class="line">	&#123;</div><div class="line">		PLpgSQL_stmt *stmt = (PLpgSQL_stmt *) lfirst(s);</div><div class="line">		<span class="keyword">int</span>			rc = exec_stmt(estate, stmt);   <span class="comment">//执行一个单独的语句</span></div><div class="line"></div><div class="line">		<span class="keyword">if</span> (rc != PLPGSQL_RC_OK)</div><div class="line">			<span class="keyword">return</span> rc;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> PLPGSQL_RC_OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>exec_stmt 针对每种类型的语句来实际执行，可以看下列函数的源码，不再赘述。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">exec_stmt</span><span class="params">(PLpgSQL_execstate *estate, PLpgSQL_stmt *stmt)</span></div><div class="line">&#123;</div><div class="line">	PLpgSQL_stmt *save_estmt;</div><div class="line">	<span class="keyword">int</span>			rc = <span class="number">-1</span>;</div><div class="line"></div><div class="line">	save_estmt = estate-&gt;err_stmt;</div><div class="line">	estate-&gt;err_stmt = stmt;</div><div class="line"></div><div class="line">	<span class="comment">/* Let the plugin know that we are about to execute this statement */</span></div><div class="line">	<span class="keyword">if</span> (*plpgsql_plugin_ptr &amp;&amp; (*plpgsql_plugin_ptr)-&gt;stmt_beg)</div><div class="line">		((*plpgsql_plugin_ptr)-&gt;stmt_beg) (estate, stmt);</div><div class="line"></div><div class="line">	CHECK_FOR_INTERRUPTS();</div><div class="line"></div><div class="line">	<span class="keyword">switch</span> ((<span class="keyword">enum</span> PLpgSQL_stmt_types) stmt-&gt;cmd_type)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_BLOCK:</div><div class="line">			rc = exec_stmt_block(estate, (PLpgSQL_stmt_block *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_ASSIGN:</div><div class="line">			rc = exec_stmt_assign(estate, (PLpgSQL_stmt_assign *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_PERFORM:</div><div class="line">			rc = exec_stmt_perform(estate, (PLpgSQL_stmt_perform *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_GETDIAG:</div><div class="line">			rc = exec_stmt_getdiag(estate, (PLpgSQL_stmt_getdiag *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_IF:</div><div class="line">			rc = exec_stmt_if(estate, (PLpgSQL_stmt_if *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_CASE:</div><div class="line">			rc = exec_stmt_case(estate, (PLpgSQL_stmt_case *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_LOOP:</div><div class="line">			rc = exec_stmt_loop(estate, (PLpgSQL_stmt_loop *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_WHILE:</div><div class="line">			rc = exec_stmt_while(estate, (PLpgSQL_stmt_while *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_FORI:</div><div class="line">			rc = exec_stmt_fori(estate, (PLpgSQL_stmt_fori *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_FORS:</div><div class="line">			rc = exec_stmt_fors(estate, (PLpgSQL_stmt_fors *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_FORC:</div><div class="line">			rc = exec_stmt_forc(estate, (PLpgSQL_stmt_forc *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_FOREACH_A:</div><div class="line">			rc = exec_stmt_foreach_a(estate, (PLpgSQL_stmt_foreach_a *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_EXIT:</div><div class="line">			rc = exec_stmt_exit(estate, (PLpgSQL_stmt_exit *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_RETURN:</div><div class="line">			rc = exec_stmt_return(estate, (PLpgSQL_stmt_return *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_RETURN_NEXT:</div><div class="line">			rc = exec_stmt_return_next(estate, (PLpgSQL_stmt_return_next *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_RETURN_QUERY:</div><div class="line">			rc = exec_stmt_return_query(estate, (PLpgSQL_stmt_return_query *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_RAISE:</div><div class="line">			rc = exec_stmt_raise(estate, (PLpgSQL_stmt_raise *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_ASSERT:</div><div class="line">			rc = exec_stmt_assert(estate, (PLpgSQL_stmt_assert *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_EXECSQL:</div><div class="line">			rc = exec_stmt_execsql(estate, (PLpgSQL_stmt_execsql *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_DYNEXECUTE:</div><div class="line">			rc = exec_stmt_dynexecute(estate, (PLpgSQL_stmt_dynexecute *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_DYNFORS:</div><div class="line">			rc = exec_stmt_dynfors(estate, (PLpgSQL_stmt_dynfors *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_OPEN:</div><div class="line">			rc = exec_stmt_open(estate, (PLpgSQL_stmt_open *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_FETCH:</div><div class="line">			rc = exec_stmt_fetch(estate, (PLpgSQL_stmt_fetch *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> PLPGSQL_STMT_CLOSE:</div><div class="line">			rc = exec_stmt_close(estate, (PLpgSQL_stmt_close *) stmt);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			estate-&gt;err_stmt = save_estmt;</div><div class="line">			elog(ERROR, <span class="string">"unrecognized cmdtype: %d"</span>, stmt-&gt;cmd_type);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* Let the plugin know that we have finished executing this statement */</span></div><div class="line">	<span class="keyword">if</span> (*plpgsql_plugin_ptr &amp;&amp; (*plpgsql_plugin_ptr)-&gt;stmt_end)</div><div class="line">		((*plpgsql_plugin_ptr)-&gt;stmt_end) (estate, stmt);</div><div class="line"></div><div class="line">	estate-&gt;err_stmt = save_estmt;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> rc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL逻辑备份还原]]></title>
      <url>http://shenyu.wiki/2017/01/12/PostgreSQL%E9%80%BB%E8%BE%91%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/</url>
      <content type="html"><![CDATA[<h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><h2 id="pg-dump"><a href="#pg-dump" class="headerlink" title="pg_dump"></a>pg_dump</h2><ol>
<li>pg_dump 参数解析</li>
<li>pg_dump 基本流程</li>
<li>pg_dump 中的事务</li>
</ol>
<h2 id="pg-restore"><a href="#pg-restore" class="headerlink" title="pg_restore"></a>pg_restore</h2><ol>
<li>pg_restore 参数解析</li>
<li>pg_restore 基本流程</li>
<li>pg_restore 中的事务</li>
</ol>
<h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><ol>
<li>时间紧迫的情况下如何尽快会恢复</li>
<li>并行备份/恢复</li>
<li>其他的备份方式</li>
<li>思考</li>
<li>FAQ</li>
</ol>
<a id="more"></a>
<h1 id="什么是逻辑-Logical-备份还原"><a href="#什么是逻辑-Logical-备份还原" class="headerlink" title="什么是逻辑(Logical)备份还原"></a>什么是逻辑(Logical)备份还原</h1><h2 id="逻辑备份"><a href="#逻辑备份" class="headerlink" title="逻辑备份"></a>逻辑备份</h2><p>逻辑备份是在联机状态下通过读取数据库中用户创建的数据对象信息，通过SQL方式，从数据库中抽取出各个对象的定义和数据信息到备份文件中。</p>
<h2 id="逻辑还原"><a href="#逻辑还原" class="headerlink" title="逻辑还原"></a>逻辑还原</h2><p>逻辑还原是通过执行备份文件中SQL语句，重建数据库对象。</p>
<h1 id="pg-dump-参数解析"><a href="#pg-dump-参数解析" class="headerlink" title="pg_dump 参数解析"></a>pg_dump 参数解析</h1><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./pg_dump --help</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">pg_dump dumps a database as a text file or to other formats.</div><div class="line"></div><div class="line">Usage:</div><div class="line">  pg_dump [OPTION]... [DBNAME]</div><div class="line"></div><div class="line">General options:</div><div class="line">  -f, --file=FILENAME          output file or directory name</div><div class="line">  -F, --format=c|d|t|p         output file format (custom, directory, tar,</div><div class="line">                               plain text (default))</div><div class="line">  -j, --jobs=NUM               use this many parallel jobs to dump</div><div class="line">  -v, --verbose                verbose mode</div><div class="line">  -V, --version                output version information, then exit</div><div class="line">  -Z, --compress=0-9           compression level for compressed formats</div><div class="line">  --lock-wait-timeout=TIMEOUT  fail after waiting TIMEOUT for a table lock</div><div class="line">  -?, --help                   show this help, then exit</div><div class="line"></div><div class="line">Options controlling the output content:</div><div class="line">  -a, --data-only              dump only the data, not the schema</div><div class="line">  -b, --blobs                  include large objects in dump</div><div class="line">  -B, --no-blobs               exclude large objects in dump</div><div class="line">  -c, --clean                  clean (drop) database objects before recreating</div><div class="line">  -C, --create                 include commands to create database in dump</div><div class="line">  -E, --encoding=ENCODING      dump the data in encoding ENCODING</div><div class="line">  -n, --schema=SCHEMA          dump the named schema(s) only</div><div class="line">  -N, --exclude-schema=SCHEMA  do NOT dump the named schema(s)</div><div class="line">  -o, --oids                   include OIDs in dump</div><div class="line">  -O, --no-owner               skip restoration of object ownership in</div><div class="line">                               plain-text format</div><div class="line">  -s, --schema-only            dump only the schema, no data</div><div class="line">  -S, --superuser=NAME         superuser user name to use in plain-text format</div><div class="line">  -t, --table=TABLE            dump the named table(s) only</div><div class="line">  -T, --exclude-table=TABLE    do NOT dump the named table(s)</div><div class="line">  -x, --no-privileges          do not dump privileges (grant/revoke)</div><div class="line">  --binary-upgrade             for use by upgrade utilities only</div><div class="line">  --column-inserts             dump data as INSERT commands with column names</div><div class="line">  --disable-dollar-quoting     disable dollar quoting, use SQL standard quoting</div><div class="line">  --disable-triggers           disable triggers during data-only restore</div><div class="line">  --enable-row-security        enable row security (dump only content user has</div><div class="line">                               access to)</div><div class="line">  --exclude-table-data=TABLE   do NOT dump data for the named table(s)</div><div class="line">  --if-exists                  use IF EXISTS when dropping objects</div><div class="line">  --inserts                    dump data as INSERT commands, rather than COPY</div><div class="line">  --no-security-labels         do not dump security label assignments</div><div class="line">  --no-synchronized-snapshots  do not use synchronized snapshots in parallel jobs</div><div class="line">  --no-tablespaces             do not dump tablespace assignments</div><div class="line">  --no-unlogged-table-data     do not dump unlogged table data</div><div class="line">  --quote-all-identifiers      quote all identifiers, even if not key words</div><div class="line">  --section=SECTION            dump named section (pre-data, data, or post-data)</div><div class="line">  --serializable-deferrable    wait until the dump can run without anomalies</div><div class="line">  --snapshot=SNAPSHOT          use given snapshot for the dump</div><div class="line">  --strict-names               require table and/or schema include patterns to</div><div class="line">                               match at least one entity each</div><div class="line">  --use-set-session-authorization</div><div class="line">                               use SET SESSION AUTHORIZATION commands instead of</div><div class="line">                               ALTER OWNER commands to set ownership</div><div class="line"></div><div class="line">Connection options:</div><div class="line">  -d, --dbname=DBNAME      database to dump</div><div class="line">  -h, --host=HOSTNAME      database server host or socket directory</div><div class="line">  -p, --port=PORT          database server port number</div><div class="line">  -U, --username=NAME      connect as specified database user</div><div class="line">  -w, --no-password        never prompt for password</div><div class="line">  -W, --password           force password prompt (should happen automatically)</div><div class="line">  --role=ROLENAME          do SET ROLE before dump</div><div class="line"></div><div class="line">If no database name is supplied, then the PGDATABASE environment</div><div class="line">variable value is used.</div><div class="line"></div><div class="line">Report bugs to &lt;pgsql-bugs@postgresql.org&gt;.</div></pre></td></tr></table></figure>
<h2 id="备份为sql形式"><a href="#备份为sql形式" class="headerlink" title="备份为sql形式"></a>备份为sql形式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">默认是备份为sql的形式，输出为stdout，可以把输出指向另一个postgres实例来实现数据库迁移。这样实现类似远程同步的功能。</div><div class="line">                              pg_dump</div><div class="line">postgres1  ------------------------------------------&gt; postgres2</div><div class="line">$ ./pg_dump -hlocalhost -p5432  postgres</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">$ ./pg_dump -hlocalhost -p5432  postgres</div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- PostgreSQL database dump</span></div><div class="line"><span class="comment">--</span></div><div class="line"></div><div class="line"><span class="comment">-- Dumped from database version 10devel</span></div><div class="line"><span class="comment">-- Dumped by pg_dump version 10devel</span></div><div class="line"></div><div class="line"><span class="keyword">SET</span> statement_timeout = <span class="number">0</span>;</div><div class="line"><span class="keyword">SET</span> lock_timeout = <span class="number">0</span>;</div><div class="line"><span class="keyword">SET</span> idle_in_transaction_session_timeout = <span class="number">0</span>;</div><div class="line"><span class="keyword">SET</span> client_encoding = <span class="string">'UTF8'</span>;</div><div class="line"><span class="keyword">SET</span> standard_conforming_strings = <span class="keyword">on</span>;</div><div class="line"><span class="keyword">SET</span> check_function_bodies = <span class="literal">false</span>;</div><div class="line"><span class="keyword">SET</span> client_min_messages = <span class="keyword">warning</span>;</div><div class="line"><span class="keyword">SET</span> row_security = <span class="keyword">off</span>;</div><div class="line"></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- Name: postgres; Type: COMMENT; Schema: -; Owner: yshen</span></div><div class="line"><span class="comment">--</span></div><div class="line"></div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">DATABASE</span> postgres <span class="keyword">IS</span> <span class="string">'default administrative connection database'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: </span></div><div class="line"><span class="comment">--</span></div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> EXTENSION <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> plpgsql <span class="keyword">WITH</span> <span class="keyword">SCHEMA</span> pg_catalog;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: </span></div><div class="line"><span class="comment">--</span></div><div class="line"></div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> EXTENSION plpgsql <span class="keyword">IS</span> <span class="string">'PL/pgSQL procedural language'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">SET</span> search_path = <span class="keyword">public</span>, pg_catalog;</div><div class="line"></div><div class="line"><span class="keyword">SET</span> default_tablespace = <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="keyword">SET</span> default_with_oids = <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- Name: tb1; Type: TABLE; Schema: public; Owner: yshen</span></div><div class="line"><span class="comment">--</span></div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb1 (</div><div class="line">    a <span class="built_in">integer</span></div><div class="line">);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb1 OWNER <span class="keyword">TO</span> yshen;</div><div class="line"></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- Name: tb2; Type: TABLE; Schema: public; Owner: yshen</span></div><div class="line"><span class="comment">--</span></div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb2 (</div><div class="line">    a <span class="built_in">integer</span></div><div class="line">);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb2 OWNER <span class="keyword">TO</span> yshen;</div><div class="line"></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- Data for Name: tb1; Type: TABLE DATA; Schema: public; Owner: yshen</span></div><div class="line"><span class="comment">--</span></div><div class="line"></div><div class="line">COPY tb1 (a) FROM stdin;</div><div class="line">1</div><div class="line">2</div><div class="line">\.</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- Data for Name: tb2; Type: TABLE DATA; Schema: public; Owner: yshen</span></div><div class="line"><span class="comment">--</span></div><div class="line"></div><div class="line">COPY tb2 (a) FROM stdin;</div><div class="line">1</div><div class="line">2</div><div class="line">\.</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">-- PostgreSQL database dump complete</span></div><div class="line"><span class="comment">--</span></div></pre></td></tr></table></figure>
<h2 id="备份为二进制形式"><a href="#备份为二进制形式" class="headerlink" title="备份为二进制形式"></a>备份为二进制形式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./pg_dump -Fc -f dump.dmp  postgres</div></pre></td></tr></table></figure>
<p>备份为二进制，那么还原的时候就可以很方便的指定还原选项，比如说只还原某个表。<br>另外也可以把二进制格式用pg_restore导出为sql格式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">              pg_dump                    pg_restore</div><div class="line">postgres1--------------------&gt; custom--------------------&gt;postgres2</div></pre></td></tr></table></figure></p>
<h1 id="pg-dump基本流程"><a href="#pg-dump基本流程" class="headerlink" title="pg_dump基本流程"></a>pg_dump基本流程</h1><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><ol>
<li>收集备份对象信息（查询系统表）</li>
<li>拓扑排序</li>
<li>输出（拼接定义，生成toc_entry）</li>
</ol>
<h2 id="基本流程-1"><a href="#基本流程-1" class="headerlink" title="基本流程"></a>基本流程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">根据备份类型（二进制-F c 即custom|文本-F p 即plain text）来初始化ArchiveHandle结果保存在g_fout全局变量里</div><div class="line">调用ConnectDatabase连接数据库，把结果保存在g_conn全局变量中</div><div class="line">调用setup_connection来设置很多的连接参数，比如编码等等</div><div class="line">BEGIN</div><div class="line">SET TRANSACTION ISOLATION LEVEL SERIALIZABLE</div><div class="line">	获取备份对象的属性 getXXX相关函数</div><div class="line">	对表加锁: LOCK TABLE &quot;PUBLIC&quot;.&quot;TB1&quot; IN ACCESS SHARE MODE （备份过程中不能drop）</div><div class="line">    依赖关系拓扑排序</div><div class="line">    获取对象数据并输出：COPY &quot;PUBLIC&quot;.&quot;TB1&quot; (&quot;VALUE&quot;)  TO stdout;  dumpXXX相关函数</div><div class="line">COMIT</div></pre></td></tr></table></figure>
<h2 id="pg-dump的log"><a href="#pg-dump的log" class="headerlink" title="pg_dump的log"></a>pg_dump的log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./pg_dump -hlocalhost -p5432 --verbose  -Fc  -f ./dmp.dmp  postgres</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">pg_dump: last built-in OID is 16383</div><div class="line">pg_dump: reading extensions</div><div class="line">pg_dump: identifying extension members</div><div class="line">pg_dump: reading schemas</div><div class="line">pg_dump: reading user-defined tables</div><div class="line">pg_dump: reading user-defined functions</div><div class="line">pg_dump: reading user-defined types</div><div class="line">pg_dump: reading procedural languages</div><div class="line">pg_dump: reading user-defined aggregate functions</div><div class="line">pg_dump: reading user-defined operators</div><div class="line">pg_dump: reading user-defined access methods</div><div class="line">pg_dump: reading user-defined operator classes</div><div class="line">pg_dump: reading user-defined operator families</div><div class="line">pg_dump: reading user-defined text search parsers</div><div class="line">pg_dump: reading user-defined text search templates</div><div class="line">pg_dump: reading user-defined text search dictionaries</div><div class="line">pg_dump: reading user-defined text search configurations</div><div class="line">pg_dump: reading user-defined foreign-data wrappers</div><div class="line">pg_dump: reading user-defined foreign servers</div><div class="line">pg_dump: reading default privileges</div><div class="line">pg_dump: reading user-defined collations</div><div class="line">pg_dump: reading user-defined conversions</div><div class="line">pg_dump: reading type casts</div><div class="line">pg_dump: reading transforms</div><div class="line">pg_dump: reading table inheritance information</div><div class="line">pg_dump: reading partition information</div><div class="line">pg_dump: reading event triggers</div><div class="line">pg_dump: finding extension tables</div><div class="line">pg_dump: finding inheritance relationships</div><div class="line">pg_dump: finding partition relationships</div><div class="line">pg_dump: reading column info for interesting tables</div><div class="line">pg_dump: finding the columns and types of table &quot;public.tb1&quot;</div><div class="line">pg_dump: finding the columns and types of table &quot;public.tb2&quot;</div><div class="line">pg_dump: flagging inherited columns in subtables</div><div class="line">pg_dump: reading indexes</div><div class="line">pg_dump: reading constraints</div><div class="line">pg_dump: reading triggers</div><div class="line">pg_dump: reading rewrite rules</div><div class="line">pg_dump: reading policies</div><div class="line">pg_dump: reading row security enabled for table &quot;public.tb1&quot;</div><div class="line">pg_dump: reading policies for table &quot;public.tb1&quot;</div><div class="line">pg_dump: reading row security enabled for table &quot;public.tb2&quot;</div><div class="line">pg_dump: reading policies for table &quot;public.tb2&quot;</div><div class="line">pg_dump: reading partition key information for interesting tables</div><div class="line">pg_dump: reading large objects</div><div class="line">pg_dump: reading dependency data</div><div class="line">pg_dump: saving encoding = UTF8</div><div class="line">pg_dump: saving standard_conforming_strings = on</div><div class="line">pg_dump: saving database definition</div><div class="line">pg_dump: dumping contents of table &quot;public.tb1&quot;</div><div class="line">pg_dump: dumping contents of table &quot;public.tb2&quot;</div></pre></td></tr></table></figure>
<h2 id="备份过程中数据库端的log"><a href="#备份过程中数据库端的log" class="headerlink" title="备份过程中数据库端的log"></a>备份过程中数据库端的log</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--进行了一些基本的设置</span></div><div class="line">LOG:  statement: <span class="keyword">SELECT</span> pg_catalog.pg_is_in_recovery()</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> DATESTYLE = ISO</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> INTERVALSTYLE = POSTGRES</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> extra_float_digits <span class="keyword">TO</span> <span class="number">3</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> synchronize_seqscans <span class="keyword">TO</span> <span class="keyword">off</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> statement_timeout = <span class="number">0</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> lock_timeout = <span class="number">0</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> idle_in_transaction_session_timeout = <span class="number">0</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> row_security = <span class="keyword">off</span></div><div class="line"><span class="comment">--开启一个事物</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> REPEATABLE <span class="keyword">READ</span>, <span class="keyword">READ</span> <span class="keyword">ONLY</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="comment">--开始获取备份对象信息，对应的是pg_dump中的getXXX系列函数</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> x.tableoid, x.oid, x.extname, n.nspname, x.extrelocatable, x.extversion, x.extconfig, x.extcondition <span class="keyword">FROM</span> pg_extension x <span class="keyword">JOIN</span> pg_namespace n <span class="keyword">ON</span> n.oid = x.extnamespace</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> classid, objid, refobjid <span class="keyword">FROM</span> pg_depend <span class="keyword">WHERE</span> refclassid = <span class="string">'pg_extension'</span>::regclass <span class="keyword">AND</span> deptype = <span class="string">'e'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">3</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> n.tableoid, n.oid, n.nspname, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = nspowner) <span class="keyword">AS</span> rolname, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(n.nspacl,pg_catalog.acldefault(<span class="string">'n'</span>,n.nspowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'n'</span>,n.nspowner)))) <span class="keyword">as</span> foo) <span class="keyword">as</span> nspacl, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'n'</span>,n.nspowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(n.nspacl,pg_catalog.acldefault(<span class="string">'n'</span>,n.nspowner)))) <span class="keyword">as</span> foo) <span class="keyword">as</span> rnspacl, <span class="literal">NULL</span> <span class="keyword">as</span> initnspacl, <span class="literal">NULL</span> <span class="keyword">as</span> initrnspacl <span class="keyword">FROM</span> pg_namespace n <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_init_privs pip <span class="keyword">ON</span> (n.oid = pip.objoid <span class="keyword">AND</span> pip.classoid = <span class="string">'pg_namespace'</span>::regclass <span class="keyword">AND</span> pip.objsubid = <span class="number">0</span>) </div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> c.tableoid, c.oid, c.relname, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(c.relacl,pg_catalog.acldefault(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> c.relkind = <span class="string">'S'</span> <span class="keyword">THEN</span> <span class="string">'s'</span> <span class="keyword">ELSE</span> <span class="string">'r'</span> <span class="keyword">END</span>::<span class="string">"char"</span>,c.relowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> c.relkind = <span class="string">'S'</span> <span class="keyword">THEN</span> <span class="string">'s'</span> <span class="keyword">ELSE</span> <span class="string">'r'</span> <span class="keyword">END</span>::<span class="string">"char"</span>,c.relowner)))) <span class="keyword">as</span> foo) <span class="keyword">AS</span> relacl, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> c.relkind = <span class="string">'S'</span> <span class="keyword">THEN</span> <span class="string">'s'</span> <span class="keyword">ELSE</span> <span class="string">'r'</span> <span class="keyword">END</span>::<span class="string">"char"</span>,c.relowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(c.relacl,pg_catalog.acldefault(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> c.relkind = <span class="string">'S'</span> <span class="keyword">THEN</span> <span class="string">'s'</span> <span class="keyword">ELSE</span> <span class="string">'r'</span> <span class="keyword">END</span>::<span class="string">"char"</span>,c.relowner)))) <span class="keyword">as</span> foo) <span class="keyword">as</span> rrelacl, <span class="literal">NULL</span> <span class="keyword">AS</span> initrelacl, <span class="literal">NULL</span> <span class="keyword">as</span> initrrelacl, c.relkind, c.relnamespace, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = c.relowner) <span class="keyword">AS</span> rolname, c.relchecks, c.relhastriggers, c.relhasindex, c.relhasrules, c.relhasoids, c.relrowsecurity, c.relforcerowsecurity, c.relfrozenxid, c.relminmxid, tc.oid <span class="keyword">AS</span> toid, tc.relfrozenxid <span class="keyword">AS</span> tfrozenxid, tc.relminmxid <span class="keyword">AS</span> tminmxid, c.relpersistence, c.relispopulated, c.relreplident, c.relpages, <span class="keyword">CASE</span> <span class="keyword">WHEN</span> c.reloftype &lt;&gt; <span class="number">0</span> <span class="keyword">THEN</span> c.reloftype::pg_catalog.regtype <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span> <span class="keyword">AS</span> reloftype, d.refobjid <span class="keyword">AS</span> owning_tab, d.refobjsubid <span class="keyword">AS</span> owning_col, (<span class="keyword">SELECT</span> spcname <span class="keyword">FROM</span> pg_tablespace t <span class="keyword">WHERE</span> t.oid = c.reltablespace) <span class="keyword">AS</span> reltablespace, array_remove(array_remove(c.reloptions,<span class="string">'check_option=local'</span>),<span class="string">'check_option=cascaded'</span>) <span class="keyword">AS</span> reloptions, <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="string">'check_option=local'</span> = <span class="keyword">ANY</span> (c.reloptions) <span class="keyword">THEN</span> <span class="string">'LOCAL'</span>::<span class="built_in">text</span> <span class="keyword">WHEN</span> <span class="string">'check_option=cascaded'</span> = <span class="keyword">ANY</span> (c.reloptions) <span class="keyword">THEN</span> <span class="string">'CASCADED'</span>::<span class="built_in">text</span> <span class="keyword">ELSE</span> <span class="literal">NULL</span> <span class="keyword">END</span> <span class="keyword">AS</span> checkoption, tc.reloptions <span class="keyword">AS</span> toast_reloptions, <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> pg_attribute <span class="keyword">at</span> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_init_privs pip <span class="keyword">ON</span> (c.oid = pip.objoid <span class="keyword">AND</span> pip.classoid = <span class="string">'pg_class'</span>::regclass <span class="keyword">AND</span> pip.objsubid = at.attnum)<span class="keyword">WHERE</span> at.attrelid = c.oid <span class="keyword">AND</span> ((<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(at.attacl,pg_catalog.acldefault(<span class="string">'c'</span>,c.relowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'c'</span>,c.relowner)))) <span class="keyword">as</span> foo) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">OR</span> (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'c'</span>,c.relowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(at.attacl,pg_catalog.acldefault(<span class="string">'c'</span>,c.relowner)))) <span class="keyword">as</span> foo) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">OR</span> <span class="literal">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">OR</span> <span class="literal">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>))<span class="keyword">AS</span> changed_acl <span class="keyword">FROM</span> pg_class c <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_depend d <span class="keyword">ON</span> (c.relkind = <span class="string">'S'</span> <span class="keyword">AND</span> d.classid = c.tableoid <span class="keyword">AND</span> d.objid = c.oid <span class="keyword">AND</span> d.objsubid = <span class="number">0</span> <span class="keyword">AND</span> d.refclassid = c.tableoid <span class="keyword">AND</span> d.deptype = <span class="string">'a'</span>) <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_class tc <span class="keyword">ON</span> (c.reltoastrelid = tc.oid) <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_init_privs pip <span class="keyword">ON</span> (c.oid = pip.objoid <span class="keyword">AND</span> pip.classoid = <span class="string">'pg_class'</span>::regclass <span class="keyword">AND</span> pip.objsubid = <span class="number">0</span>) <span class="keyword">WHERE</span> c.relkind <span class="keyword">in</span> (<span class="string">'r'</span>, <span class="string">'S'</span>, <span class="string">'v'</span>, <span class="string">'c'</span>, <span class="string">'m'</span>, <span class="string">'f'</span>, <span class="string">'P'</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> c.oid</div><div class="line"><span class="comment">--对表加ACESS SHARE锁，防止在备份的时候drop，alter等操作</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">LOCK</span> <span class="keyword">TABLE</span> public.tb1 <span class="keyword">IN</span> <span class="keyword">ACCESS</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">LOCK</span> <span class="keyword">TABLE</span> public.tb2 <span class="keyword">IN</span> <span class="keyword">ACCESS</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> p.tableoid, p.oid, p.proname, p.prolang, p.pronargs, p.proargtypes, p.prorettype, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(p.proacl,pg_catalog.acldefault(<span class="string">'f'</span>,p.proowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'f'</span>,p.proowner)))) <span class="keyword">as</span> foo) <span class="keyword">AS</span> proacl, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'f'</span>,p.proowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(p.proacl,pg_catalog.acldefault(<span class="string">'f'</span>,p.proowner)))) <span class="keyword">as</span> foo) <span class="keyword">AS</span> rproacl, <span class="literal">NULL</span> <span class="keyword">AS</span> initproacl, <span class="literal">NULL</span> <span class="keyword">AS</span> initrproacl, p.pronamespace, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = p.proowner) <span class="keyword">AS</span> rolname <span class="keyword">FROM</span> pg_proc p <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_init_privs pip <span class="keyword">ON</span> (p.oid = pip.objoid <span class="keyword">AND</span> pip.classoid = <span class="string">'pg_proc'</span>::regclass <span class="keyword">AND</span> pip.objsubid = <span class="number">0</span>) <span class="keyword">WHERE</span> <span class="keyword">NOT</span> proisagg</div><div class="line">depend <span class="keyword">WHERE</span> classid = <span class="string">'pg_proc'</span>::regclass <span class="keyword">AND</span> objid = p.oid <span class="keyword">AND</span> deptype = <span class="string">'i'</span>)</div><div class="line">pg_namespace <span class="keyword">WHERE</span> nspname = <span class="string">'pg_catalog'</span>)<span class="keyword">form</span> D )initprivs)</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> t.tableoid, t.oid, t.typname, t.typnamespace, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(t.typacl,pg_catalog.acldefault(<span class="string">'T'</span>,t.typowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'T'</span>,t.typowner)))) <span class="keyword">as</span> foo) <span class="keyword">AS</span> typacl, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'T'</span>,t.typowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(t.typacl,pg_catalog.acldefault(<span class="string">'T'</span>,t.typowner)))) <span class="keyword">as</span> foo) <span class="keyword">AS</span> rtypacl, <span class="literal">NULL</span> <span class="keyword">AS</span> inittypacl, <span class="literal">NULL</span> <span class="keyword">AS</span> initrtypacl, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = t.typowner) <span class="keyword">AS</span> rolname, t.typelem, t.typrelid, <span class="keyword">CASE</span> <span class="keyword">WHEN</span> t.typrelid = <span class="number">0</span> <span class="keyword">THEN</span> <span class="string">' '</span>::<span class="string">"char"</span> <span class="keyword">ELSE</span> (<span class="keyword">SELECT</span> relkind <span class="keyword">FROM</span> pg_class <span class="keyword">WHERE</span> <span class="keyword">oid</span> = t.typrelid) <span class="keyword">END</span> <span class="keyword">AS</span> typrelkind, t.typtype, t.typisdefined, t.typname[<span class="number">0</span>] = <span class="string">'_'</span> <span class="keyword">AND</span> t.typelem != <span class="number">0</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> typarray <span class="keyword">FROM</span> pg_type te <span class="keyword">WHERE</span> <span class="keyword">oid</span> = t.typelem) = t.oid <span class="keyword">AS</span> isarray <span class="keyword">FROM</span> pg_type t <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_init_privs pip <span class="keyword">ON</span> (t.oid = pip.objoid <span class="keyword">AND</span> pip.classoid = <span class="string">'pg_type'</span>::regclass <span class="keyword">AND</span> pip.objsubid = <span class="number">0</span>) </div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> l.tableoid, l.oid, l.lanname, l.lanpltrusted, l.lanplcallfoid, l.laninline, l.lanvalidator, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(l.lanacl,pg_catalog.acldefault(<span class="string">'l'</span>,l.lanowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'l'</span>,l.lanowner)))) <span class="keyword">as</span> foo) <span class="keyword">AS</span> lanacl, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'l'</span>,l.lanowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(l.lanacl,pg_catalog.acldefault(<span class="string">'l'</span>,l.lanowner)))) <span class="keyword">as</span> foo) <span class="keyword">AS</span> rlanacl, <span class="literal">NULL</span> <span class="keyword">AS</span> initlanacl, <span class="literal">NULL</span> <span class="keyword">AS</span> initrlanacl, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = l.lanowner) <span class="keyword">AS</span> lanowner <span class="keyword">FROM</span> pg_language l <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_init_privs pip <span class="keyword">ON</span> (l.oid = pip.objoid <span class="keyword">AND</span> pip.classoid = <span class="string">'pg_type'</span>::regclass <span class="keyword">AND</span> pip.objsubid = <span class="number">0</span>) <span class="keyword">WHERE</span> l.lanispl <span class="keyword">ORDER</span> <span class="keyword">BY</span> l.oid</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> p.tableoid, p.oid, p.proname <span class="keyword">AS</span> aggname, p.pronamespace <span class="keyword">AS</span> aggnamespace, p.pronargs, p.proargtypes, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = p.proowner) <span class="keyword">AS</span> rolname, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(p.proacl,pg_catalog.acldefault(<span class="string">'f'</span>,p.proowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'f'</span>,p.proowner)))) <span class="keyword">as</span> foo) <span class="keyword">AS</span> aggacl, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'f'</span>,p.proowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(p.proacl,pg_catalog.acldefault(<span class="string">'f'</span>,p.proowner)))) <span class="keyword">as</span> foo) <span class="keyword">AS</span> raggacl, <span class="literal">NULL</span> <span class="keyword">AS</span> initaggacl, <span class="literal">NULL</span> <span class="keyword">AS</span> initraggacl <span class="keyword">FROM</span> pg_proc p <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_init_privs pip <span class="keyword">ON</span> (p.oid = pip.objoid <span class="keyword">AND</span> pip.classoid = <span class="string">'pg_proc'</span>::regclass <span class="keyword">AND</span> pip.objsubid = <span class="number">0</span>) <span class="keyword">WHERE</span> p.proisagg <span class="keyword">AND</span> (p.pronamespace != (<span class="keyword">SELECT</span> <span class="keyword">oid</span> <span class="keyword">FROM</span> pg_namespace <span class="keyword">WHERE</span> nspname = <span class="string">'pg_catalog'</span>) <span class="keyword">OR</span> p.proacl <span class="keyword">IS</span> <span class="keyword">DISTINCT</span> <span class="keyword">FROM</span> pip.initprivs)</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, oprname, oprnamespace, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = oprowner) <span class="keyword">AS</span> rolname, oprkind, oprcode::<span class="keyword">oid</span> <span class="keyword">AS</span> oprcode <span class="keyword">FROM</span> pg_operator</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, amname, amtype, amhandler::pg_catalog.regproc <span class="keyword">AS</span> amhandler <span class="keyword">FROM</span> pg_am</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, opcname, opcnamespace, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = opcowner) <span class="keyword">AS</span> rolname <span class="keyword">FROM</span> pg_opclass</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, opfname, opfnamespace, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = opfowner) <span class="keyword">AS</span> rolname <span class="keyword">FROM</span> pg_opfamily</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, prsname, prsnamespace, prsstart::<span class="keyword">oid</span>, prstoken::<span class="keyword">oid</span>, prsend::<span class="keyword">oid</span>, prsheadline::<span class="keyword">oid</span>, prslextype::<span class="keyword">oid</span> <span class="keyword">FROM</span> pg_ts_parser</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, tmplname, tmplnamespace, tmplinit::<span class="keyword">oid</span>, tmpllexize::<span class="keyword">oid</span> <span class="keyword">FROM</span> pg_ts_template</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, dictname, dictnamespace, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = dictowner) <span class="keyword">AS</span> rolname, dicttemplate, dictinitoption <span class="keyword">FROM</span> pg_ts_dict</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, cfgname, cfgnamespace, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = cfgowner) <span class="keyword">AS</span> rolname, cfgparser <span class="keyword">FROM</span> pg_ts_config</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> f.tableoid, f.oid, f.fdwname, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = f.fdwowner) <span class="keyword">AS</span> rolname, f.fdwhandler::pg_catalog.regproc, f.fdwvalidator::pg_catalog.regproc, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(f.fdwacl,pg_catalog.acldefault(<span class="string">'F'</span>,f.fdwowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'F'</span>,f.fdwowner)))) <span class="keyword">as</span> foo) <span class="keyword">AS</span> fdwacl, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'F'</span>,f.fdwowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(f.fdwacl,pg_catalog.acldefault(<span class="string">'F'</span>,f.fdwowner)))) <span class="keyword">as</span> foo) <span class="keyword">AS</span> rfdwacl, <span class="literal">NULL</span> <span class="keyword">AS</span> initfdwacl, <span class="literal">NULL</span> <span class="keyword">AS</span> initrfdwacl, array_to_string(<span class="built_in">ARRAY</span>(<span class="keyword">SELECT</span> quote_ident(option_name) || <span class="string">' '</span> || quote_literal(option_value) <span class="keyword">FROM</span> pg_options_to_table(f.fdwoptions) <span class="keyword">ORDER</span> <span class="keyword">BY</span> option_name), E<span class="string">',</span></div><div class="line">n_data_wrapper f LEFT JOIN pg_init_privs pip ON (f.oid = pip.objoid AND pip.classoid = 'pg_foreign_data_wrapper<span class="string">'::regclass AND pip.objsubid = 0) </span></div><div class="line">LOG:  statement: SET search_path = pg_catalog</div><div class="line">LOG:  statement: SELECT f.tableoid, f.oid, f.srvname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = f.srvowner) AS rolname, f.srvfdw, f.srvtype, f.srvversion, (SELECT pg_catalog.array_agg(acl) FROM (SELECT pg_catalog.unnest(coalesce(f.srvacl,pg_catalog.acldefault('S<span class="string">',f.srvowner))) AS acl EXCEPT SELECT pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('</span>S<span class="string">',f.srvowner)))) as foo) AS srvacl, (SELECT pg_catalog.array_agg(acl) FROM (SELECT pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('</span>S<span class="string">',f.srvowner))) AS acl EXCEPT SELECT pg_catalog.unnest(coalesce(f.srvacl,pg_catalog.acldefault('</span>S<span class="string">',f.srvowner)))) as foo) AS rsrvacl, NULL AS initsrvacl, NULL AS initrsrvacl, array_to_string(ARRAY(SELECT quote_ident(option_name) || '</span> <span class="string">' || quote_literal(option_value) FROM pg_options_to_table(f.srvoptions) ORDER BY option_name), E'</span>,</div><div class="line">n_server f <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_init_privs pip <span class="keyword">ON</span> (f.oid = pip.objoid <span class="keyword">AND</span> pip.classoid = <span class="string">'pg_foreign_server'</span>::regclass <span class="keyword">AND</span> pip.objsubid = <span class="number">0</span>) </div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> <span class="keyword">oid</span>, tableoid, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = defaclrole) <span class="keyword">AS</span> defaclrole, defaclnamespace, defaclobjtype, defaclacl <span class="keyword">FROM</span> pg_default_acl</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, collname, collnamespace, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = collowner) <span class="keyword">AS</span> rolname <span class="keyword">FROM</span> pg_collation</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, conname, connamespace, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = conowner) <span class="keyword">AS</span> rolname <span class="keyword">FROM</span> pg_conversion</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, castsource, casttarget, castfunc, castcontext, castmethod <span class="keyword">FROM</span> pg_cast <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">3</span>,<span class="number">4</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, trftype, trflang, trffromsql::<span class="keyword">oid</span>, trftosql::<span class="keyword">oid</span> <span class="keyword">FROM</span> pg_transform <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">3</span>,<span class="number">4</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> inhrelid, inhparent <span class="keyword">FROM</span> pg_inherits <span class="keyword">WHERE</span> inhparent <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">oid</span> <span class="keyword">FROM</span> pg_class <span class="keyword">WHERE</span> relkind = <span class="string">'P'</span>)</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> inhrelid <span class="keyword">as</span> partrelid, inhparent <span class="keyword">AS</span> partparent,		 pg_get_expr(relpartbound, inhrelid) <span class="keyword">AS</span> partbound <span class="keyword">FROM</span> pg_class c, pg_inherits <span class="keyword">WHERE</span> c.oid = inhrelid <span class="keyword">AND</span> c.relispartition</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> e.tableoid, e.oid, evtname, evtenabled, evtevent, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = evtowner) <span class="keyword">AS</span> evtowner, array_to_string(<span class="built_in">array</span>(<span class="keyword">select</span> quote_literal(x)  <span class="keyword">from</span> unnest(evttags) <span class="keyword">as</span> t(x)), <span class="string">', '</span>) <span class="keyword">as</span> evttags, e.evtfoid::regproc <span class="keyword">as</span> evtfname <span class="keyword">FROM</span> pg_event_trigger e <span class="keyword">ORDER</span> <span class="keyword">BY</span> e.oid</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> conrelid, confrelid <span class="keyword">FROM</span> pg_constraint <span class="keyword">JOIN</span> pg_depend <span class="keyword">ON</span> (objid = confrelid) <span class="keyword">WHERE</span> contype = <span class="string">'f'</span> <span class="keyword">AND</span> refclassid = <span class="string">'pg_extension'</span>::regclass <span class="keyword">AND</span> classid = <span class="string">'pg_class'</span>::regclass;</div><div class="line">LOG:  statement: <span class="keyword">SET</span> search_path = <span class="keyword">public</span>, pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) <span class="keyword">AS</span> atttypname, array_to_string(a.attoptions, <span class="string">', '</span>) <span class="keyword">AS</span> attoptions, <span class="keyword">CASE</span> <span class="keyword">WHEN</span> a.attcollation &lt;&gt; t.typcollation <span class="keyword">THEN</span> a.attcollation <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> <span class="keyword">AS</span> attcollation, pg_catalog.array_to_string(<span class="built_in">ARRAY</span>(<span class="keyword">SELECT</span> pg_catalog.quote_ident(option_name) || <span class="string">' '</span> || pg_catalog.quote_literal(option_value) <span class="keyword">FROM</span> pg_catalog.pg_options_to_table(attfdwoptions) <span class="keyword">ORDER</span> <span class="keyword">BY</span> option_name), E<span class="string">',</span></div><div class="line">alog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '<span class="number">16384</span><span class="string">'::pg_catalog.oid AND a.attnum &gt; 0::pg_catalog.int2 ORDER BY a.attnum</span></div><div class="line">LOG:  statement: SET search_path = public, pg_catalog</div><div class="line">LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', <span class="string">') AS attoptions, CASE WHEN a.attcollation &lt;&gt; t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || '</span> <span class="string">' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E'</span>,</div><div class="line">alog.pg_attribute a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_catalog.pg_type t <span class="keyword">ON</span> a.atttypid = t.oid <span class="keyword">WHERE</span> a.attrelid = <span class="string">'16388'</span>::pg_catalog.oid <span class="keyword">AND</span> a.attnum &gt; <span class="number">0</span>::pg_catalog.int2 <span class="keyword">ORDER</span> <span class="keyword">BY</span> a.attnum</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, rulename, ev_class <span class="keyword">AS</span> ruletable, ev_type, is_instead, ev_enabled <span class="keyword">FROM</span> pg_rewrite <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">oid</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = <span class="keyword">public</span>, pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> <span class="keyword">oid</span>, tableoid, pol.polname, pol.polcmd, pol.polpermissive, <span class="keyword">CASE</span> <span class="keyword">WHEN</span> pol.polroles = <span class="string">'&#123;0&#125;'</span> <span class="keyword">THEN</span> <span class="literal">NULL</span> <span class="keyword">ELSE</span>    pg_catalog.array_to_string(<span class="built_in">ARRAY</span>(<span class="keyword">SELECT</span> pg_catalog.quote_ident(rolname) <span class="keyword">from</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = <span class="keyword">ANY</span>(pol.polroles)), <span class="string">', '</span>) <span class="keyword">END</span> <span class="keyword">AS</span> polroles, pg_catalog.pg_get_expr(pol.polqual, pol.polrelid) <span class="keyword">AS</span> polqual, pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid) <span class="keyword">AS</span> polwithcheck <span class="keyword">FROM</span> pg_catalog.pg_policy pol <span class="keyword">WHERE</span> polrelid = <span class="string">'16384'</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = <span class="keyword">public</span>, pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> <span class="keyword">oid</span>, tableoid, pol.polname, pol.polcmd, pol.polpermissive, <span class="keyword">CASE</span> <span class="keyword">WHEN</span> pol.polroles = <span class="string">'&#123;0&#125;'</span> <span class="keyword">THEN</span> <span class="literal">NULL</span> <span class="keyword">ELSE</span>    pg_catalog.array_to_string(<span class="built_in">ARRAY</span>(<span class="keyword">SELECT</span> pg_catalog.quote_ident(rolname) <span class="keyword">from</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = <span class="keyword">ANY</span>(pol.polroles)), <span class="string">', '</span>) <span class="keyword">END</span> <span class="keyword">AS</span> polroles, pg_catalog.pg_get_expr(pol.polqual, pol.polrelid) <span class="keyword">AS</span> polqual, pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid) <span class="keyword">AS</span> polwithcheck <span class="keyword">FROM</span> pg_catalog.pg_policy pol <span class="keyword">WHERE</span> polrelid = <span class="string">'16388'</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> w <span class="keyword">AS</span> ( <span class="keyword">SELECT</span> d1.objid, d2.refobjid, c2.relkind <span class="keyword">AS</span> refrelkind <span class="keyword">FROM</span> pg_depend d1 <span class="keyword">JOIN</span> pg_class c1 <span class="keyword">ON</span> c1.oid = d1.objid <span class="keyword">AND</span> c1.relkind = <span class="string">'m'</span> <span class="keyword">JOIN</span> pg_rewrite r1 <span class="keyword">ON</span> r1.ev_class = d1.objid <span class="keyword">JOIN</span> pg_depend d2 <span class="keyword">ON</span> d2.classid = <span class="string">'pg_rewrite'</span>::regclass <span class="keyword">AND</span> d2.objid = r1.oid <span class="keyword">AND</span> d2.refobjid &lt;&gt; d1.objid <span class="keyword">JOIN</span> pg_class c2 <span class="keyword">ON</span> c2.oid = d2.refobjid <span class="keyword">AND</span> c2.relkind <span class="keyword">IN</span> (<span class="string">'m'</span>,<span class="string">'v'</span>) <span class="keyword">WHERE</span> d1.classid = <span class="string">'pg_class'</span>::regclass <span class="keyword">UNION</span> <span class="keyword">SELECT</span> w.objid, d3.refobjid, c3.relkind <span class="keyword">FROM</span> w <span class="keyword">JOIN</span> pg_rewrite r3 <span class="keyword">ON</span> r3.ev_class = w.refobjid <span class="keyword">JOIN</span> pg_depend d3 <span class="keyword">ON</span> d3.classid = <span class="string">'pg_rewrite'</span>::regclass <span class="keyword">AND</span> d3.objid = r3.oid <span class="keyword">AND</span> d3.refobjid &lt;&gt; w.refobjid <span class="keyword">JOIN</span> pg_class c3 <span class="keyword">ON</span> c3.oid = d3.refobjid <span class="keyword">AND</span> c3.relkind <span class="keyword">IN</span> (<span class="string">'m'</span>,<span class="string">'v'</span>) ) <span class="keyword">SELECT</span> <span class="string">'pg_class'</span>::regclass::<span class="keyword">oid</span> <span class="keyword">AS</span> classid, objid, refobjid <span class="keyword">FROM</span> w <span class="keyword">WHERE</span> refrelkind = <span class="string">'m'</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> l.oid, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = l.lomowner) <span class="keyword">AS</span> rolname, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(l.lomacl,pg_catalog.acldefault(<span class="string">'L'</span>,l.lomowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'L'</span>,l.lomowner)))) <span class="keyword">as</span> foo) <span class="keyword">AS</span> lomacl, (<span class="keyword">SELECT</span> pg_catalog.array_agg(acl) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(pip.initprivs,pg_catalog.acldefault(<span class="string">'L'</span>,l.lomowner))) <span class="keyword">AS</span> acl <span class="keyword">EXCEPT</span> <span class="keyword">SELECT</span> pg_catalog.unnest(<span class="keyword">coalesce</span>(l.lomacl,pg_catalog.acldefault(<span class="string">'L'</span>,l.lomowner)))) <span class="keyword">as</span> foo) <span class="keyword">AS</span> rlomacl, <span class="literal">NULL</span> <span class="keyword">AS</span> initlomacl, <span class="literal">NULL</span> <span class="keyword">AS</span> initrlomacl <span class="keyword">FROM</span> pg_largeobject_metadata l <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_init_privs pip <span class="keyword">ON</span> (l.oid = pip.objoid <span class="keyword">AND</span> pip.classoid = <span class="string">'pg_largeobject'</span>::regclass <span class="keyword">AND</span> pip.objsubid = <span class="number">0</span>) </div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> classid, objid, refclassid, refobjid, deptype <span class="keyword">FROM</span> pg_depend <span class="keyword">WHERE</span> deptype != <span class="string">'p'</span> <span class="keyword">AND</span> deptype != <span class="string">'e'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span>,<span class="number">2</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> tableoid, <span class="keyword">oid</span>, (<span class="keyword">SELECT</span> rolname <span class="keyword">FROM</span> pg_catalog.pg_roles <span class="keyword">WHERE</span> <span class="keyword">oid</span> = datdba) <span class="keyword">AS</span> dba, pg_encoding_to_char(<span class="keyword">encoding</span>) <span class="keyword">AS</span> <span class="keyword">encoding</span>, datcollate, datctype, datfrozenxid, datminmxid, (<span class="keyword">SELECT</span> spcname <span class="keyword">FROM</span> pg_tablespace t <span class="keyword">WHERE</span> t.oid = dattablespace) <span class="keyword">AS</span> <span class="keyword">tablespace</span>, shobj_description(<span class="keyword">oid</span>, <span class="string">'pg_database'</span>) <span class="keyword">AS</span> description <span class="keyword">FROM</span> pg_database <span class="keyword">WHERE</span> datname = <span class="string">'postgres'</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> provider, label <span class="keyword">FROM</span> pg_catalog.pg_shseclabel <span class="keyword">WHERE</span> classoid = <span class="string">'pg_database'</span>::pg_catalog.regclass <span class="keyword">AND</span> objoid = <span class="number">12289</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> description, classoid, objoid, objsubid <span class="keyword">FROM</span> pg_catalog.pg_description <span class="keyword">ORDER</span> <span class="keyword">BY</span> classoid, objoid, objsubid</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SELECT</span> label, provider, classoid, objoid, objsubid <span class="keyword">FROM</span> pg_catalog.pg_seclabel <span class="keyword">ORDER</span> <span class="keyword">BY</span> classoid, objoid, objsubid</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = <span class="keyword">public</span>, pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = <span class="keyword">public</span>, pg_catalog</div><div class="line"><span class="comment">--开始备份数据</span></div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: <span class="keyword">SET</span> search_path = <span class="keyword">public</span>, pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: COPY public.tb1 (a) <span class="keyword">TO</span> stdout;</div><div class="line">LOG:  statement: <span class="keyword">SET</span> search_path = <span class="keyword">public</span>, pg_catalog</div><div class="line"><span class="keyword">LOG</span>:  <span class="keyword">statement</span>: COPY public.tb2 (a) <span class="keyword">TO</span> stdout;</div></pre></td></tr></table></figure>
<h2 id="对应pg-dump中的getXXX系列函数"><a href="#对应pg-dump中的getXXX系列函数" class="headerlink" title="对应pg_dump中的getXXX系列函数"></a>对应pg_dump中的getXXX系列函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">$ cat src/bin/pg_dump/common.c | grep get[a-zA-Z].* | grep -v &quot;*&quot;</div><div class="line">	extinfo = getExtensions(fout, &amp;numExtensions);</div><div class="line">	getExtensionMembership(fout, extinfo, numExtensions);</div><div class="line">	nspinfo = getNamespaces(fout, &amp;numNamespaces);</div><div class="line">	tblinfo = getTables(fout, &amp;numTables);</div><div class="line">	getOwnedSeqs(fout, tblinfo, numTables);</div><div class="line">	funinfo = getFuncs(fout, &amp;numFuncs);</div><div class="line">	typinfo = getTypes(fout, &amp;numTypes);</div><div class="line">	getProcLangs(fout, &amp;numProcLangs);</div><div class="line">	getAggregates(fout, &amp;numAggregates);</div><div class="line">	oprinfo = getOperators(fout, &amp;numOperators);</div><div class="line">	getAccessMethods(fout, &amp;numAccessMethods);</div><div class="line">	getOpclasses(fout, &amp;numOpclasses);</div><div class="line">	getOpfamilies(fout, &amp;numOpfamilies);</div><div class="line">	getTSParsers(fout, &amp;numTSParsers);</div><div class="line">	getTSTemplates(fout, &amp;numTSTemplates);</div><div class="line">	getTSDictionaries(fout, &amp;numTSDicts);</div><div class="line">	getTSConfigurations(fout, &amp;numTSConfigs);</div><div class="line">	getForeignDataWrappers(fout, &amp;numForeignDataWrappers);</div><div class="line">	getForeignServers(fout, &amp;numForeignServers);</div><div class="line">	getDefaultACLs(fout, &amp;numDefaultACLs);</div><div class="line">	collinfo = getCollations(fout, &amp;numCollations);</div><div class="line">	getConversions(fout, &amp;numConversions);</div><div class="line">	getCasts(fout, &amp;numCasts);</div><div class="line">	getTransforms(fout, &amp;numTransforms);</div><div class="line">	inhinfo = getInherits(fout, &amp;numInherits);</div><div class="line">	partinfo = getPartitions(fout, &amp;numPartitions);</div><div class="line">	getEventTriggers(fout, &amp;numEventTriggers);</div><div class="line">	getTableAttrs(fout, tblinfo, numTables);</div><div class="line">	getIndexes(fout, tblinfo, numTables);</div><div class="line">	getConstraints(fout, tblinfo, numTables);</div><div class="line">	getTriggers(fout, tblinfo, numTables);</div><div class="line">	getRules(fout, &amp;numRules);</div><div class="line">	getPolicies(fout, tblinfo, numTables);</div><div class="line">	getTablePartitionKeyInfo(fout, tblinfo, numTables);</div></pre></td></tr></table></figure>
<h1 id="pg-dump-中的事务"><a href="#pg-dump-中的事务" class="headerlink" title="pg_dump 中的事务"></a>pg_dump 中的事务</h1><h2 id="pg-dump-中的事务-1"><a href="#pg-dump-中的事务-1" class="headerlink" title="pg_dump 中的事务 1"></a>pg_dump 中的事务 1</h2><p>备份是在一个事务里面进行的：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> <span class="keyword">SERIALIZABLE</span></div><div class="line">	<span class="keyword">lock</span> all <span class="keyword">tables</span> <span class="keyword">in</span> <span class="keyword">access</span> <span class="keyword">shared</span> <span class="keyword">lock</span> <span class="comment">--锁住了全部的表</span></div><div class="line">    dump table1</div><div class="line">	dump table2</div><div class="line">	…</div><div class="line">    dump tablen</div><div class="line"><span class="keyword">commit</span></div></pre></td></tr></table></figure></p>
<h2 id="pg-dump-中的事务-2"><a href="#pg-dump-中的事务-2" class="headerlink" title="pg_dump 中的事务 2"></a>pg_dump 中的事务 2</h2><p>在dump的同时，别的会话可以select，insert update delete。但是不能有drop，alter，truncate这些，否者会被阻塞。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">编 号	  类 型	    对应操作	    互 斥</div><div class="line">1	Access Share	Select	8</div><div class="line">2	Row Share	Select For Update, Select For Share	7,8</div><div class="line">3	Row Exclusive	Insert, Update, Delete	5,6,7,8</div><div class="line">4	Share Update Exclusive	Vacuum(Non-Full), Analyze, Create Index Concurrently	4,5,6,7,8</div><div class="line">5	Share	Create Index(Without Concurrently)	3,4,6,7,8</div><div class="line">6	Share Row Exclusive	 	3,4,5,6,7,8</div><div class="line">7	Exclusive	 	2,3,4,5,6,7,8</div><div class="line">8	Access Exclusive	Alter Table, Drop Table, Vacuum Full	1,2,3,4,5,6,7,8</div></pre></td></tr></table></figure></p>
<h1 id="pg-dump-源码解析"><a href="#pg-dump-源码解析" class="headerlink" title="pg_dump 源码解析"></a>pg_dump 源码解析</h1><h2 id="源码文件"><a href="#源码文件" class="headerlink" title="源码文件"></a>源码文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls src/bin/pg_dump</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">common.c   --获取Catalog元信息，比如很多getXXX函数来读取系统表信息</div><div class="line">compress_io.c</div><div class="line">compress_io.h</div><div class="line">dumputils.c --ACL相关</div><div class="line">dumputils.h</div><div class="line">Makefile</div><div class="line">nls.mk</div><div class="line">parallel.c  --并行备份还原的框架</div><div class="line">parallel.h</div><div class="line">pg_backup_archiver.c  --备份API和初始化不同备份类型</div><div class="line">pg_backup_archiver.h</div><div class="line">pg_backup_custom.c --custom备份类型的实现</div><div class="line">pg_backup_db.c  --连数据库的相关函数</div><div class="line">pg_backup_db.h</div><div class="line">pg_backup_directory.c --dir备份类型的实现</div><div class="line">pg_backup.h</div><div class="line">pg_backup_null.c --null备份类型的实现</div><div class="line">pg_backup_tar.c --tar备份类型的实现</div><div class="line">pg_backup_tar.h</div><div class="line">pg_backup_utils.c --pg_dump和pg_restore共享的一些工具函数，比如报错函数等等</div><div class="line">pg_backup_utils.h</div><div class="line">pg_dumpall.c   --最后生成一个pg_dumpall工具，调用pg_dump来备份一个实例上的所有databases</div><div class="line">pg_dump.c --pg_dump的main入口</div><div class="line">pg_dump.h</div><div class="line">pg_dump_sort.c</div><div class="line">pg_restore.c --pg_restore的main入口</div></pre></td></tr></table></figure>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ol>
<li>DumpableObject：记录了备份对象的type，id，name，dependencies…<br>其他备份对象DumpableObjectType继承DumpableObject，比如TableInfo的第一个成员就是DumpableObject，再加上特有的表的信息。</li>
<li>Archive *g_fout : 全局变量，记录了数据库版本，编码，报错个数…由CreateArchive建立</li>
<li>ArchiveHandle ：继承Archive，增加了备份文件格式，和对应格式的dump函数指针，全局变量等。</li>
<li>ArchiveHandle 中的   struct _tocEntry *toc; 是每个备份对象的信息：比如表定义，oid等等</li>
<li>KCIConnection      *g_conn;  当前的数据库链接</li>
</ol>
<h2 id="主要流程–初始化"><a href="#主要流程–初始化" class="headerlink" title="主要流程–初始化"></a>主要流程–初始化</h2><p>从pg_dump.c这里开始<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">pg_dump.c --pg_dump的main入口</div><div class="line">参数解析和判断相容性</div><div class="line">CreateArchive 初始化g_fout</div><div class="line">    初始化对应格式的回调函数指针</div><div class="line">        InitArchiveFmt_Custom </div><div class="line">            一般我们用的就是这种模式，都在一个文件里面</div><div class="line">        InitArchiveFmt_Files</div><div class="line">            toc信息在单独main文件中，每个对象都备份为单独文件，可用于并行备份</div><div class="line">        InitArchiveFmt_Null</div><div class="line">            导出为sql脚本</div><div class="line">        InitArchiveFmt_Tar </div><div class="line">            和files类型很像但是把输出指向一个tar归档，所以备份的是一个文件</div></pre></td></tr></table></figure></p>
<h2 id="主要流程–重要的函数指针"><a href="#主要流程–重要的函数指针" class="headerlink" title="主要流程–重要的函数指针"></a>主要流程–重要的函数指针</h2><p>每种归档格式都需要初始化相应的回调函数指针</p>
<ol>
<li>ArchiveEntryPtr： 每个备份对象TOC创建时调用</li>
<li>StartDataPtr：表数据调备份前调用</li>
<li>WriteDataPtr：备份表表数据时调用</li>
<li>EndDataPtr：表数据备份完成调用</li>
<li>WriteBytePtr：向输出写数据（1字节）</li>
<li>ReadBytePtr：读数据（1字节）</li>
<li>WriteBufPtr：写数据</li>
<li>ReadBufPtr：读数据</li>
<li>_CloseArchive：开始实际写入数据，最后关闭文件</li>
</ol>
<p>等等，具体可以看<code>struct _archiveHandle</code></p>
<h2 id="主要流程–连接到数据库"><a href="#主要流程–连接到数据库" class="headerlink" title="主要流程–连接到数据库"></a>主要流程–连接到数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ConnectDatabase ()连接到数据库。</div><div class="line">setup_connection()接下来做一些基本的数据库设置：</div><div class="line">    clientEncoding</div><div class="line">    SET DATESTYLE = ISO</div><div class="line">    SET use_std_cast = off</div><div class="line">    BEGIN  --开始一个事务</div><div class="line">    SET TRANSACTION ISOLATION LEVEL SERIALIZABLE --隔离级别：可串行化</div><div class="line">    SET extra_float_digits TO 2</div></pre></td></tr></table></figure>
<h2 id="主要流程–处理include和exclude入参"><a href="#主要流程–处理include和exclude入参" class="headerlink" title="主要流程–处理include和exclude入参"></a>主要流程–处理include和exclude入参</h2><ol>
<li>入参schema_include_patterns转为schema_include_oids</li>
<li>入参schema_exclude_patterns转为schema_exclude_oids</li>
<li>参数table_include_patterns转为table_include_oids<br>4 .使用的函数为expand_schema_name_patterns并在转的过程中检查对应的名称是否存在，如果不存在就会报错。</li>
</ol>
<h2 id="主要流程–获取备份对象信息"><a href="#主要流程–获取备份对象信息" class="headerlink" title="主要流程–获取备份对象信息"></a>主要流程–获取备份对象信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">getSchemaData()</div><div class="line">    getNamespaces()</div><div class="line">    getTables()</div><div class="line">    getFuncs()</div><div class="line">    getXXX() ---查询系统表获取有那些备份对象</div></pre></td></tr></table></figure>
<h2 id="主要流程–拓扑排序"><a href="#主要流程–拓扑排序" class="headerlink" title="主要流程–拓扑排序"></a>主要流程–拓扑排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getDependencies() --从pg_depend获取依赖信息</div><div class="line">getDumpableObjects() --创建指针数组，指向备份对象，用于随后的排序。</div><div class="line">sortDumpableObjects() --拓扑排序</div></pre></td></tr></table></figure>
<h2 id="主要流程–开始归档-ArchiveEntry"><a href="#主要流程–开始归档-ArchiveEntry" class="headerlink" title="主要流程–开始归档(ArchiveEntry)"></a>主要流程–开始归档(ArchiveEntry)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dumpTable()</div><div class="line">dumpTableData()</div><div class="line">dumpXXX系列函数获取单个备份对象的信息</div><div class="line">接下来调用</div><div class="line">    ArchiveEntry()</div><div class="line">      分配TocEntry空间，TOC=TableOfContent</div><div class="line">      TocEntry里面存放了对象的基本信息（比如表定义）以及</div><div class="line">      dataDumper回调函数用于最后输出使用（比如copy语句）</div></pre></td></tr></table></figure>
<h2 id="主要流程–处理选项"><a href="#主要流程–处理选项" class="headerlink" title="主要流程–处理选项"></a>主要流程–处理选项</h2><p>这一步根据备份选项来处理每一个TOC<br>看函数_tocEntryRequired<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef enum</div><div class="line">&#123;</div><div class="line">    REQ_SCHEMA = 0x01,          /* want schema */</div><div class="line">    REQ_DATA = 0x02,            /* want data */</div><div class="line">    REQ_SPECIAL = 0x04          /* for special TOC entries */</div><div class="line">&#125; teReqs;</div></pre></td></tr></table></figure></p>
<h2 id="主要流程–开始输出"><a href="#主要流程–开始输出" class="headerlink" title="主要流程–开始输出"></a>主要流程–开始输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if (plainText)</div><div class="line">    RestoreArchive(fout); --输出为sql形式</div><div class="line">        restore_toc_entry --输出每个备份对象</div><div class="line">            _PrintTocData</div><div class="line">                dumpTableData_copy --实际的输出函数</div><div class="line"></div><div class="line">    CloseArchive(fout); --输出为custom形式</div><div class="line">        _CloseArchive() --回调函数</div></pre></td></tr></table></figure>
<h1 id="pg-restore-参数解析"><a href="#pg-restore-参数解析" class="headerlink" title="pg_restore 参数解析"></a>pg_restore 参数解析</h1><h2 id="help-1"><a href="#help-1" class="headerlink" title="help"></a>help</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./pg_restore --help</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">pg_restore 从一个 pg_dump 备份的二进制文件恢复到数据库或者文本文件.</div><div class="line"></div><div class="line">$ ./pg_restore    --help</div><div class="line">pg_restore restores a PostgreSQL database from an archive created by pg_dump.</div><div class="line"></div><div class="line">Usage:</div><div class="line">  pg_restore [OPTION]... [FILE]</div><div class="line"></div><div class="line">General options:</div><div class="line">  -d, --dbname=NAME        connect to database name</div><div class="line">  -f, --file=FILENAME      output file name</div><div class="line">  -F, --format=c|d|t       backup file format (should be automatic)</div><div class="line">  -l, --list               print summarized TOC of the archive</div><div class="line">  -v, --verbose            verbose mode</div><div class="line">  -V, --version            output version information, then exit</div><div class="line">  -?, --help               show this help, then exit</div><div class="line"></div><div class="line">Options controlling the restore:</div><div class="line">  -a, --data-only              restore only the data, no schema</div><div class="line">  -c, --clean                  clean (drop) database objects before recreating</div><div class="line">  -C, --create                 create the target database</div><div class="line">  -e, --exit-on-error          exit on error, default is to continue</div><div class="line">  -I, --index=NAME             restore named index</div><div class="line">  -j, --jobs=NUM               use this many parallel jobs to restore</div><div class="line">  -L, --use-list=FILENAME      use table of contents from this file for</div><div class="line">                               selecting/ordering output</div><div class="line">  -n, --schema=NAME            restore only objects in this schema</div><div class="line">  -O, --no-owner               skip restoration of object ownership</div><div class="line">  -P, --function=NAME(args)    restore named function</div><div class="line">  -s, --schema-only            restore only the schema, no data</div><div class="line">  -S, --superuser=NAME         superuser user name to use for disabling triggers</div><div class="line">  -t, --table=NAME             restore named relation (table, view, etc.)</div><div class="line">  -T, --trigger=NAME           restore named trigger</div><div class="line">  -x, --no-privileges          skip restoration of access privileges (grant/revoke)</div><div class="line">  -1, --single-transaction     restore as a single transaction</div><div class="line">  --disable-triggers           disable triggers during data-only restore</div><div class="line">  --enable-row-security        enable row security</div><div class="line">  --if-exists                  use IF EXISTS when dropping objects</div><div class="line">  --no-data-for-failed-tables  do not restore data of tables that could not be</div><div class="line">                               created</div><div class="line">  --no-security-labels         do not restore security labels</div><div class="line">  --no-tablespaces             do not restore tablespace assignments</div><div class="line">  --section=SECTION            restore named section (pre-data, data, or post-data)</div><div class="line">  --strict-names               require table and/or schema include patterns to</div><div class="line">                               match at least one entity each</div><div class="line">  --use-set-session-authorization</div><div class="line">                               use SET SESSION AUTHORIZATION commands instead of</div><div class="line">                               ALTER OWNER commands to set ownership</div><div class="line"></div><div class="line">Connection options:</div><div class="line">  -h, --host=HOSTNAME      database server host or socket directory</div><div class="line">  -p, --port=PORT          database server port number</div><div class="line">  -U, --username=NAME      connect as specified database user</div><div class="line">  -w, --no-password        never prompt for password</div><div class="line">  -W, --password           force password prompt (should happen automatically)</div><div class="line">  --role=ROLENAME          do SET ROLE before restore</div><div class="line"></div><div class="line">The options -I, -n, -P, -t, -T, and --section can be combined and specified</div><div class="line">multiple times to select multiple objects.</div><div class="line"></div><div class="line">If no input file name is supplied, then standard input is used.</div><div class="line"></div><div class="line">Report bugs to &lt;pgsql-bugs@postgresql.org&gt;.</div></pre></td></tr></table></figure>
<p>##根据对象列表文件还原1</p>
<p>还原时，可以先获取备份文件中备份对象的列表，然后在列表中选择需要还原的对象。<br>首先，执行如下命令，获取备份文件中对象的列表；列表文件包含了备份文件中所有对象的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pg_restore -l -f dump.lst dumpfile.dmp</div></pre></td></tr></table></figure></p>
<p>生成的对象列表文件”dump.lst”中，会有如下的对象信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3; 2445711 TABLE C_HISTORY SYSTEM</div><div class="line">4; 2609506 TABLE HISTORY SYSTEM</div><div class="line">5; 2445711 TABLE DATA C_HISTORY SYSTEM</div><div class="line">6; 2609506 TABLE DATA HISTORY</div></pre></td></tr></table></figure></p>
<p>##根据对象列表文件还原2<br>然后，在生成的列表文件中，对不需要还原的对象，在行首标注’；’，或将对象所在的行删除。另外，还可以重新排列各对象在列表文件中顺序，从而指定还原顺序。<br>最后，通过指定修改后的对象列表文件，还原数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pg_restore  -L dump.lst dumpfile.dmp</div></pre></td></tr></table></figure></p>
<h1 id="pg-restore基本流程"><a href="#pg-restore基本流程" class="headerlink" title="pg_restore基本流程"></a>pg_restore基本流程</h1><h2 id="打开归档文件并读取TOC"><a href="#打开归档文件并读取TOC" class="headerlink" title="打开归档文件并读取TOC"></a>打开归档文件并读取TOC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(gdb) bt</div><div class="line">#0  ReadToc (AH=0x62c3e0) at pg_backup_archiver.c:2520</div><div class="line">#1  0x000000000040ee1e in InitArchiveFmt_Custom (AH=0x62c3e0) at pg_backup_custom.c:190</div><div class="line">#2  0x0000000000408b81 in _allocAH (FileSpec=0x7fffffffe2d1 &quot;./test.sql&quot;,</div><div class="line">    fmt=archUnknown, compression=0, mode=archModeRead,</div><div class="line">    setupWorkerPtr=0x4042cb &lt;setupRestoreWorker&gt;) at pg_backup_archiver.c:2334</div><div class="line">#3  0x0000000000404363 in OpenArchive (FileSpec=0x7fffffffe2d1 &quot;./test.sql&quot;,</div><div class="line">    fmt=archUnknown) at pg_backup_archiver.c:219</div><div class="line">#4  0x0000000000403dd9 in main (argc=3, argv=0x7fffffffdf28) at pg_restore.c:383</div></pre></td></tr></table></figure>
<h2 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(gdb) bt</div><div class="line">#0  restore_toc_entry (AH=0x62c3e0, te=0x631ce0, is_parallel=0 &apos;\000&apos;)</div><div class="line">    at pg_backup_archiver.c:711</div><div class="line">#1  0x000000000040500e in RestoreArchive (AHX=0x62c3e0) at pg_backup_archiver.c:653</div><div class="line">#2  0x0000000000403ea3 in main (argc=3, argv=0x7fffffffdf28) at pg_restore.c:422</div><div class="line">(gdb)</div></pre></td></tr></table></figure>
<h2 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1. 向服务器发送`copy table from stdin;`</div><div class="line">2. 紧接着从归档文件中读取数据</div><div class="line">#0  ReadDataFromArchive (AH=0x62c3e0, compression=-1, readF=0x40ff0e &lt;_CustomReadFunc&gt;)</div><div class="line">    at compress_io.c:162</div><div class="line">#1  0x000000000040f4e1 in _PrintData (AH=0x62c3e0) at pg_backup_custom.c:514</div><div class="line">#2  0x000000000040f465 in _PrintTocData (AH=0x62c3e0, te=0x632fe0)</div><div class="line">    at pg_backup_custom.c:494</div><div class="line">#3  0x00000000004057f9 in restore_toc_entry (AH=0x62c3e0, te=0x632fe0,</div><div class="line">    is_parallel=0 &apos;\000&apos;) at pg_backup_archiver.c:892</div><div class="line">#4  0x000000000040500e in RestoreArchive (AHX=0x62c3e0) at pg_backup_archiver.c:653</div><div class="line">#5  0x0000000000403ea3 in main (argc=3, argv=0x7fffffffdf28) at pg_restore.c:422</div></pre></td></tr></table></figure>
<h1 id="pg-restore-事务"><a href="#pg-restore-事务" class="headerlink" title="pg_restore 事务"></a>pg_restore 事务</h1><h2 id="默认是每个对象开启一个事务"><a href="#默认是每个对象开启一个事务" class="headerlink" title="默认是每个对象开启一个事务"></a>默认是每个对象开启一个事务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">begin;</div><div class="line">copy xxx from stdin;</div><div class="line">commit;</div><div class="line">begin;</div><div class="line">copy xxx from stdin;</div><div class="line">commit;</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="单事务还原"><a href="#单事务还原" class="headerlink" title="单事务还原"></a>单事务还原</h2><p>如果加上–single-transaction那么是整个还原过程是在一个事务里面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">begin;</div><div class="line">copy xxx from stdin;</div><div class="line">copy xxx from stdin;</div><div class="line">...</div><div class="line">commit;</div></pre></td></tr></table></figure></p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【小宇带你学PostgreSQL内核】第五课：rewriter分析和重写（上）]]></title>
      <url>http://shenyu.wiki/2017/01/08/%E3%80%90%E5%B0%8F%E5%AE%87%E5%B8%A6%E4%BD%A0%E5%AD%A6PostgreSQL%E5%86%85%E6%A0%B8%E3%80%91%E7%AC%AC%E4%BA%94%E8%AF%BE%EF%BC%9Arewriter%E5%88%86%E6%9E%90%E5%92%8C%E9%87%8D%E5%86%99%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<center><iframe height="498" width="510" src="http://player.youku.com/embed/XMTk0NDk1OTQ2MA==" frameborder="0" 'allowfullscreen'=""></iframe></center>

<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git统计代码贡献]]></title>
      <url>http://shenyu.wiki/2017/01/05/git%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E8%B4%A1%E7%8C%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>辛苦了一年，到年终总结的时候啦。想统计一下今年贡献了多少代码。那么怎么用git来统计某个作者贡献代码行数呢？</p>
</blockquote>
<p>思路是采用git log打出来每次提交的信息。可以加上<code>--author</code>参数来指明是哪个作者的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log   --pretty=format:&apos;%an %Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset&apos; --abbrev-commit --date=relative --shortstat --author=&quot;Shen&quot;</div></pre></td></tr></table></figure></p>
<p>打出来的结果如下所示：</p>
<center> <img src="http://static.zybuluo.com/shenyuflying/x2n5fklgimkamh9mulxlcj61/image_1b5jmt36dc6f1tj412mi173i1kcr9.png" alt="image_1b5jmt36dc6f1tj412mi173i1kcr9.png-116.2kB"> </center>

<p>能够看到每次提交的代码变更行数，接下来祭出grep和awk神器来做下统计吧！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git log   --pretty=format:&apos;%Cred%h%Creset %an-%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset&apos; --abbrev-commit --date=relative --shortstat --author=&quot;Shen&quot; |grep &quot;insertions&quot; |awk &apos;&#123;sum += $4 + $6&#125; END &#123;print sum&#125;&apos;</div><div class="line">7185</div></pre></td></tr></table></figure></p>
<p>在这个分支上贡献了7185行代码，再接再厉！</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL logical backup & restore]]></title>
      <url>http://shenyu.wiki/2017/01/02/pg-logical-backup-restore/</url>
      <content type="html"><![CDATA[<center><br><iframe src="http://shenyu.wiki/uploads/pg-logical-backup-restore.html" width="800" height="600"> </iframe><br></center>

]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【小宇带你学PostgreSQL内核】第四课：parser语法分析]]></title>
      <url>http://shenyu.wiki/2017/01/01/%E3%80%90%E5%B0%8F%E5%AE%87%E5%B8%A6%E4%BD%A0%E5%AD%A6PostgreSQL%E5%86%85%E6%A0%B8%E3%80%91%E7%AC%AC%E5%9B%9B%E8%AF%BE%EF%BC%9Aparser%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<center><iframe height="498" width="510" src="http://player.youku.com/embed/XMTg4MjEzMzk2NA==" frameborder="0" 'allowfullscreen'=""></iframe></center>


<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GDB图形界面大PK]]></title>
      <url>http://shenyu.wiki/2016/12/29/GDB%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%A4%A7PK/</url>
      <content type="html"><![CDATA[<blockquote>
<p>gdb虽然很强大，但是却略显单调。其实gdb有很多前端图形界面。那么选哪个呢？请看GDB图形界面大PK。</p>
</blockquote>
<h2 id="TUI"><a href="#TUI" class="headerlink" title="TUI"></a>TUI</h2><center><img src="http://static.zybuluo.com/shenyuflying/beiufda6on7jxe25kf5nqlxg/image_1b54hipghpqg176a1vd5133l1p3r13.png" alt="image_1b54hipghpqg176a1vd5133l1p3r13.png-27.6kB"></center>

<p>gdb原生的图形模式，支持gdb所有的特性。</p>
<p><strong>使用方法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb attach pid 之后ctrl+x a</div></pre></td></tr></table></figure></p>
<h2 id="cgdb"><a href="#cgdb" class="headerlink" title="cgdb"></a>cgdb</h2><p><a href="http://cgdb.github.io/" target="_blank" rel="external">http://cgdb.github.io/</a></p>
<center><img src="http://static.zybuluo.com/shenyuflying/xrtnvqcgnjc5u5s92fdxie4f/image_1b54jn7f11bincfncgpqjs1vbt34.png" alt="image_1b54jn7f11bincfncgpqjs1vbt34.png-26.1kB"></center>

<p>可以认为是TUI模式的增强版，具有代码高亮、查找等等功能。同时也支持gdb所有的特性。<br>如果之前对gdb和vim比较熟悉的话，用这个就会很顺手。</p>
<p><strong>使用方法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cgdb attach pid</div></pre></td></tr></table></figure></p>
<h2 id="ddd"><a href="#ddd" class="headerlink" title="ddd"></a>ddd</h2><center><img src="http://static.zybuluo.com/shenyuflying/6wybyzwxwgsrs94nipn6mjar/image_1b54hghu7ibvrhn1g27ra1cq2m.png" alt="image_1b54hghu7ibvrhn1g27ra1cq2m.png-39kB"></center>

<p>采用gdb作为后端，强大之处在于能够图形化显示程序中的结构体。<br><strong>使用方法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ddd [options...] executable-file [core-file | process-id]</div></pre></td></tr></table></figure></p>
<h2 id="insight"><a href="#insight" class="headerlink" title="insight"></a>insight</h2><center><img src="http://static.zybuluo.com/shenyuflying/qe9ek0yb52h43pl4df9z2ei1/image_1b54hg2kn170q15ebk4q1pr1ji89.png" alt="image_1b54hg2kn170q15ebk4q1pr1ji89.png-144.1kB"></center>

<h2 id="Nemiver"><a href="#Nemiver" class="headerlink" title="Nemiver"></a>Nemiver</h2><center><img src="http://static.zybuluo.com/shenyuflying/i67fi7vfxpy0st8m1pspgvdb/image_1b54iglhg1vq6cog15oqnd61in51g.png" alt="image_1b54iglhg1vq6cog15oqnd61in51g.png-137kB"></center>

<p>界面比上面几个好看点，但是不知道如何输入gdb命令</p>
<p><strong>使用方法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nemiver --attach=&lt;pid|process name&gt;</div></pre></td></tr></table></figure></p>
<h2 id="KDevelop"><a href="#KDevelop" class="headerlink" title="KDevelop"></a>KDevelop</h2><p><a href="https://www.kdevelop.org/" target="_blank" rel="external">https://www.kdevelop.org/</a></p>
<center><img src="http://static.zybuluo.com/shenyuflying/hr7xsop7me5qv8s65isaydj0/image_1b54mesls1d1u10okgksqoo19l23h.png" alt="image_1b54mesls1d1u10okgksqoo19l23h.png-178.3kB"></center>

<p><strong>使用方法：</strong><br>还没搞明白如何attach到进程。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般使用gdb的TUI模式就可以，这个每台机器上都有，也可以远程用终端调试。最简单的就是最强大的。如果觉得TUI模式太单调的话，可以用cgdb。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://sourceware.org/gdb/wiki/GDB%20Front%20Ends" target="_blank" rel="external">https://sourceware.org/gdb/wiki/GDB%20Front%20Ends</a></p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【小宇带你学PostgreSQL内核】第三课：内核架构(下)]]></title>
      <url>http://shenyu.wiki/2016/12/18/%E3%80%90%E5%B0%8F%E5%AE%87%E5%B8%A6%E4%BD%A0%E5%AD%A6PostgreSQL%E5%86%85%E6%A0%B8%E3%80%91%E7%AC%AC%E4%B8%89%E8%AF%BE%EF%BC%9A%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%842/</url>
      <content type="html"><![CDATA[<center><iframe height="498" width="510" src="http://player.youku.com/embed/XMTg3MDkyMzY4OA==" frameborder="0" 'allowfullscreen'=""></iframe></center>

<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【小宇带你学PostgreSQL内核】第三课：内核架构(上)]]></title>
      <url>http://shenyu.wiki/2016/12/18/%E3%80%90%E5%B0%8F%E5%AE%87%E5%B8%A6%E4%BD%A0%E5%AD%A6PostgreSQL%E5%86%85%E6%A0%B8%E3%80%91%E7%AC%AC%E4%B8%89%E8%AF%BE%EF%BC%9A%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%841/</url>
      <content type="html"><![CDATA[<center><iframe height="498" width="510" src="http://player.youku.com/embed/XMTg3MDUzODQwMA==" frameborder="0" 'allowfullscreen'=""></iframe></center>

<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgresSQL-internal-roadmap]]></title>
      <url>http://shenyu.wiki/2016/12/18/PostgreSQL-internal-roadmap/</url>
      <content type="html"><![CDATA[<p><a href="/uploads/internal.pdf">postgres internal roadmap</a></p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yshen's vim settings]]></title>
      <url>http://shenyu.wiki/2016/12/14/yshen-s-vim-settings/</url>
      <content type="html"><![CDATA[<blockquote>
<p>写代码的时候手需要时刻保持在键盘上,随机定位代码、随机删除代码、移动代码、插入代码的操作大大多于阅读、翻页操作，中间卡顿一下效率就大大降低了；vim通过其强大的快捷键，可以完全摆脱鼠标。真是编程利器。通过插件，可以实现强大的IDE的功能。可以说每一个geek都有自己的vim配置，在这里我把我的配置共享出来。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/cj63bslrkuvv0nidd53wser8/image_1b3rg746h1dpr29dsdu74o1u4qm.png" alt="image_1b3rg746h1dpr29dsdu74o1u4qm.png-396.6kB"></p>
<p>安装的插件有</p>
<ol>
<li>插件管理<br>Vundle</li>
<li>索引提示<br>ctag             生成工程的符号文件<br>cscope           生成工程符号文件引用关系<br>Tagbar           右边栏显示文件中的符号</li>
<li>自动完成<br>echofunc.vim     显示函数定义<br>OmniCppComplete  提示结构体成员<br>SuperTab         TAB键自动完成</li>
<li>文件浏览<br>The-NERD-tree<br>ctrlp.vim</li>
<li>其他<br>molokai          配色主题<br>c-standard-functions-highlight  高亮C语言函数</li>
</ol>
<p>使用方法：</p>
<ol>
<li>安装Vundle</li>
<li>复制如下脚本到vimrc</li>
<li>进入vim之后运行:PluginUpdate</li>
</ol>
<p>配置文件开源在git上：<a href="https://github.com/shenyuflying/vim" target="_blank" rel="external">https://github.com/shenyuflying/vim</a></p>
<a id="more"></a>
<p>以下内容可能过期</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div></pre></td><td class="code"><pre><div class="line">&quot;-----------------------------------------------------------</div><div class="line">&quot;                yshen&apos;s vim settings</div><div class="line">&quot;----------------------------------------------------------</div><div class="line">&quot;</div><div class="line">&quot; PLUGINS</div><div class="line">&quot; ---------</div><div class="line">&quot; 1.插件管理</div><div class="line">&quot;   Vundle</div><div class="line">&quot; 2.索引提示</div><div class="line">&quot;   ctag             生成工程的符号文件</div><div class="line">&quot;   cscope           生成工程符号文件引用关系</div><div class="line">&quot;   Tagbar           右边栏显示文件中的符号</div><div class="line">&quot; 3.自动完成</div><div class="line">&quot;   echofunc.vim     显示函数定义</div><div class="line">&quot;   OmniCppComplete  提示结构体成员</div><div class="line">&quot;   SuperTab         TAB键自动完成</div><div class="line">&quot; 4.文件浏览</div><div class="line">&quot;   The-NERD-tree</div><div class="line">&quot;   ctrlp.vim</div><div class="line">&quot; 5.其他</div><div class="line">&quot;   molokai          配色主题</div><div class="line">&quot;   c-standard-functions-highlight  高亮C语言函数</div><div class="line">&quot;</div><div class="line">&quot;</div><div class="line">&quot; HOWTO</div><div class="line">&quot; ----------</div><div class="line">&quot; 1.快捷键映射</div><div class="line">&quot;   &lt;F1&gt;</div><div class="line">&quot;   &lt;F2&gt; 显示目录窗口</div><div class="line">&quot;   &lt;F3&gt; 显示符号窗口</div><div class="line">&quot;   &lt;F4&gt; 生成工程的符号文件</div><div class="line">&quot;</div><div class="line">&quot;   &lt;F5&gt; 高亮文本中的符号</div><div class="line">&quot;   &lt;F6&gt;</div><div class="line">&quot;   &lt;F7&gt;</div><div class="line">&quot;   &lt;F8&gt;</div><div class="line">&quot;</div><div class="line">&quot;   &lt;F9&gt;</div><div class="line">&quot;   &lt;F10&gt;</div><div class="line">&quot;   &lt;F11&gt;</div><div class="line">&quot;   &lt;F12&gt;</div><div class="line">&quot;</div><div class="line">&quot; INSTALL</div><div class="line">&quot; ---------</div><div class="line">&quot; 1. Install Vundle first</div><div class="line">&quot; 2. Install plugin by Vundle using :PluginUpdate</div><div class="line">&quot; 3. Copy this setting in your ~/.vimrc</div><div class="line">&quot;</div><div class="line">&quot;-----------------------------------------------------------</div><div class="line">&quot;                Vundle settings</div><div class="line">&quot;----------------------------------------------------------</div><div class="line">set nocompatible              &quot; be iMproved, required</div><div class="line">filetype off                  &quot; required</div><div class="line"></div><div class="line">&quot; set the runtime path to include Vundle and initialize</div><div class="line">set rtp+=~/.vim/bundle/Vundle.vim</div><div class="line">call vundle#begin()</div><div class="line">&quot; alternatively, pass a path where Vundle should install plugins</div><div class="line">&quot;call vundle#begin(&apos;~/some/path/here&apos;)</div><div class="line"></div><div class="line">&quot; let Vundle manage Vundle, required</div><div class="line">Plugin &apos;VundleVim/Vundle.vim&apos;</div><div class="line">&quot;Plugin &apos;Valloric/YouCompleteMe&apos;</div><div class="line"></div><div class="line">&quot; The following are examples of different formats supported.</div><div class="line">&quot; Keep Plugin commands between vundle#begin/end.</div><div class="line">&quot; plugin on GitHub repo</div><div class="line">Plugin &apos;tpope/vim-fugitive&apos;</div><div class="line"></div><div class="line">Plugin &apos;vim-airline/vim-airline&apos;</div><div class="line"></div><div class="line">&quot; plugin from http://vim-scripts.org/vim/scripts.html</div><div class="line">Plugin &apos;L9&apos;</div><div class="line">&quot; Git plugin not hosted on GitHub</div><div class="line">&quot;Plugin &apos;git://git.wincent.com/command-t.git&apos;</div><div class="line">&quot; git repos on your local machine (i.e. when working on your own plugin)</div><div class="line">&quot;Plugin &apos;file:///home/gmarik/path/to/plugin&apos;</div><div class="line">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</div><div class="line">&quot; Pass the path to set the runtimepath properly.</div><div class="line">&quot;Plugin &apos;rstacruz/sparkup&apos;, &#123;&apos;rtp&apos;: &apos;vim/&apos;&#125;</div><div class="line">&quot; Install L9 and avoid a Naming conflict if you&apos;ve already installed a</div><div class="line">&quot; different version somewhere else.</div><div class="line">&quot;Plugin &apos;ascenator/L9&apos;, &#123;&apos;name&apos;: &apos;newL9&apos;&#125;</div><div class="line">&quot;Plugin &apos;taglist.vim&apos;</div><div class="line">Plugin &apos;Tagbar&apos;</div><div class="line">Plugin &apos;The-NERD-tree&apos;</div><div class="line">Plugin &apos;c-standard-functions-highlight&apos;</div><div class="line">Plugin &apos;molokai&apos;</div><div class="line">Plugin &apos;ctrlp.vim&apos;</div><div class="line">Plugin &apos;echofunc.vim&apos;</div><div class="line">Plugin &apos;OmniCppComplete&apos;</div><div class="line">&quot;Plugin &apos;Syntastic&apos;</div><div class="line">Plugin &apos;SuperTab&apos;</div><div class="line"></div><div class="line">&quot; All of your Plugins must be added before the following line</div><div class="line">call vundle#end()            &quot; required</div><div class="line">filetype plugin indent on    &quot; required</div><div class="line">&quot; To ignore plugin indent changes, instead use:</div><div class="line">&quot;filetype plugin on</div><div class="line">&quot;</div><div class="line">&quot; Brief help</div><div class="line">&quot; :PluginList       - lists configured plugins</div><div class="line">&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</div><div class="line">&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache</div><div class="line">&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</div><div class="line">&quot;</div><div class="line">&quot; see :h vundle for more details or wiki for FAQ</div><div class="line">&quot; Put your non-Plugin stuff after this line</div><div class="line">&quot;</div><div class="line">&quot;-----------------------------------------------------------</div><div class="line">&quot;                generic vim settings</div><div class="line">&quot;----------------------------------------------------------</div><div class="line"></div><div class="line">&quot; 显示行号</div><div class="line">set nu</div><div class="line">&quot; tab键为4个空格</div><div class="line">set ts=4</div><div class="line"></div><div class="line">&quot;忽略大小写检索</div><div class="line">&quot;set ignorecase</div><div class="line">&quot;输入检索时动态变化</div><div class="line">set incsearch</div><div class="line">&quot;检索高亮</div><div class="line">set hlsearch</div><div class="line">&quot; 突出显示当前行</div><div class="line">&quot;set cursorline </div><div class="line">&quot; 打开状态栏标尺</div><div class="line">set ruler </div><div class="line">&quot; 语法高亮</div><div class="line">syntax on</div><div class="line">&quot; 在INSERT模式下移动</div><div class="line">inoremap &lt;C-h&gt; &lt;Left&gt;</div><div class="line">inoremap &lt;C-j&gt; &lt;Down&gt;</div><div class="line">inoremap &lt;C-k&gt; &lt;Up&gt;</div><div class="line">inoremap &lt;C-l&gt; &lt;Right&gt;</div><div class="line">&quot; 设置匹配模式，显示匹配的括号</div><div class="line">set showmatch </div><div class="line">&quot; 使用鼠标</div><div class="line">&quot;set mouse=a</div><div class="line">&quot;自动缩进</div><div class="line">&quot;set shiftwidth=4</div><div class="line">&quot;set softtabstop=4</div><div class="line">&quot;set tabstop=4</div><div class="line">&quot;set cindent</div><div class="line">&quot;set autoindent</div><div class="line">&quot;set noautoindent</div><div class="line">&quot;set cinoptions=&#123;0,1s,t0,n-2,p2s,(03s,=.5s,&gt;1s,=1s,:1s</div><div class="line">set smartindent</div><div class="line"></div><div class="line"></div><div class="line">&quot;-----------------------------------------------------------</div><div class="line">&quot;                build</div><div class="line">&quot;----------------------------------------------------------</div><div class="line">&quot;map &lt;F5&gt; :!make&lt;CR&gt;</div><div class="line">&quot;-----------------------------------------------------------</div><div class="line">&quot;                ctags</div><div class="line">&quot;----------------------------------------------------------</div><div class="line">set tags=./</div><div class="line">set tags=tags;</div><div class="line">&quot;生成tag cscope tags.vim等符号文件</div><div class="line">map &lt;F4&gt; :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q . &amp;&amp; cscope -Rbq  &amp;&amp;  awk &apos;&#123;print &quot;syntax keyword tag &quot;$1&#125;&apos; tags &gt; tags.vim &lt;CR&gt;</div><div class="line">&quot;映射F4在插入模式下也可以用</div><div class="line">imap &lt;F4&gt; &lt;ESC&gt;:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q . &amp;&amp; cscope -Rbq  &amp;&amp;  awk &apos;&#123;print &quot;syntax keyword tag &quot;$1&#125;&apos; tags &gt; tags.vim&lt;CR&gt;</div><div class="line">map &lt;F5&gt; :so tags.vim&lt;CR&gt;</div><div class="line">imap &lt;F5&gt; &lt;ESC&gt; :so tags.vim&lt;CR&gt;</div><div class="line"></div><div class="line"></div><div class="line">&quot;-----------------------------------------------------------</div><div class="line">&quot;                tagbar</div><div class="line">&quot;----------------------------------------------------------</div><div class="line">&quot;type help: tagbar for more info</div><div class="line">let g:tagbar_ctags_bin=&apos;ctags&apos;          &quot;ctags程序的路径</div><div class="line">let g:tagbar_width=30                   &quot;窗口宽度的设置</div><div class="line">&quot;let g:tagbar_left = 1</div><div class="line">let g:tagbar_right = 1</div><div class="line">map &lt;F3&gt; :Tagbar&lt;CR&gt;</div><div class="line">&quot;autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen() &quot;如果是c语言的程序的话，tagbar自动开启</div><div class="line">&quot;-----------------------------------------------------------</div><div class="line">&quot;               NERDTree </div><div class="line">&quot;----------------------------------------------------------</div><div class="line">&quot;type help: nerdtree for more info</div><div class="line">&quot;autocmd vimenter * NERDTree     &quot;自动打开NERDTree</div><div class="line">map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;  &quot;打开和关闭的快捷键</div><div class="line">autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; exists(&quot;b:NERDTreeType&quot;) &amp;&amp; b:NERDTreeType == &quot;primary&quot;) | q | endif &quot;自动关闭</div><div class="line"></div><div class="line">&quot;-----------------------------------------------------------</div><div class="line">&quot;               Cscope </div><div class="line">&quot;----------------------------------------------------------</div><div class="line">if has(&quot;cscope&quot;)</div><div class="line">  set csprg=/usr/bin/cscope</div><div class="line">  set csto=1</div><div class="line">  set cst</div><div class="line">  set nocsverb</div><div class="line">  &quot; add any database in current directory</div><div class="line">  if filereadable(&quot;cscope.out&quot;)</div><div class="line">     cs add cscope.out</div><div class="line">  &quot; else add database pointed to by environment</div><div class="line">  elseif $CSCOPE_DB != &quot;&quot;</div><div class="line">    cs add $CSCOPE_DB</div><div class="line">  endif</div><div class="line">  </div><div class="line">  set csverb</div><div class="line">endif</div><div class="line"></div><div class="line">nmap &lt;C-_&gt;s :cs find s &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-_&gt;g :cs find g &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-_&gt;c :cs find c &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-_&gt;t :cs find t &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-_&gt;e :cs find e &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-_&gt;f :cs find f &lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-_&gt;i :cs find i ^&lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;$&lt;CR&gt;</div><div class="line">nmap &lt;C-_&gt;d :cs find d &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line"></div><div class="line">&quot; Using &apos;CTRL-spacebar&apos; then a search type makes the vim window</div><div class="line">&quot; split horizontally, with search result displayed in</div><div class="line">&quot; the new window.</div><div class="line"></div><div class="line">nmap &lt;C-\&gt;s :scs find s &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-\&gt;g :scs find g &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-\&gt;c :scs find c &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-\&gt;t :scs find t &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-\&gt;e :scs find e &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-\&gt;f :scs find f &lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-\&gt;i :scs find i ^&lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;$&lt;CR&gt;</div><div class="line">nmap &lt;C-\&gt;d :scs find d &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">&quot; Hitting CTRL-space *twice* before the search type does a vertical</div><div class="line">&quot; split instead of a horizontal one</div><div class="line"></div><div class="line">nmap &lt;C-\&gt;&lt;C-\&gt;s</div><div class="line">        \:vert scs find s &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-\&gt;&lt;C-\&gt;g</div><div class="line">        \:vert scs find g &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-\&gt;&lt;C-\&gt;c</div><div class="line">        \:vert scs find c &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-\&gt;&lt;C-\&gt;t</div><div class="line">        \:vert scs find t &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-\&gt;&lt;C-\&gt;e</div><div class="line">        \:vert scs find e &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line">nmap &lt;C-\&gt;&lt;C-\&gt;i</div><div class="line">        \:vert scs find i ^&lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;$&lt;CR&gt;</div><div class="line">nmap &lt;C-\&gt;&lt;C-\&gt;d</div><div class="line">        \:vert scs find d &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</div><div class="line"></div><div class="line">	</div><div class="line">&quot;-----------------------------------------------------------</div><div class="line">&quot;               color scheme</div><div class="line">&quot;                         https://github.com/altercation/vim-colors-solarized</div><div class="line">&quot;                         https://github.com/tomasr/molokai</div><div class="line">&quot;----------------------------------------------------------</div><div class="line"></div><div class="line">&quot;set background=light</div><div class="line">&quot;colorscheme solarized</div><div class="line"></div><div class="line">&quot;set background=dark</div><div class="line">&quot;colorscheme solarized</div><div class="line"></div><div class="line">colorscheme molokai</div><div class="line">let g:molokai_original = 1</div><div class="line"></div><div class="line">&quot;-----------------------------------------------------------</div><div class="line">&quot;               auto complete</div><div class="line">&quot;                   https://github.com/vim-scripts/OmniCppComplete</div><div class="line">&quot;----------------------------------------------------------</div><div class="line"></div><div class="line">let OmniCpp_MayCompleteDot = 1   &quot; 输入 .  后自动补全</div><div class="line">let OmniCpp_MayCompleteArrow = 1 &quot; 输入 -&gt; 后自动补全 </div><div class="line">let OmniCpp_MayCompleteScope = 1 &quot; 输入 :: 后自动补全 </div><div class="line">let OmniCpp_ShowPrototypeInAbbr = 1 &quot; 显示函数参数列表 </div><div class="line"></div><div class="line"></div><div class="line">&quot;-----------------------------------------------------------</div><div class="line">&quot;               syntastic</div><div class="line">&quot;             https://github.com/vim-syntastic/syntastic</div><div class="line">&quot;----------------------------------------------------------</div><div class="line">set statusline+=%#warningmsg#</div><div class="line">set statusline+=%&#123;SyntasticStatuslineFlag()&#125;</div><div class="line">set statusline+=%*</div><div class="line"></div><div class="line">let g:syntastic_always_populate_loc_list = 1</div><div class="line">let g:syntastic_auto_loc_list = 1</div><div class="line">let g:syntastic_check_on_open = 1</div><div class="line">let g:syntastic_check_on_wq = 0</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.vim.org/" target="_blank" rel="external">http://www.vim.org/</a><br><a href="https://www.zhihu.com/question/26713049/answer/33887444" target="_blank" rel="external">https://www.zhihu.com/question/26713049/answer/33887444</a><br><a href="https://github.com/VundleVim/Vundle.vim/wiki/Examples" target="_blank" rel="external">https://github.com/VundleVim/Vundle.vim/wiki/Examples</a></p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【小宇带你学PostgreSQL内核】第二课：开发环境]]></title>
      <url>http://shenyu.wiki/2016/12/11/%E3%80%90%E5%B0%8F%E5%AE%87%E5%B8%A6%E4%BD%A0%E5%AD%A6PostgreSQL%E5%86%85%E6%A0%B8%E3%80%91%E7%AC%AC%E4%BA%8C%E8%AF%BE%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<center><iframe height="498" width="510" src="http://player.youku.com/embed/XMTg1OTI5NTQ4NA==" frameborder="0" 'allowfullscreen'=""></iframe></center>

<a id="more"></a>
<h2 id="2-开发环境"><a href="#2-开发环境" class="headerlink" title="2. 开发环境"></a>2. 开发环境</h2><h3 id="2-1-编译环境"><a href="#2-1-编译环境" class="headerlink" title="2.1 编译环境"></a>2.1 编译环境</h3><p>linux<br>make  3.80<br>gcc/llvm-clang<br>Flex 2.5.31<br>Bison 1.875<br>Perl 5.8<br>libreadline<br>zlib<br>git<br>lcov<br>dtrace</p>
<h3 id="2-2-获取代码"><a href="#2-2-获取代码" class="headerlink" title="2.2 获取代码"></a>2.2 获取代码</h3><p>历史版本：wget <a href="https://ftp.postgresql.org/pub/source/vx.x.x/postgresql-x.x.x.tar.gz" target="_blank" rel="external">https://ftp.postgresql.org/pub/source/vx.x.x/postgresql-x.x.x.tar.gz</a><br>git clone     <a href="https://git.postgresql.org/git/postgresql.git" target="_blank" rel="external">https://git.postgresql.org/git/postgresql.git</a></p>
<h3 id="2-3-编辑器"><a href="#2-3-编辑器" class="headerlink" title="2.3 编辑器"></a>2.3 编辑器</h3><p><strong>vim</strong><br><strong>emacs</strong><br><strong>SourceInsight</strong></p>
<h3 id="2-4-编译"><a href="#2-4-编译" class="headerlink" title="2.4 编译"></a>2.4 编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">./configure \</div><div class="line">CC=&apos;gcc -O0 -gdwarf-2 -g3 &apos; \</div><div class="line">--prefix=`pwd`/release \</div><div class="line">--enable-debug \</div><div class="line">--enable-coverage \</div><div class="line">--enable-profiling \</div><div class="line">--enable-cassert \</div><div class="line">--enable-depend \</div><div class="line">--enable-dtrace</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ make</div><div class="line">$ make install</div><div class="line">$ ./initdb -D ../data</div><div class="line">$ ./postgres -D ../data</div><div class="line">$ ./psql  postgres</div><div class="line">psql (9.6.0)</div><div class="line">Type &quot;help&quot; for help.</div><div class="line">postgres=#</div></pre></td></tr></table></figure>
<h3 id="2-5-调试"><a href="#2-5-调试" class="headerlink" title="2.5 调试"></a>2.5 调试</h3><p>terminator：一个很好用的终端<br>gdb<br>ddd</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【小宇带你学PostgreSQL内核】第一课：课程简介]]></title>
      <url>http://shenyu.wiki/2016/12/11/%E3%80%90%E5%B0%8F%E5%AE%87%E5%B8%A6%E4%BD%A0%E5%AD%A6PostgreSQL%E5%86%85%E6%A0%B8%E3%80%91%E7%AC%AC%E4%B8%80%E8%AF%BE%EF%BC%9A%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<center><iframe height="498" width="510" src="http://player.youku.com/embed/XMTg1NzAxNjM4NA==" frameborder="0" 'allowfullscreen'=""></iframe></center>

<a id="more"></a>
<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ol>
<li>课程简介</li>
<li>开发环境</li>
<li>内核架构</li>
<li>parser</li>
<li>rewriter</li>
<li>optimizer</li>
<li>executor</li>
<li>access</li>
<li>storage</li>
<li>自己动手开发新特性</li>
</ol>
<hr>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>课程目标：通过该课程了解PostgreSQL数据库的基本架构，各个模块的基本流程，具备基础的内核开发能力。掌握内核的学习方法。<br>课程对象：数据库内核研发人员，高年级学生。<br>先学知识：C语言，sql基础，linux。</p>
<h3 id="历史与现状"><a href="#历史与现状" class="headerlink" title="历史与现状"></a>历史与现状</h3><p>A Brief History of PostgreSQL:<a href="https://www.postgresql.org/docs/9.6/static/history.html" target="_blank" rel="external">https://www.postgresql.org/docs/9.6/static/history.html</a><br>官方ABOUT：<a href="https://www.postgresql.org/about/" target="_blank" rel="external">https://www.postgresql.org/about/</a><br>ReleaseNotes：<a href="https://www.postgresql.org/docs/9.6/static/release.html" target="_blank" rel="external">https://www.postgresql.org/docs/9.6/static/release.html</a><br>数据库排行：<a href="http://db-engines.com/en/ranking" target="_blank" rel="external">http://db-engines.com/en/ranking</a></p>
<p>与MySQL相比优势何在：<br>1.特性<br>2.性能<br>3.开源<br><a href="https://www.zhihu.com/question/20010554" target="_blank" rel="external">https://www.zhihu.com/question/20010554</a><br><a href="http://v.youku.com/v_show/id_XNTk4MTQwNTI0.html?from=s1.8-1-1.2&amp;spm=a2h0k.8191407.0.0" target="_blank" rel="external">http://v.youku.com/v_show/id_XNTk4MTQwNTI0.html?from=s1.8-1-1.2&amp;spm=a2h0k.8191407.0.0</a></p>
<h3 id="国内搞pg的组织"><a href="#国内搞pg的组织" class="headerlink" title="国内搞pg的组织"></a>国内搞pg的组织</h3><p>阿里巴巴，腾讯，百度，华为，人大金仓，平安银行，国家电网，斯凯，去哪儿，同花顺，翰高，上容，武汉大学，人民大学，太阳塔，高德，沃趣，莲子数据。</p>
<h3 id="国际搞pg的组织"><a href="#国际搞pg的组织" class="headerlink" title="国际搞pg的组织"></a>国际搞pg的组织</h3><p>EnterpriseDB，TeraData，EMC（Greeplum），Fujitsu，2ndQuadrant</p>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p><strong>网站</strong></p>
<p>官网<a href="https://www.postgresql.org/" target="_blank" rel="external">https://www.postgresql.org/</a><br>github：<a href="https://git.postgresql.org/gitweb/" target="_blank" rel="external">https://git.postgresql.org/gitweb/</a><br>doxygen：<a href="https://doxygen.postgresql.org/" target="_blank" rel="external">https://doxygen.postgresql.org/</a><br>wiki：<a href="https://wiki.postgresql.org/wiki/Main_Page" target="_blank" rel="external">https://wiki.postgresql.org/wiki/Main_Page</a><br>FAQ：<a href="https://wiki.postgresql.org/wiki/Frequently_Asked_Questions" target="_blank" rel="external">https://wiki.postgresql.org/wiki/Frequently_Asked_Questions</a><br>TODO：<a href="https://wiki.postgresql.org/wiki/Todo" target="_blank" rel="external">https://wiki.postgresql.org/wiki/Todo</a><br>pg历年的会议资料：<a href="http://www.pgcon.org/" target="_blank" rel="external">http://www.pgcon.org/</a><br>hackers论坛：<a href="http://postgresql.nabble.com/" target="_blank" rel="external">http://postgresql.nabble.com/</a></p>
<p><strong>博客</strong></p>
<p>小宇的博客：<a href="http://www.shenyu.wiki/" target="_blank" rel="external">http://www.shenyu.wiki/</a><br>德哥：<a href="http://blog.163.com/digoal@126/blog/#m=0" target="_blank" rel="external">http://blog.163.com/digoal@126/blog/#m=0</a><br>国外：<a href="http://blog.pgaddict.com/" target="_blank" rel="external">http://blog.pgaddict.com/</a></p>
<p><strong>书籍</strong></p>
<p>《PostgreSQL修炼之道》<br>《数据库系统实现》<br>《PostgreSQL内核分析》<br>《数据查询优化器的艺术》<br>更多内容在这里：<a href="http://search.dangdang.com/?key=postgresql&amp;act=input" target="_blank" rel="external">http://search.dangdang.com/?key=postgresql&amp;act=input</a></p>
<p><strong>论文</strong><br>《The design of POSTGRES》<br>更多内容在这里：<a href="https://www.postgresql.org/docs/9.6/static/history.html" target="_blank" rel="external">https://www.postgresql.org/docs/9.6/static/history.html</a></p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL内存盘性能测试]]></title>
      <url>http://shenyu.wiki/2016/11/29/PostgreSQL%E5%86%85%E5%AD%98%E7%9B%98%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>磁盘IO是数据库性能的瓶颈。如果把数据放在内存盘上性能能提升多少呢？我也很好奇，于是用pg自带的pgbench测试了一下，结果表明在SSD硬盘上性能为207tps；在内存盘上性能为1897tps；性能提升了9倍。</p>
</blockquote>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>电脑品牌：Thinkpad X201<br>CPU:Intel(R) Core(TM) i7 CPU       M 620  @ 2.67GHz<br>SSD磁盘性能：<br>随机写：4k，162M/s，iops=40656<br>随机读：4k，178M/s，iops=55240<br>顺序写：362M/s<br>内存盘性能： 2.0 GB/s<br>内存：8G<br>数据库采用默认配置</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">$ cat /proc/cpuinfo </div><div class="line">processor	: 0</div><div class="line">vendor_id	: GenuineIntel</div><div class="line">cpu family	: 6</div><div class="line">model		: 37</div><div class="line">model name	: Intel(R) Core(TM) i7 CPU       M 620  @ 2.67GHz</div><div class="line">stepping	: 2</div><div class="line">microcode	: 0xe</div><div class="line">cpu MHz		: 2659.889</div><div class="line">cache size	: 4096 KB</div><div class="line"></div><div class="line">$ free -g</div><div class="line">              total        used        free      shared  buff/cache   available</div><div class="line">Mem:              7           1           2           2           3           3</div><div class="line">Swap:             7           0           7</div><div class="line"></div><div class="line">$ fio -direct=1 -iodepth=128 -rw=randwrite -ioengine=libaio -bs=4k -size=2G -numjobs=1 -runtime=10 -group_reporting -name=./tmp</div><div class="line">./tmp: (g=0): rw=randwrite, bs=4K-4K/4K-4K/4K-4K, ioengine=libaio, iodepth=128</div><div class="line">fio-2.2.10</div><div class="line">Starting 1 process</div><div class="line">Jobs: 1 (f=1): [w(1)] [100.0% done] [0KB/158.6MB/0KB /s] [0/40.6K/0 iops] [eta 00m:00s]</div><div class="line">./tmp: (groupid=0, jobs=1): err= 0: pid=16914: Tue Nov 29 20:24:40 2016</div><div class="line">  write: io=1591.0MB, bw=162626KB/s, iops=40656, runt= 10018msec</div><div class="line">    slat (usec): min=3, max=9846, avg=13.45, stdev=65.57</div><div class="line">    clat (usec): min=596, max=33299, avg=3131.62, stdev=1837.53</div><div class="line">     lat (usec): min=718, max=33324, avg=3145.41, stdev=1839.00</div><div class="line">    clat percentiles (usec):</div><div class="line">     |  1.00th=[  828],  5.00th=[ 1048], 10.00th=[ 1288], 20.00th=[ 1672],</div><div class="line">     | 30.00th=[ 1976], 40.00th=[ 2352], 50.00th=[ 2800], 60.00th=[ 3280],</div><div class="line">     | 70.00th=[ 3760], 80.00th=[ 4320], 90.00th=[ 5216], 95.00th=[ 6176],</div><div class="line">     | 99.00th=[ 9408], 99.50th=[11072], 99.90th=[16320], 99.95th=[20352],</div><div class="line">     | 99.99th=[28032]</div><div class="line">    bw (KB  /s): min=134968, max=178976, per=100.00%, avg=162657.65, stdev=8446.26</div><div class="line">    lat (usec) : 750=0.13%, 1000=3.92%</div><div class="line">    lat (msec) : 2=26.45%, 4=43.78%, 10=24.95%, 20=0.72%, 50=0.05%</div><div class="line">  cpu          : usr=10.98%, sys=52.95%, ctx=134871, majf=0, minf=11</div><div class="line">  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, &gt;=64=100.0%</div><div class="line">     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</div><div class="line">     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.1%</div><div class="line">     issued    : total=r=0/w=407296/d=0, short=r=0/w=0/d=0, drop=r=0/w=0/d=0</div><div class="line">     latency   : target=0, window=0, percentile=100.00%, depth=128</div><div class="line"></div><div class="line">Run status group 0 (all jobs):</div><div class="line">  WRITE: io=1591.0MB, aggrb=162625KB/s, minb=162625KB/s, maxb=162625KB/s, mint=10018msec, maxt=10018msec</div><div class="line"></div><div class="line">Disk stats (read/write):</div><div class="line">    dm-0: ios=0/403504, merge=0/0, ticks=0/998476, in_queue=999688, util=95.90%, aggrios=0/406834, aggrmerge=0/1774, aggrticks=0/1005596, aggrin_queue=1006352, aggrutil=95.37%</div><div class="line">  sda: ios=0/406834, merge=0/1774, ticks=0/1005596, in_queue=1006352, util=95.37%</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> $ fio -direct=1 -iodepth=128 -rw=randread -ioengine=libaio -bs=4k -size=2G -numjobs=1 -runtime=10 -group_reporting -name=./tmp</div><div class="line">./tmp: (g=0): rw=randread, bs=4K-4K/4K-4K/4K-4K, ioengine=libaio, iodepth=128</div><div class="line">fio-2.2.10</div><div class="line">Starting 1 process</div><div class="line">Jobs: 1 (f=1): [r(1)] [90.9% done] [178.3MB/0KB/0KB /s] [45.7K/0/0 iops] [eta 00m:01s]</div><div class="line">./tmp: (groupid=0, jobs=1): err= 0: pid=17067: Tue Nov 29 20:26:26 2016</div><div class="line">  read : io=2048.0MB, bw=220962KB/s, iops=55240, runt=  9491msec</div><div class="line">    slat (usec): min=1, max=6358, avg= 9.30, stdev=49.59</div><div class="line">    clat (usec): min=2, max=28539, avg=2305.34, stdev=1747.77</div><div class="line">     lat (usec): min=4, max=28556, avg=2314.95, stdev=1750.45</div><div class="line">    clat percentiles (usec):</div><div class="line">     |  1.00th=[  354],  5.00th=[  382], 10.00th=[  394], 20.00th=[  442],</div><div class="line">     | 30.00th=[ 1176], 40.00th=[ 1608], 50.00th=[ 2024], 60.00th=[ 2512],</div><div class="line">     | 70.00th=[ 3056], 80.00th=[ 3632], 90.00th=[ 4384], 95.00th=[ 5216],</div><div class="line">     | 99.00th=[ 7776], 99.50th=[ 9152], 99.90th=[13504], 99.95th=[15296],</div><div class="line">     | 99.99th=[19584]</div><div class="line">    bw (KB  /s): min=174240, max=184504, per=80.94%, avg=178856.28, stdev=3158.59</div><div class="line">    lat (usec) : 4=0.01%, 10=0.01%, 20=0.01%, 50=0.01%, 100=0.01%</div><div class="line">    lat (usec) : 250=0.02%, 500=21.63%, 750=1.12%, 1000=4.08%</div><div class="line">    lat (msec) : 2=22.54%, 4=35.98%, 10=14.26%, 20=0.35%, 50=0.01%</div><div class="line">  cpu          : usr=12.77%, sys=50.96%, ctx=127960, majf=0, minf=138</div><div class="line">  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, &gt;=64=100.0%</div><div class="line">     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</div><div class="line">     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.1%</div><div class="line">     issued    : total=r=524288/w=0/d=0, short=r=0/w=0/d=0, drop=r=0/w=0/d=0</div><div class="line">     latency   : target=0, window=0, percentile=100.00%, depth=128</div><div class="line"></div><div class="line">Run status group 0 (all jobs):</div><div class="line">   READ: io=2048.0MB, aggrb=220962KB/s, minb=220962KB/s, maxb=220962KB/s, mint=9491msec, maxt=9491msec</div><div class="line"></div><div class="line">Disk stats (read/write):</div><div class="line">    dm-0: ios=407296/3, merge=0/0, ticks=958808/12, in_queue=959388, util=93.58%, aggrios=406755/3, aggrmerge=541/1, aggrticks=956908/12, aggrin_queue=959268, aggrutil=92.23%</div><div class="line">  sda: ios=406755/3, merge=541/1, ticks=956908/12, in_queue=959268, util=92.23%</div><div class="line"></div><div class="line">$ dd if=/dev/zero of=./tmp bs=8k count=300000</div><div class="line">300000+0 records in</div><div class="line">300000+0 records out</div><div class="line">2457600000 bytes (2.5 GB, 2.3 GiB) copied, 6.793 s, 362 MB/s</div><div class="line"></div><div class="line">$ dd if=/dev/zero of=./tmp bs=8k count=300000</div><div class="line">300000+0 records in</div><div class="line">300000+0 records out</div><div class="line">2457600000 bytes (2.5 GB, 2.3 GiB) copied, 1.24375 s, 2.0 GB/s</div></pre></td></tr></table></figure>
<h2 id="data目录在磁盘上"><a href="#data目录在磁盘上" class="headerlink" title="data目录在磁盘上"></a>data目录在磁盘上</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ ./pgbench --client=16 --jobs=16  --time=20 --progress=1  postgres</div><div class="line">starting vacuum...end.</div><div class="line">progress: 1.0 s, 204.0 tps, lat 69.831 ms stddev 57.034</div><div class="line">progress: 2.0 s, 206.0 tps, lat 79.884 ms stddev 64.072</div><div class="line">progress: 3.0 s, 207.0 tps, lat 79.170 ms stddev 55.301</div><div class="line">progress: 4.0 s, 204.0 tps, lat 76.850 ms stddev 43.849</div><div class="line">progress: 5.0 s, 207.0 tps, lat 77.856 ms stddev 44.732</div><div class="line">progress: 6.0 s, 190.0 tps, lat 84.452 ms stddev 70.720</div><div class="line">progress: 7.0 s, 211.0 tps, lat 75.539 ms stddev 49.628</div><div class="line">progress: 8.0 s, 210.0 tps, lat 75.229 ms stddev 51.632</div><div class="line">progress: 9.0 s, 211.0 tps, lat 75.075 ms stddev 49.451</div><div class="line">progress: 10.0 s, 207.0 tps, lat 79.154 ms stddev 63.283</div><div class="line">progress: 11.0 s, 212.0 tps, lat 76.071 ms stddev 47.042</div><div class="line">progress: 12.0 s, 209.9 tps, lat 74.868 ms stddev 59.072</div><div class="line">progress: 13.0 s, 210.1 tps, lat 77.152 ms stddev 51.673</div><div class="line">progress: 14.0 s, 210.0 tps, lat 76.003 ms stddev 51.179</div><div class="line">progress: 15.0 s, 210.0 tps, lat 75.999 ms stddev 62.302</div><div class="line">progress: 16.0 s, 210.0 tps, lat 74.284 ms stddev 44.574</div><div class="line">progress: 17.0 s, 210.0 tps, lat 78.569 ms stddev 54.181</div><div class="line">progress: 18.0 s, 207.0 tps, lat 77.143 ms stddev 57.839</div><div class="line">progress: 19.0 s, 207.0 tps, lat 75.662 ms stddev 52.170</div><div class="line">progress: 20.0 s, 210.0 tps, lat 75.412 ms stddev 60.447</div><div class="line">transaction type: TPC-B (sort of)</div><div class="line">scaling factor: 1</div><div class="line">query mode: simple</div><div class="line">number of clients: 16</div><div class="line">number of threads: 16</div><div class="line">duration: 20 s</div><div class="line">number of transactions actually processed: 4169</div><div class="line">latency average: 76.853 ms</div><div class="line">latency stddev: 55.239 ms</div><div class="line">tps = 207.607456 (including connections establishing)</div><div class="line">tps = 207.748916 (excluding connections establishing)</div></pre></td></tr></table></figure>
<h2 id="data目录在内存中"><a href="#data目录在内存中" class="headerlink" title="data目录在内存中"></a>data目录在内存中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ ./pgbench --client=16 --jobs=16  --time=20 --progress=1  postgres</div><div class="line">starting vacuum...end.</div><div class="line">progress: 1.0 s, 1710.8 tps, lat 9.217 ms stddev 5.359</div><div class="line">progress: 2.0 s, 2055.9 tps, lat 7.771 ms stddev 4.212</div><div class="line">progress: 3.0 s, 1837.2 tps, lat 8.704 ms stddev 5.085</div><div class="line">progress: 4.0 s, 1989.9 tps, lat 7.992 ms stddev 4.249</div><div class="line">progress: 5.0 s, 1856.2 tps, lat 8.680 ms stddev 5.048</div><div class="line">progress: 6.0 s, 1971.6 tps, lat 8.122 ms stddev 4.327</div><div class="line">progress: 7.0 s, 1804.0 tps, lat 8.834 ms stddev 5.235</div><div class="line">progress: 8.0 s, 1973.6 tps, lat 8.124 ms stddev 4.456</div><div class="line">progress: 9.0 s, 2152.9 tps, lat 7.434 ms stddev 4.087</div><div class="line">progress: 10.0 s, 1843.9 tps, lat 8.665 ms stddev 5.084</div><div class="line">progress: 11.0 s, 2077.6 tps, lat 7.698 ms stddev 4.675</div><div class="line">progress: 12.0 s, 1662.5 tps, lat 9.637 ms stddev 5.916</div><div class="line">progress: 13.0 s, 1853.4 tps, lat 8.615 ms stddev 4.853</div><div class="line">progress: 14.0 s, 1812.1 tps, lat 8.840 ms stddev 4.836</div><div class="line">progress: 15.0 s, 2052.6 tps, lat 7.798 ms stddev 4.230</div><div class="line">progress: 16.0 s, 1892.0 tps, lat 8.444 ms stddev 4.816</div><div class="line">progress: 17.0 s, 1712.4 tps, lat 9.321 ms stddev 5.256</div><div class="line">progress: 18.0 s, 1856.6 tps, lat 8.637 ms stddev 4.602</div><div class="line">progress: 19.0 s, 1753.9 tps, lat 9.130 ms stddev 5.089</div><div class="line">progress: 20.0 s, 2071.4 tps, lat 7.719 ms stddev 4.375</div><div class="line">transaction type: TPC-B (sort of)</div><div class="line">scaling factor: 1</div><div class="line">query mode: simple</div><div class="line">number of clients: 16</div><div class="line">number of threads: 16</div><div class="line">duration: 20 s</div><div class="line">number of transactions actually processed: 37956</div><div class="line">latency average: 8.430 ms</div><div class="line">latency stddev: 4.822 ms</div><div class="line">tps = 1896.061501 (including connections establishing)</div><div class="line">tps = 1897.040816 (excluding connections establishing)</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在磁盘上性能为207tps<br>在内存上性能为1897tps<br>提升了9倍。</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[好书推荐：《Debug hacks——深入调试的技术和工具》]]></title>
      <url>http://shenyu.wiki/2016/11/27/%E5%A5%BD%E4%B9%A6%E6%8E%A8%E8%8D%90%EF%BC%9A%E3%80%8ADebug-hacks%E2%80%94%E2%80%94%E6%B7%B1%E5%85%A5%E8%B0%83%E8%AF%95%E7%9A%84%E6%8A%80%E6%9C%AF%E5%92%8C%E5%B7%A5%E5%85%B7%E3%80%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近偶然发现了这本书，翻看过后很多之前疑惑的问题豁然开朗。这本书虽然是以内核研发作为探讨对象，但是对PostgreSQL发生的coredump分析非常有用。一些引发coredump的问题比如内存非法访问的排查和分析这本书里面都有着深入的讲解。另外这本书也介绍了汇编语言如何在调试过程中发挥重要作用，同时介绍了很多调试工具如gdb、objdump、nm、strace、valgrind等等，而且讲解比较贴近于实战。<br>当然，还有很多没有涵盖的部分，比如如何预防写出bug这些方面。如果能够讲到代码规范、单元测试等等更加系统知识会更好。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/6cpy5loa4ivyfzj8n5yoi4aj/image_1b2d9g2k51tkmrhftg9j1es1s9.png" alt="在此输入正文"></p>
<a id="more"></a>
<p>作者简介<br> 作者：（日本）吉岡弘隆 （日本）大和一洋 （日本）大岩尚宏 等 译者：马晶慧</p>
<p>目录<br>第1章 热身准备 1<br>      1．调试是什么 1<br>      2．debug hacks的地图 4<br>      3．调试的心得 6<br>第2章 调试前的必知必会 13<br>      4．获取进程的内核转储 13<br>      5．调试器（gdb）的基本使用方法（之一） 18<br>      6．调试器（gdb）的基本使用方法（之二） 32<br>      7．调试器（gdb）的基本使用方法（之三） 39<br>      8．intel架构的基本知识 45<br>      9．调试时必需的栈知识 52<br>      10．函数调用时的参数传递方法（x86_64篇） 61<br>      11．函数调用时的参数传递方法（i386篇） 66<br>      12．函数调用时的参数传递方法（c++篇） 69<br>      13．怎样学习汇编语言 72<br>      14．从汇编代码查找相应的源代码 77<br>第3章 内核调试的准备 87<br>      15．oops信息的解读方法 87<br>      16．使用minicom进行串口连接 90<br>      17．通过网络获取内核消息 94<br>      18．使用sysrq键调试 98<br>      19．使用diskdump获取内核崩溃转储 104<br>      20．使用kdump获取内核崩溃转储 110<br>      21．crash命令的使用方法 113<br>      22．死机时利用ipmi watchdog timer获取崩溃转储 126<br>      23．用nmi watchdog在死机时获取崩溃转储 131<br>      24．内核独有的汇编指令（之一） 132<br>      25．内核独有的汇编指令（之二） 136<br>第4章 应用程序调试实践 139<br>     26．发生sigsegv，应用程序异常停止 139<br>     27．backtrace无法正确显示 147<br>     28．数组非法访问导致内存破坏 151<br>     29．利用监视点检测非法内存访问 157<br>     30．malloc()和free()发生故障 160<br>     31．应用程序停止响应（死锁篇） 163<br>     32．应用程序停止响应（死循环篇） 168<br>第5章 实践内核调试 177<br>     33．kernel panic（空指针引用篇） 177<br>     34．kernel panic（链表破坏篇） 184<br>     35．kernel panic 192<br>     36．内核停止响应（死循环篇） 205<br>     37．内核停止响应（自旋锁篇之一） 212<br>     38．内核停止响应（自旋锁篇之二） 215<br>     39．内核停止响应（信号量篇） 221<br>     40．实时进程停止响应 232<br>     41．运行缓慢的故障 240<br>     42．cpu负载过高的故障 245<br>第6章 高手们的调试技术 259<br>     43．使用strace寻找故障原因的线索 259<br>     44．objdump的方便选项 264<br>     45．valgrind的使用方法（基本篇） 267<br>     46．valgrind的使用方法（实践篇） 272<br>     47．利用kprobes获取内核内部信息 275<br>     48．使用jprobes查看内核内部的信息 280<br>     49．使用kprobes获取内核内部任意位置的信息 282<br>     50．使用kprobes在内核内部任意位置通过变量名获取信息 287<br>     51．使用kaho获取被编译器优化掉的变量的值 291<br>     52．使用systemtap调试运行中的内核（之一） 297<br>     53．使用systemtap调试运行中的内核（之二） 303<br>     54．/proc/meminfo中的宝藏 307<br>     55．用/proc/[pid]/mem快速读取进程的内存内容 311<br>     56．oom killer的行为和原理 315<br>     57．错误注入 323<br>     58．利用错误注入发现linux内核的潜在bug 328<br>     59．linux内核的init节 334<br>     60．解决性能问题 337<br>     61．利用vmware vprobe获取信息 346<br>     62．用xen获取内存转储 350<br>     63．理解用got/plt调用函数的原理 352<br>     64．调试initramfs镜像 357<br>     65．使用rt watchdog检测失去响应的实时进程 362<br>     66．查看手头的x86机器是否支持64位模式 366<br>    附录 debug hacks术语的基础知识 369<br>    索引 379</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[缓冲区溢出的那些事儿]]></title>
      <url>http://shenyu.wiki/2016/11/26/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>缓冲区溢出是引发程序崩溃的常见原因之一，也常常被黑客利用来发起攻击。缓冲区溢出引发的bug常常难以定位。那么缓冲区溢出问题有什么现象呢？如何找出蛛丝马迹从而何定位缓冲区溢出问题呢？</p>
</blockquote>
<a id="more"></a>
<p>什么是缓冲区？缓冲区就是在程序中开辟的一块区域。这块区域可以在堆上也可以在栈上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int function()</div><div class="line">&#123;</div><div class="line">    char buffer1[256]; // 在栈上的缓冲区</div><div class="line">    </div><div class="line">    char *buffer2 = (char *)malloc(sizeof(char)*256); //在堆上的缓冲区</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一般来说，用malloc分配的内存区域在堆上；直接声明的缓冲区数组是在栈上。堆上的缓冲区溢出和栈上的缓冲区后果是不一样的。在堆上的缓冲区溢出的后果一般，可能覆盖了临近的内存，当然如果临近的内存中有函数指针，也可能照成程序运行到错误的地址。在栈上的缓冲区溢出的后果往往更严重，因为可能破坏了程序的返回地址。下面我们分别对这两种情况进行讨论。</p>
<h2 id="栈上的缓冲区溢出"><a href="#栈上的缓冲区溢出" class="headerlink" title="栈上的缓冲区溢出"></a>栈上的缓冲区溢出</h2><p>我们有个程序运行中崩溃，生成core文件，用gdb查看堆栈如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(gdb) bt</div><div class="line">#0  0x00000000004004f7 in f () at main.c:11</div><div class="line">Cannot access memory at address 0x646c726f77206f74</div></pre></td></tr></table></figure></p>
<p>堆栈显示在函数<code>f()</code>函数处崩溃，崩溃的指令地址是<code>0x4004f7</code>，崩溃的原因是不能访问内存<code>0x646c726f77206f74</code>区域。同时我们找不到f的调用者。<br>我们通过汇编，进一步分析问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(gdb) disas f</div><div class="line">Dump of assembler code for function f:</div><div class="line">0x00000000004004f6 &lt;f+94&gt;:	leaveq </div><div class="line">0x00000000004004f7 &lt;f+95&gt;:	retq     #程序在返回时出错</div></pre></td></tr></table></figure></p>
<p>发现程序在运行到<code>retq</code>指令出错。<code>retq</code>是程序结束时返回到调用者的指令，返回地址记录在栈上，结合程序不能访问内存<code>0x646c726f77206f74</code>区域，而且我们找不到调用者，我们有理由怀疑是程序的栈被破坏了。寄存器rsp和rbp中保存了栈的起始位置，如下图。<br><img src="http://static.zybuluo.com/shenyuflying/rboak7n33mxnoszte96b2y5g/image_1b2g8vaneki8o8su5a1dhh1k1v9.png" alt="image_1b2g8vaneki8o8su5a1dhh1k1v9.png-27kB"><br>所以我们接下来来检查寄存器rsp和rbp，看能否有所发现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(gdb) p (char *)$rsp</div><div class="line">$1 = 0x7fffffffde30 &quot;Hello world, Hello world, Hello world&quot;</div><div class="line">(gdb) p (char *)$rbp</div><div class="line">$2 = 0x7fffffffde40 &quot;lo world, Hello world&quot;</div></pre></td></tr></table></figure></p>
<p>额，他们之中居然是字符串，而不是地址。很显然是缓冲区溢出覆盖了rsp和rbp。那么程序不能访问的地址<code>0x646c726f77206f74</code>是什么呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(gdb) p (char)0x64</div><div class="line">$3 = 100 &apos;d&apos;</div><div class="line">(gdb) p (char)0x6c</div><div class="line">$4 = 108 &apos;l&apos;</div><div class="line">(gdb) p (char)0x72</div><div class="line">$5 = 114 &apos;r&apos;</div><div class="line">(gdb) p (char)0x6f</div><div class="line">$6 = 111 &apos;o&apos;</div><div class="line">(gdb) p (char)0x77</div><div class="line">$7 = 119 &apos;w&apos;</div></pre></td></tr></table></figure></p>
<p>发现地址<code>0x646c726f77206f74</code>其实就是字符串world。<br>好了，问题定位出来了，那么如何来找到代码中的位置从而修复问题呢？我们在代码中搜索<code>world</code>这个字符串，发现如下函数，在栈上申请了2个字节，却写入了大于2个字节的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int f()</div><div class="line">&#123;</div><div class="line">	char buff[2];</div><div class="line">	strcpy(buff,&quot;Hello world, Hello world, Hello world&quot;);</div><div class="line">	printf(&quot;%s\n&quot;,buff);</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="堆上的的缓冲区溢出"><a href="#堆上的的缓冲区溢出" class="headerlink" title="堆上的的缓冲区溢出"></a>堆上的的缓冲区溢出</h2><p>程序在core之后，我们看堆栈时往往发现最上层的函数是问号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(gdb) bt</div><div class="line">#0  0x000000646c726f77 in ?? ()</div><div class="line">#1  0x0000000000400568 in f () at main.c:18</div><div class="line">#2  0x000000000040057d in main () at main.c:24</div></pre></td></tr></table></figure></p>
<p>也就是说这个地址gdb并不知道对应的是什么函数。我们只好从第#1处开始寻找蛛丝马迹了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(gdb) info locals</div><div class="line">fp = 0x602030</div><div class="line">(gdb) p *fp</div><div class="line">$1 = (FP) 0x646c726f77</div><div class="line">(gdb) p (char *)fp</div><div class="line">$2 = 0x1b17c030 &quot;world&quot;</div></pre></td></tr></table></figure></p>
<p>进一步调试我们发现<code>fp</code>指向的地址变为world了。这也是一个典型的缓冲区溢出问题。出问题的代码定位如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">int f()</div><div class="line">&#123;</div><div class="line">	char *buf1 = (char *)malloc(sizeof(char)*1);</div><div class="line">	FP     *fp = (FP *)malloc(sizeof(FP)*1);</div><div class="line">	*fp = msg;</div><div class="line">	strcpy(buf1,&quot;Hello world, Hello world, Hello world&quot;);</div><div class="line">	(*fp)();</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，在实际程序中不一定都是字符串引起的缓冲区溢出，也有可能是二进制。这时候就需要我们把握缓冲区溢出的几个现象来定位问题。缓冲区溢出的现象我们总结一下：</p>
<ol>
<li>ret的时候发生错误，并且rsp rbp的地址不合理。怀疑是栈上的缓冲区溢出。</li>
<li>程序的函数指针错误或者临近的内存区域被破坏，怀疑是堆上的缓冲区溢出。</li>
<li>发生缓冲区溢出时，根据错误位置来查找代码中可疑的溢出缓冲区。</li>
</ol>
<p>定位问题往往很难，那么我们如何在编程的时候就确保不会发生缓冲区溢出呢？</p>
<h2 id="编译可以自己检查缓冲区溢出的程序"><a href="#编译可以自己检查缓冲区溢出的程序" class="headerlink" title="编译可以自己检查缓冲区溢出的程序"></a>编译可以自己检查缓冲区溢出的程序</h2><p>如果我们有程序的代码，可以在编译时加上<code>-fsanitize=address</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -g -O0 -fsanitize=address   -o main main.c</div></pre></td></tr></table></figure></p>
<p>这样编译过后的程序就会自带缓冲区溢出保护功能。如果运行时发生缓冲区溢出问题就会报错：<br><img src="http://static.zybuluo.com/shenyuflying/66vzc26db033zmnobl8xu9v3/image_1b2ddtar8ar31lv61upg143j1i449.png" alt="image_1b2ddtar8ar31lv61upg143j1i449.png-173.4kB"><br>输出的是彩色的，好漂亮。怎么做到的呢？参考<a href="http://www.cnblogs.com/hnrainll/archive/2011/07/01/2095912.html" target="_blank" rel="external">这里</a><br>对于堆上缓冲区溢出这种方法同样有效。</p>
<h2 id="valgrind检查缓冲区溢出"><a href="#valgrind检查缓冲区溢出" class="headerlink" title="valgrind检查缓冲区溢出"></a>valgrind检查缓冲区溢出</h2><p>如果我们没有程序的代码，或者不允许我们再次编译程序，但是需要我们定位问题，那么可以用<code>valgrind</code>工具来检查缓冲区溢出的问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> $ valgrind  --leak-check=full ./heap </div><div class="line">==3854== Invalid write of size 8</div><div class="line">==3854==    at 0x4005B4: f (heap.c:17)</div><div class="line">==3854==    by 0x40060B: main (heap.c:24)</div><div class="line">==3854==  Address 0x5203040 is 0 bytes inside a block of size 1 alloc&apos;d</div></pre></td></tr></table></figure>
<p>valgrind会报<code>Invalid write of size 8</code>，发现非法内存写入和详细的位置。</p>
<h2 id="在程序中加上保护"><a href="#在程序中加上保护" class="headerlink" title="在程序中加上保护"></a>在程序中加上保护</h2><p>缓冲区溢出往往是程序员的责任。根据缓冲区溢出的原理，自己在容易发生溢出的函数中加上保护。在栈底加个MAGICNUMBER，如果这个值被改了，那么说明是栈被破坏了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line">#define MAGIC 1989</div><div class="line">#define F_INTER int __a=MAGIC;</div><div class="line">#define F_EXIT  \</div><div class="line">        if(__a!=MAGIC) \</div><div class="line">            printf(&quot;stack error in %s, magic=%d\n&quot;,__func__,__a);</div><div class="line">void foo()</div><div class="line">&#123;</div><div class="line">    F_INTER</div><div class="line">    int buf[1]=&#123;0&#125;;</div><div class="line">    buf[0]=1;</div><div class="line">    buf[1]=2;</div><div class="line">    buf[2]=3;</div><div class="line">    buf[3]=4;</div><div class="line">    buf[4]=5;</div><div class="line">    buf[5]=6;</div><div class="line">    buf[6]=7;</div><div class="line">    F_EXIT</div><div class="line">    return;</div><div class="line">&#125;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    foo();</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ./main2</div><div class="line">stack error in foo, magic=4</div><div class="line">Segmentation fault (core dumped)</div></pre></td></tr></table></figure>
<p>程序在报错之前，会打出缓冲区溢出错误。方便直接定位问题。<br>好了，看到这里相信你对缓冲区溢出的那些事儿了解一些了吧，但愿你在下次遇到缓冲区的问题能够快速定位。</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入理解静态链接库和动态链接库]]></title>
      <url>http://shenyu.wiki/2016/11/21/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>为什么要使用链接库？大概有如下几个原因：1.利用前人为我们写好的库，比如数学库libm.so，免去再造轮子的困扰。2.充分使得程序的模块化，方便开发和后期升级。 3. 减小可执行文件的体积。链接库分为静态链接库、动态链接库。动态链接库还有不同的使用形式。那么他们的区别是什么？在什么情况下使用？编程时需要考虑那些方面呢？</p>
</blockquote>
<a id="more"></a>
<h2 id="静态库-static-linking-library"><a href="#静态库-static-linking-library" class="headerlink" title="静态库 static linking library"></a>静态库 static linking library</h2><p>静态库一般命名为<code>libxxx.a</code>，其中<code>xxx</code>是库的名字。利用静态库方式编译生成的可执行程序的体积一般比较大一些。因为整个静态库的内容都会被链接到代码中。由此，我们可以发现他的优点，即编译后的科执行程序不依赖任何外部的库文件。这点可以很好的保证程序的可部署性，因为不用再考虑库的兼容性和依赖性。其缺点也是显而易见，即对库做的修改，必须重新编译整个可执行程序。升级也需要替换整个可执行程序。对于一些不间断运行程序，比如数据库软件，升级后需要重启。<br>无论静态库还是动态库，都是利用<code>gcc</code>生成的。<code>gcc</code>经过<code>预处理</code>、<code>编译</code>、<code>链接</code>三个步骤生成可执行文件，静态库的生成只需要前两步，gcc的<code>-c</code>选项就是让gcc只做<code>预处理</code>、<code>编译</code>两步。通过这两步由<code>libmy.c</code>生成了<code>libmy.o</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gcc -c libmy.c</div></pre></td></tr></table></figure></p>
<p>接下来就是用<code>ar</code>命令把一个或几个<code>.o</code>文件放到一个<code>.a</code>文件中。<br><code>-c</code>：创建一个a文件<br><code>-r</code>：加入新的o文件时候，如果重名，就采取替换的方法<br><code>-s</code>：加入一个o文件的索引<br><code>-v</code>：输出详细的过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ar -crsv libmy.a libmy.o</div></pre></td></tr></table></figure></p>
<p>下一步就是先编译main.c文件，然后把生成的main.o文件和libmy.a库文件链接到一起。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ gcc -c main.c</div><div class="line">$ gcc main.o -o main -L. -lmy</div></pre></td></tr></table></figure></p>
<p>把上述过程写成<code>Makefile</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ cat Makefile </div><div class="line">all:main</div><div class="line"></div><div class="line">main: main.o libmy.a</div><div class="line">	gcc main.o -o main -L. -lmy</div><div class="line">libmy.a: libmy.o</div><div class="line">	ar -crsv libmy.a libmy.o</div><div class="line">libmy.o: libmy.c</div><div class="line">	gcc -c libmy.c</div><div class="line">clean:</div><div class="line">	-rm *.o *.a</div></pre></td></tr></table></figure></p>
<p>下面我们看看<code>nm</code>生成的可执行程序的内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nm main | grep add</div><div class="line">0000000000400551 T add</div></pre></td></tr></table></figure>
<p><code>add</code>函数别标记为<code>T</code>：该符号在text section文本段中，说明该函数的内容已经在可执行程序中了。<br>接下来用<code>objdump</code>来看一下链接库中的<code>add</code>函数内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ objdump -S main</div><div class="line">0000000000400551 &lt;add&gt;:</div><div class="line">  400551:       55                      push   %rbp</div><div class="line">  400552:       48 89 e5                mov    %rsp,%rbp</div><div class="line">  400555:       89 7d fc                mov    %edi,-0x4(%rbp)</div><div class="line">  400558:       89 75 f8                mov    %esi,-0x8(%rbp)</div><div class="line">  40055b:       8b 55 fc                mov    -0x4(%rbp),%edx</div><div class="line">  40055e:       8b 45 f8                mov    -0x8(%rbp),%eax</div><div class="line">  400561:       01 d0                   add    %edx,%eax</div><div class="line">  400563:       5d                      pop    %rbp</div><div class="line">  400564:       c3                      retq   </div><div class="line">  400565:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</div><div class="line">  40056c:       00 00 00 </div><div class="line">  40056f:       90                      nop</div></pre></td></tr></table></figure>
<p>链接库libmy.a已经完全到可执行程序main中，运行时不需要再依赖libmy.a了。add的地址是<code>400551</code>函数的实际地址，运行时add的地址就是这个。下面我们用<code>gdb</code>调试一把：<br><img src="http://static.zybuluo.com/shenyuflying/15eza7grqujx34uglno2tsif/image_1b23ic9nf1gl52cfqnv1dhjmao9.png" alt="image_1b23ic9nf1gl52cfqnv1dhjmao9.png-48kB"></p>
<h2 id="动态链接库-dynamic-linking-library"><a href="#动态链接库-dynamic-linking-library" class="headerlink" title="动态链接库 dynamic linking library"></a>动态链接库 dynamic linking library</h2><p>和静态库不同，正如其名字所说，动态库在编译的时候并没有编译到目标代码中，而是在程序执行的时候才打开库文件并载入库文件中的相应函数。因此，该种方法生成的可执行程序比较小。同时，在程序有bug时，定位到某个库文件，只需要替换相应的so文件就可以了。不需要替换整个科执行程序。但是缺点也是显而易见，在程序部署的时候必须确保环境的库文件版本正确，否则程序无法运行。<br>在编译动态库时，需要加上如下参数：</p>
<p><code>-fPIC</code>：生成位置无关代码（position-independent code）。在PIC代码中，所有的地址是通过一个global offset table(GOT)的偏移量访问的。这种特性正好服务于动态库，因为其载入的地址不是确定的。<br><code>-shared</code>：生成共享目标文件，支持动态连接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gcc -fPIC -shared -o libmy.so libmy.c</div></pre></td></tr></table></figure></p>
<p>动态链接库的加载方式有2中，即在编译时指定和运行时指定。</p>
<h3 id="编译时指定"><a href="#编译时指定" class="headerlink" title="编译时指定"></a>编译时指定</h3><p>这种方式，是在<code>gcc</code>编译时指定<code>-lxxx</code>库文件。程序在运行时，查找系统中的相关库文件，并由操作系统加载想干的库文件。这种方式不用在编码过程中做出特殊处理，在编程方面和静态库类似。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gcc main.o -o main -L. -lmy</div></pre></td></tr></table></figure>
<p>把上述内容写成<code>Makefile</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ cat Makefile</div><div class="line">all:main</div><div class="line"></div><div class="line">main: main.c libmy.so</div><div class="line">    gcc main.c -o main -L. -lmy</div><div class="line">libmy.so: libmy.c</div><div class="line">    gcc -fPIC -shared -o libmy.so libmy.c</div><div class="line">clean:</div><div class="line">    -rm *.o *.so main</div></pre></td></tr></table></figure></p>
<p>如果操作系统在加载动态库的过程中，没有找到相关文件，那么会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./main </div><div class="line">./main: error while loading shared libraries: libmy.so: cannot open shared object file: No such file or directory</div></pre></td></tr></table></figure></p>
<p>这时候需要你把库文件放到正确的位置，比如<code>/usr/lib</code>下面。或者指定<code>LD_LIBRARY_PATH</code>环境变量。之后，用<code>ldd</code>命令查看是否找到了库文件，以及库文件的路径是否正确。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ldd ./main</div><div class="line">	linux-vdso.so.1 =&gt;  (0x00007ffe2db85000)</div><div class="line">	libmy.so =&gt; ./libmy.so (0x00007f3d5a6a8000)</div><div class="line">	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f3d5a2b8000)</div><div class="line">	/lib64/ld-linux-x86-64.so.2 (0x0000555f008f0000)</div></pre></td></tr></table></figure></p>
<p>下面我们用<code>nm</code>来看一下main的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nm main | grep add</div><div class="line">                 U add</div></pre></td></tr></table></figure></p>
<p>add函数被标记为<code>U</code>，即Undefined未定义。说明main可执行文件中没有add的二进制代码。那么在运行时如何找到add的地址呢？我们分析一下汇编语言：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">00000000004006c6 &lt;main&gt;:</div><div class="line">  4006c6:   55                      push   %rbp</div><div class="line">  4006c7:   48 89 e5                mov    %rsp,%rbp</div><div class="line">  4006ca:   be 01 00 00 00          mov    $0x1,%esi</div><div class="line">  4006cf:   bf 01 00 00 00          mov    $0x1,%edi</div><div class="line">  4006d4:   e8 b7 fe ff ff          callq  400590 &lt;add@plt&gt;</div><div class="line">  4006d9:   89 c6                   mov    %eax,%esi</div><div class="line">  4006db:   bf 84 07 40 00          mov    $0x400784,%edi</div><div class="line">  4006e0:   b8 00 00 00 00          mov    $0x0,%eax</div><div class="line">  4006e5:   e8 b6 fe ff ff          callq  4005a0 &lt;printf@plt&gt;</div><div class="line">  4006ea:   b8 00 00 00 00          mov    $0x0,%eax</div><div class="line">  4006ef:   5d                      pop    %rbp</div><div class="line">  4006f0:   c3                      retq</div><div class="line">  4006f1:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</div><div class="line">  4006f8:   00 00 00 </div><div class="line">  4006fb:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</div></pre></td></tr></table></figure>
<p>看到程序在准备好参数之后执行了<code>callq  400590 &lt;add@plt&gt;</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0000000000400590 &lt;add@plt&gt;:</div><div class="line">  400590:   ff 25 82 0a 20 00       jmpq   *0x200a82(%rip)      </div><div class="line">  400596:   68 00 00 00 00          pushq  $0x0</div><div class="line">  40059b:   e9 e0 ff ff ff          jmpq   400580 &lt;_init+0x20&gt;</div></pre></td></tr></table></figure></p>
<p>接下来实际上是调用<code>libc</code>的<code>_dl_runtime_resolve_sse</code>把函数<code>add</code>的地址解析出来并保存到<code>plt</code>中。下次运行到这里直接可以jmpq到add函数的地址，不用再次解析地址了。关于这个过程之后再开贴讨论。<br>可以看出来，动态链接库的地址一般都很大。</p>
<h3 id="运行时指定"><a href="#运行时指定" class="headerlink" title="运行时指定"></a>运行时指定</h3><p>这种方法是最复杂的也是最灵活的。因为动态链接库是在程序运行之后才加载的。这样能够在程序不中断的情况下替换动态链接库。这个特性非常适合数据库等需要长时间运行的软件。升级的时候，不需要停机，只需替换动态链接库文件，然后让程序再次载入即可。同时因为是在运行时指定动态链接库的位置，需要在程序编码中处理动态链接库的加载。<br>在编码过程中需要加上<code>dlfcn.h</code>头文件，该文件提供了一系列操作动态链接库的函数，比如：</p>
<p><code>dlopen</code>：打开<code>.so</code>库文件，并返回一个<code>handle</code>用于以下函数<br><code>dlsym</code>：在库文件中根据<code>函数名</code>找到函数地址并返回<br><code>dlclose</code>：关闭库文件<br>我们就用这几个函数来完成动态链接库的加载。在编译的时候需要在gcc后面加上<code>-ldl</code>已加载libdl.so库。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;dlfcn.h&gt;</span> <span class="comment">/* dlopen dlsym dlclose dlerror */</span></span></div><div class="line"></div><div class="line"><span class="comment">/* import from libmy.so */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LIBMY <span class="meta-string">"./libmy.so"</span></span></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*add_fp)</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">void</span> *handle = <span class="literal">NULL</span>;</div><div class="line">    add_fp add = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">char</span> *error = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    handle = dlopen(LIBMY, RTLD_LAZY);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (handle == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"erro opening %s\n"</span>, LIBMY);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dlerror(); <span class="comment">/* clear any existing error */</span></div><div class="line"></div><div class="line">    add = (add_fp)dlsym(handle,<span class="string">"add"</span>);</div><div class="line"></div><div class="line">    error = dlerror();</div><div class="line">    <span class="keyword">if</span> (error != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"error dlsym: %s\n"</span>, error);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(*add)(<span class="number">1</span>,<span class="number">1</span>));</div><div class="line">    dlclose(handle);</div><div class="line"></div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>把上述内容写成<code>Makefile</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ cat Makefile </div><div class="line">all:main</div><div class="line"></div><div class="line">main: main.c</div><div class="line">	gcc main.c -ldl -o main</div><div class="line">clean:</div><div class="line">	-rm main</div></pre></td></tr></table></figure></p>
<p>该方法，<code>ldd</code>是看不到需要那些库文件的。如果需要的库文件不存在，程序在运行时才会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ldd ./main</div><div class="line">	linux-vdso.so.1 =&gt;  (0x00007fffaebf1000)</div><div class="line">	libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fa182e3f000)</div><div class="line">	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa182a76000)</div><div class="line">	/lib64/ld-linux-x86-64.so.2 (0x0000559bfc525000)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入理解PostgreSQL查询优化引擎]]></title>
      <url>http://shenyu.wiki/2016/11/21/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PostgreSQL%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<p><img src="http://static.zybuluo.com/shenyuflying/jvqhy0z9ktshjd06tcvfifcm/%E5%B9%BB%E7%81%AF%E7%89%871.png" alt="幻灯片1.png-34.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/q0yatpul7e0m3iiunk9j389t/%E5%B9%BB%E7%81%AF%E7%89%872.png" alt="幻灯片2.png-52.9kB"><br><a id="more"></a><br><img src="http://static.zybuluo.com/shenyuflying/877ir8ozck08wdhd1h4t1rvi/%E5%B9%BB%E7%81%AF%E7%89%873.png" alt="幻灯片3.png-58.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/qe612v7qpadzo6ggqia7yahq/%E5%B9%BB%E7%81%AF%E7%89%874.png" alt="幻灯片4.png-346.7kB"><br><img src="http://static.zybuluo.com/shenyuflying/s7omh9y4geeso8kk6sxzcype/%E5%B9%BB%E7%81%AF%E7%89%875.png" alt="幻灯片5.png-216.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/27ru82cqcgy7tvakzka78tmq/%E5%B9%BB%E7%81%AF%E7%89%876.png" alt="幻灯片6.png-247.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/3k5pmccouj6by0mjk5k00fu4/%E5%B9%BB%E7%81%AF%E7%89%877.png" alt="幻灯片7.png-182.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/pd11sv4ai1g6j080gde6w01l/%E5%B9%BB%E7%81%AF%E7%89%878.png" alt="幻灯片8.png-143.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/fh2x3tmnoweqlfh4a5bw4p9r/%E5%B9%BB%E7%81%AF%E7%89%879.png" alt="幻灯片9.png-189.5kB"><br><img src="http://static.zybuluo.com/shenyuflying/gneunqz5i06l7wgyq38sy6ot/%E5%B9%BB%E7%81%AF%E7%89%8710.png" alt="幻灯片10.png-186.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/dvcz7gnogz1vn4ws2f0zdblw/%E5%B9%BB%E7%81%AF%E7%89%8711.png" alt="幻灯片11.png-189.5kB"><br><img src="http://static.zybuluo.com/shenyuflying/c1axvfd3p7ykss8cpem96wdw/%E5%B9%BB%E7%81%AF%E7%89%8712.png" alt="幻灯片12.png-169.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/uteqki84bgyx1b4ij0ecm10f/%E5%B9%BB%E7%81%AF%E7%89%8713.png" alt="幻灯片13.png-54.3kB"><br><img src="http://static.zybuluo.com/shenyuflying/nc50r7o51kp7i0560p83rjqy/%E5%B9%BB%E7%81%AF%E7%89%8714.png" alt="幻灯片14.png-252kB"><br><img src="http://static.zybuluo.com/shenyuflying/ujt8bd94pm11gy103un86174/%E5%B9%BB%E7%81%AF%E7%89%8715.png" alt="幻灯片15.png-249.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/rfwsqz3td7rcohd62dxwnlbx/%E5%B9%BB%E7%81%AF%E7%89%8716.png" alt="幻灯片16.png-259.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/hlzx8jw3mg4vru8me9f20p25/%E5%B9%BB%E7%81%AF%E7%89%8717.png" alt="幻灯片17.png-243kB"><br><img src="http://static.zybuluo.com/shenyuflying/igbaih7nd7n9j63gj75sfip6/%E5%B9%BB%E7%81%AF%E7%89%8718.png" alt="幻灯片18.png-238.3kB"><br><img src="http://static.zybuluo.com/shenyuflying/dwrcbxwssvz9754fz780af1q/%E5%B9%BB%E7%81%AF%E7%89%8719.png" alt="幻灯片19.png-178.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/wvae67x2489j8zyr7svz5vmv/%E5%B9%BB%E7%81%AF%E7%89%8720.png" alt="幻灯片20.png-218.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/5p6jb3dfmdulbhpjpb6yd4iq/%E5%B9%BB%E7%81%AF%E7%89%8721.png" alt="幻灯片21.png-198.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/jzti5tc3oh4c15lt1xw2rvwn/%E5%B9%BB%E7%81%AF%E7%89%8722.png" alt="幻灯片22.png-163.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/b1dsgnl6btuqbxi87mfh6hxp/%E5%B9%BB%E7%81%AF%E7%89%8723.png" alt="幻灯片23.png-157.3kB"><br><img src="http://static.zybuluo.com/shenyuflying/7qjwrridvj2377ni5kt7xjzq/%E5%B9%BB%E7%81%AF%E7%89%8724.png" alt="幻灯片24.png-192.3kB"><br><img src="http://static.zybuluo.com/shenyuflying/4jlacvwjuhpq9jmay8ynp792/%E5%B9%BB%E7%81%AF%E7%89%8725.png" alt="幻灯片25.png-215.7kB"><br><img src="http://static.zybuluo.com/shenyuflying/bvxwj9y7473g4ecjs2o1cqwy/%E5%B9%BB%E7%81%AF%E7%89%8726.png" alt="幻灯片26.png-216.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/ys2z3oqmnnbtj8y5n8zeihbo/%E5%B9%BB%E7%81%AF%E7%89%8727.png" alt="幻灯片27.png-85.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/nxdh607v7ilqm4s0h1g06g1j/%E5%B9%BB%E7%81%AF%E7%89%8728.png" alt="幻灯片28.png-68kB"><br><img src="http://static.zybuluo.com/shenyuflying/gnkzpxs0qwqxaeyof6rdqrsn/%E5%B9%BB%E7%81%AF%E7%89%8729.png" alt="幻灯片29.png-49.3kB"><br><img src="http://static.zybuluo.com/shenyuflying/e4mwg6j78nspoldnyxxhsesa/%E5%B9%BB%E7%81%AF%E7%89%8730.png" alt="幻灯片30.png-221.9kB"><br><img src="http://static.zybuluo.com/shenyuflying/pxyvfup0wqa62zd0qe870trb/%E5%B9%BB%E7%81%AF%E7%89%8731.png" alt="幻灯片31.png-47.7kB"><br><img src="http://static.zybuluo.com/shenyuflying/te79hytppmsdmjwvtt30bzm8/%E5%B9%BB%E7%81%AF%E7%89%8732.png" alt="幻灯片32.png-25.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/6nfsluzqw842bz7mzsepiak8/%E5%B9%BB%E7%81%AF%E7%89%8733.png" alt="幻灯片33.png-44.2kB"><br><img src="http://static.zybuluo.com/shenyuflying/mofyhkdecnu2hqmqghij9euu/%E5%B9%BB%E7%81%AF%E7%89%8734.png" alt="幻灯片34.png-50.7kB"><br><img src="http://static.zybuluo.com/shenyuflying/vx130whs4kxw41wlp7fam4v9/%E5%B9%BB%E7%81%AF%E7%89%8735.png" alt="幻灯片35.png-91.5kB"><br><img src="http://static.zybuluo.com/shenyuflying/tg2wmoqqlab9z4ewf91o1f4a/%E5%B9%BB%E7%81%AF%E7%89%8736.png" alt="幻灯片36.png-96kB"><br><img src="http://static.zybuluo.com/shenyuflying/57ncsasqxb490r5pob5zxppb/%E5%B9%BB%E7%81%AF%E7%89%8737.png" alt="幻灯片37.png-95.9kB"><br><img src="http://static.zybuluo.com/shenyuflying/81c4038o58eqleqxn788verr/%E5%B9%BB%E7%81%AF%E7%89%8738.png" alt="幻灯片38.png-104.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/rs1e3zr2kqa6van4eh0mrpyr/%E5%B9%BB%E7%81%AF%E7%89%8739.png" alt="幻灯片39.png-223.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/8ih0p2q9o4oldl6densuoj5f/%E5%B9%BB%E7%81%AF%E7%89%8740.png" alt="幻灯片40.png-55.7kB"><br><img src="http://static.zybuluo.com/shenyuflying/7nkuifedh2k5qedxu5vfax9z/%E5%B9%BB%E7%81%AF%E7%89%8741.png" alt="幻灯片41.png-34.2kB"><br><img src="http://static.zybuluo.com/shenyuflying/pse5xe03kr9exunswbf3l3h2/%E5%B9%BB%E7%81%AF%E7%89%8742.png" alt="幻灯片42.png-97.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/flzy8k79q578humvjx24yyiv/%E5%B9%BB%E7%81%AF%E7%89%8743.png" alt="幻灯片43.png-67kB"><br><img src="http://static.zybuluo.com/shenyuflying/vtu7pkhkyoaqb65y7wnjmsbt/%E5%B9%BB%E7%81%AF%E7%89%8744.png" alt="幻灯片44.png-76.7kB"><br><img src="http://static.zybuluo.com/shenyuflying/gbbm3k631ubdckxb80zkn8fz/%E5%B9%BB%E7%81%AF%E7%89%8745.png" alt="幻灯片45.png-14.2kB"><br><img src="http://static.zybuluo.com/shenyuflying/su06h9vnli6y0zk05p363gcw/%E5%B9%BB%E7%81%AF%E7%89%8746.png" alt="幻灯片46.png-77.2kB"><br><img src="http://static.zybuluo.com/shenyuflying/znrhw1ffxnf9e8cb6ro8xuwr/%E5%B9%BB%E7%81%AF%E7%89%8747.png" alt="幻灯片47.png-79.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/1y2r4io219t5fenuqrydr10e/%E5%B9%BB%E7%81%AF%E7%89%8748.png" alt="幻灯片48.png-76.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/ht513ei7a83t37d75h18443x/%E5%B9%BB%E7%81%AF%E7%89%8749.png" alt="幻灯片49.png-69kB"><br><img src="http://static.zybuluo.com/shenyuflying/z1mabaka4uoln6c66582cg09/%E5%B9%BB%E7%81%AF%E7%89%8750.png" alt="幻灯片50.png-21.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/nhyk7drut2ow12as11589zis/%E5%B9%BB%E7%81%AF%E7%89%8751.png" alt="幻灯片51.png-58.9kB"><br><img src="http://static.zybuluo.com/shenyuflying/kxn8p2rt1df2vhnfetgp5egd/%E5%B9%BB%E7%81%AF%E7%89%8752.png" alt="幻灯片52.png-69.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/mdnn58l0he99pds8z4zgs5ag/%E5%B9%BB%E7%81%AF%E7%89%8753.png" alt="幻灯片53.png-78.3kB"><br><img src="http://static.zybuluo.com/shenyuflying/hnzvkgnfxzfonq9t7kin83io/%E5%B9%BB%E7%81%AF%E7%89%8754.png" alt="幻灯片54.png-72.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/360eexwape2q8ou1nwmv69jv/%E5%B9%BB%E7%81%AF%E7%89%8755.png" alt="幻灯片55.png-67.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/4o1bqsibwpfuzdewjsfguzsr/%E5%B9%BB%E7%81%AF%E7%89%8756.png" alt="幻灯片56.png-64.2kB"><br><img src="http://static.zybuluo.com/shenyuflying/9murlz88jqywuw1hpwwzqnci/%E5%B9%BB%E7%81%AF%E7%89%8757.png" alt="幻灯片57.png-68.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/35ts93z58d5qgbxtal7v270b/%E5%B9%BB%E7%81%AF%E7%89%8758.png" alt="幻灯片58.png-61.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/u8snipur77lrvng9vqi0ol2w/%E5%B9%BB%E7%81%AF%E7%89%8759.png" alt="幻灯片59.png-224.3kB"><br><img src="http://static.zybuluo.com/shenyuflying/l7x3b6cfa85z8renc7pfxbkw/%E5%B9%BB%E7%81%AF%E7%89%8760.png" alt="幻灯片60.png-52kB"><br><img src="http://static.zybuluo.com/shenyuflying/y1x8b9drzne1btvpimgkjei9/%E5%B9%BB%E7%81%AF%E7%89%8761.png" alt="幻灯片61.png-40.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/gwacllvn1lcbh4uhaueiwjcf/%E5%B9%BB%E7%81%AF%E7%89%8762.png" alt="幻灯片62.png-34.7kB"><br><img src="http://static.zybuluo.com/shenyuflying/qgv53tnut3enag48myneimn2/%E5%B9%BB%E7%81%AF%E7%89%8763.png" alt="幻灯片63.png-79.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/nf060s84rc3uont4ox6oxu8c/%E5%B9%BB%E7%81%AF%E7%89%8764.png" alt="幻灯片64.png-44.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/xwduo2m4xjggs7asddjdltmd/%E5%B9%BB%E7%81%AF%E7%89%8765.png" alt="幻灯片65.png-242kB"><br><img src="http://static.zybuluo.com/shenyuflying/3n61zrj48mfybb7o8w6luqsr/%E5%B9%BB%E7%81%AF%E7%89%8766.png" alt="幻灯片66.png-163.9kB"><br><img src="http://static.zybuluo.com/shenyuflying/4b4wpceng3if8w8jr4d13qpm/%E5%B9%BB%E7%81%AF%E7%89%8767.png" alt="幻灯片67.png-98.2kB"><br><img src="http://static.zybuluo.com/shenyuflying/qh5mit4aluzj1vbu497r60rs/%E5%B9%BB%E7%81%AF%E7%89%8768.png" alt="幻灯片68.png-99.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/wd7q0nglu2m1gmqgylsputns/%E5%B9%BB%E7%81%AF%E7%89%8769.png" alt="幻灯片69.png-220.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/409tzkelzihcviagdhf3fkgx/%E5%B9%BB%E7%81%AF%E7%89%8770.png" alt="幻灯片70.png-56.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/c16k53hrvhrm7yh3s344a2dv/%E5%B9%BB%E7%81%AF%E7%89%8771.png" alt="幻灯片71.png-56.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/hp526n29ruvxasd15eey3a1l/%E5%B9%BB%E7%81%AF%E7%89%8772.png" alt="幻灯片72.png-43.9kB"><br><img src="http://static.zybuluo.com/shenyuflying/mprs2s2ikgwu1m36xohw6wno/%E5%B9%BB%E7%81%AF%E7%89%8773.png" alt="幻灯片73.png-51.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/2dpfj20alz4j2uzlleu4bv81/%E5%B9%BB%E7%81%AF%E7%89%8774.png" alt="幻灯片74.png-68.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/11mxiix7u4splqpu6klczboa/%E5%B9%BB%E7%81%AF%E7%89%8775.png" alt="幻灯片75.png-52.5kB"><br><img src="http://static.zybuluo.com/shenyuflying/ytj6q5vyrx143677wxq5t8o3/%E5%B9%BB%E7%81%AF%E7%89%8776.png" alt="幻灯片76.png-21kB"><br><img src="http://static.zybuluo.com/shenyuflying/0x9wqoen87y9c2n2p9184iv8/%E5%B9%BB%E7%81%AF%E7%89%8777.png" alt="幻灯片77.png-73.2kB"><br><img src="http://static.zybuluo.com/shenyuflying/7cnca1ykcslxwryh1uq6j34x/%E5%B9%BB%E7%81%AF%E7%89%8778.png" alt="幻灯片78.png-161.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/df3arrsao690srl48se8fkvx/%E5%B9%BB%E7%81%AF%E7%89%8779.png" alt="幻灯片79.png-158.5kB"><br><img src="http://static.zybuluo.com/shenyuflying/gus683r55tvedbxlfd78so6m/%E5%B9%BB%E7%81%AF%E7%89%8780.png" alt="幻灯片80.png-38.9kB"><br><img src="http://static.zybuluo.com/shenyuflying/5qgel78m9ca40bz7xy54hdak/%E5%B9%BB%E7%81%AF%E7%89%8781.png" alt="幻灯片81.png-31.9kB"><br><img src="http://static.zybuluo.com/shenyuflying/2h35ocsc3u18q6qp60058x2m/%E5%B9%BB%E7%81%AF%E7%89%8782.png" alt="幻灯片82.png-49.3kB"><br><img src="http://static.zybuluo.com/shenyuflying/i9q1lw0n0k90yyuwnek415hl/%E5%B9%BB%E7%81%AF%E7%89%8783.png" alt="幻灯片83.png-91.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/fp1yx59w46i1lp4fqt84dwdp/%E5%B9%BB%E7%81%AF%E7%89%8784.png" alt="幻灯片84.png-83.3kB"><br><img src="http://static.zybuluo.com/shenyuflying/v8dmkit14lwm2b5nmyrmjmv1/%E5%B9%BB%E7%81%AF%E7%89%8785.png" alt="幻灯片85.png-223.3kB"><br><img src="http://static.zybuluo.com/shenyuflying/aemdqnnhkeaul335c3whk16q/%E5%B9%BB%E7%81%AF%E7%89%8786.png" alt="幻灯片86.png-185.2kB"><br><img src="http://static.zybuluo.com/shenyuflying/xr7054hjbfjc053fkryvmqxb/%E5%B9%BB%E7%81%AF%E7%89%8787.png" alt="幻灯片87.png-163.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/oz3mn1dyhtlqc9bikzsv2k70/%E5%B9%BB%E7%81%AF%E7%89%8788.png" alt="幻灯片88.png-209.2kB"><br><img src="http://static.zybuluo.com/shenyuflying/e0xmpsqxtiik74yaxbuj2wsk/%E5%B9%BB%E7%81%AF%E7%89%8789.png" alt="幻灯片89.png-259kB"><br><img src="http://static.zybuluo.com/shenyuflying/ej8ebpp4jwrw053lbzq061id/%E5%B9%BB%E7%81%AF%E7%89%8790.png" alt="幻灯片90.png-205.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/xk4ph7a9skq4oxk2a59tz9fb/%E5%B9%BB%E7%81%AF%E7%89%8791.png" alt="幻灯片91.png-244.9kB"><br><img src="http://static.zybuluo.com/shenyuflying/g7muhvmx4z6n1wjx9yi5gy6d/%E5%B9%BB%E7%81%AF%E7%89%8792.png" alt="幻灯片92.png-211.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/m9xl9ve6qtry3szujmxybqb8/%E5%B9%BB%E7%81%AF%E7%89%8793.png" alt="幻灯片93.png-195kB"><br><img src="http://static.zybuluo.com/shenyuflying/3kcsab5omgknjkokkgwj4rc3/%E5%B9%BB%E7%81%AF%E7%89%8794.png" alt="幻灯片94.png-199.7kB"><br><img src="http://static.zybuluo.com/shenyuflying/pfqbtwgj0sq7jvr759ar23bo/%E5%B9%BB%E7%81%AF%E7%89%8795.png" alt="幻灯片95.png-100.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/p9psbbti0h8o8btjrn4hpnkz/%E5%B9%BB%E7%81%AF%E7%89%8796.png" alt="幻灯片96.png-112.2kB"><br><img src="http://static.zybuluo.com/shenyuflying/khvv6ghh6cn36gic0xc63efh/%E5%B9%BB%E7%81%AF%E7%89%8797.png" alt="幻灯片97.png-115.5kB"><br><img src="http://static.zybuluo.com/shenyuflying/qkgwtzbduin4tht0jdhpc2kz/%E5%B9%BB%E7%81%AF%E7%89%8798.png" alt="幻灯片98.png-184.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/a5eshwuv7t5vga617x3dtbrk/%E5%B9%BB%E7%81%AF%E7%89%8799.png" alt="幻灯片99.png-71.7kB"><br><img src="http://static.zybuluo.com/shenyuflying/n26zwzezh8awl6m3eb3vvx3w/%E5%B9%BB%E7%81%AF%E7%89%87100.png" alt="幻灯片100.png-272.2kB"><br><img src="http://static.zybuluo.com/shenyuflying/3upj4w83x5c5rg317g94bfy2/%E5%B9%BB%E7%81%AF%E7%89%87101.png" alt="幻灯片101.png-45.9kB"><br><img src="http://static.zybuluo.com/shenyuflying/y1zcms1bcwt6r9xyknb4nq3h/%E5%B9%BB%E7%81%AF%E7%89%87102.png" alt="幻灯片102.png-81.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/167vpcyqp07hv2oacuddql7v/%E5%B9%BB%E7%81%AF%E7%89%87103.png" alt="幻灯片103.png-86.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/iluowtgt8asx3ctsvxtcah71/%E5%B9%BB%E7%81%AF%E7%89%87104.png" alt="幻灯片104.png-58.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/nr8rtqjxfslnqfgexjnype2p/%E5%B9%BB%E7%81%AF%E7%89%87105.png" alt="幻灯片105.png-64.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/vyzrzl9ko7ca0o7ytquw98n0/%E5%B9%BB%E7%81%AF%E7%89%87106.png" alt="幻灯片106.png-54.3kB"><br><img src="http://static.zybuluo.com/shenyuflying/wiz9otduyj5hsysewexfnhxs/%E5%B9%BB%E7%81%AF%E7%89%87107.png" alt="幻灯片107.png-70.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/jbz0wy39z57vgmn5dfvlil1i/%E5%B9%BB%E7%81%AF%E7%89%87108.png" alt="幻灯片108.png-63.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/jaqx0o42vnufwcl1c84n7vo6/%E5%B9%BB%E7%81%AF%E7%89%87109.png" alt="幻灯片109.png-54.3kB"><br><img src="http://static.zybuluo.com/shenyuflying/6u1qr6u3j1kbv62tkhxfn6yi/%E5%B9%BB%E7%81%AF%E7%89%87110.png" alt="幻灯片110.png-67.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/yzffpxdo6whue2b164werzsf/%E5%B9%BB%E7%81%AF%E7%89%87111.png" alt="幻灯片111.png-54.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/gjdtbswznp4tafizuwednof6/%E5%B9%BB%E7%81%AF%E7%89%87112.png" alt="幻灯片112.png-112.9kB"><br><img src="http://static.zybuluo.com/shenyuflying/6o5w5xmlw2ed184li1iykudj/%E5%B9%BB%E7%81%AF%E7%89%87113.png" alt="幻灯片113.png-129.9kB"><br><img src="http://static.zybuluo.com/shenyuflying/3apj0aygsidvimwpaj9cq7gc/%E5%B9%BB%E7%81%AF%E7%89%87114.png" alt="幻灯片114.png-41.9kB"><br><img src="http://static.zybuluo.com/shenyuflying/21gyp0qj0vgrzbsq7436f422/%E5%B9%BB%E7%81%AF%E7%89%87115.png" alt="幻灯片115.png-91.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/abc10eorugjv7l4m5gq7kikh/%E5%B9%BB%E7%81%AF%E7%89%87116.png" alt="幻灯片116.png-81.5kB"><br><img src="http://static.zybuluo.com/shenyuflying/iojsb394gtwieijx1dsekec3/%E5%B9%BB%E7%81%AF%E7%89%87117.png" alt="幻灯片117.png-32.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/x0togse9i38ayyd8c2yqrzim/%E5%B9%BB%E7%81%AF%E7%89%87118.png" alt="幻灯片118.png-35.9kB"><br><img src="http://static.zybuluo.com/shenyuflying/ucdfglbmme8lg1j5ps3smzrk/%E5%B9%BB%E7%81%AF%E7%89%87119.png" alt="幻灯片119.png-93.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/odgupuxghwsf7qduvflamlc9/%E5%B9%BB%E7%81%AF%E7%89%87120.png" alt="幻灯片120.png-48.5kB"><br><img src="http://static.zybuluo.com/shenyuflying/b77bq3stjazqdzhsrlv7304r/%E5%B9%BB%E7%81%AF%E7%89%87121.png" alt="幻灯片121.png-44.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/s8llwdix3qb8ob3hk1e13zne/%E5%B9%BB%E7%81%AF%E7%89%87122.png" alt="幻灯片122.png-45kB"><br><img src="http://static.zybuluo.com/shenyuflying/5dyvc1gqi5dxjjchqskaxm8j/%E5%B9%BB%E7%81%AF%E7%89%87123.png" alt="幻灯片123.png-28.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/kb18vlepn7ju2u1fuia0cvup/%E5%B9%BB%E7%81%AF%E7%89%87124.png" alt="幻灯片124.png-64.6kB"><br><img src="http://static.zybuluo.com/shenyuflying/oooaepc7tcjtnfoa0g2829sy/%E5%B9%BB%E7%81%AF%E7%89%87125.png" alt="幻灯片125.png-69.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/qy2a9n2l8khxs6dkpgv9vi5s/%E5%B9%BB%E7%81%AF%E7%89%87126.png" alt="幻灯片126.png-91.8kB"><br><img src="http://static.zybuluo.com/shenyuflying/dtcraj9vyni70brtmkjf5dq2/%E5%B9%BB%E7%81%AF%E7%89%87127.png" alt="幻灯片127.png-71.2kB"><br><img src="http://static.zybuluo.com/shenyuflying/75xuv344u4fa9lsi5z2fn38c/%E5%B9%BB%E7%81%AF%E7%89%87128.png" alt="幻灯片128.png-90.4kB"><br><img src="http://static.zybuluo.com/shenyuflying/661bdfwt36u8vqdn1da1398h/%E5%B9%BB%E7%81%AF%E7%89%87129.png" alt="幻灯片129.png-24kB"><br><img src="http://static.zybuluo.com/shenyuflying/3w802htroi2mommj7rdbvivz/%E5%B9%BB%E7%81%AF%E7%89%87130.png" alt="幻灯片130.png-68.2kB"><br><img src="http://static.zybuluo.com/shenyuflying/305s04uipunyrsao4dimthkp/%E5%B9%BB%E7%81%AF%E7%89%87131.png" alt="幻灯片131.png-69.1kB"><br><img src="http://static.zybuluo.com/shenyuflying/8u4j1sutgx9ic1smxebfxu45/%E5%B9%BB%E7%81%AF%E7%89%87132.png" alt="幻灯片132.png-159.6kB"></p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux把文件放置到剪贴板]]></title>
      <url>http://shenyu.wiki/2016/11/20/linux%E6%8A%8A%E6%96%87%E4%BB%B6%E6%94%BE%E7%BD%AE%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>如果想要把一个文件中的内容放置到剪贴板，通常的做法是用vim打开文件，然后复制粘贴。有时候文章很长，那么需要多次操作才可以。能不能用一个命令把文件中的内容放置到剪贴板呢？</p>
</blockquote>
<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install xsel</div></pre></td></tr></table></figure>
<h2 id="how-to"><a href="#how-to" class="headerlink" title="how to"></a>how to</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat xxx.txt | xsel -b -i</div></pre></td></tr></table></figure>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[c语言程序输出调试信息]]></title>
      <url>http://shenyu.wiki/2016/11/17/c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%BE%93%E5%87%BA%E8%B0%83%E8%AF%95%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>随着服务器的内存逐渐增大，从16GB、32GB逐步拓展到64GB、128GB甚至256GB或更多。大型程序在遇到一些致命错误（比如SIGSEGV段错误、stack overflow）时，受限于磁盘空间大小、IO速度、恢复时间等限制，往往不具备条件把内存映像（coredump）转储到磁盘上，这为后续排查出错原因带来了很大困难。这时候就需要程序在遇到致命错误时，能够及时输出诊断信息。一些语言的运行时，比如java、golang等内建了错误堆栈输出的功能。那么c语言程序如何实现错误堆栈输出的功能呢？</p>
</blockquote>
<h2 id="先睹为快"><a href="#先睹为快" class="headerlink" title="先睹为快"></a>先睹为快</h2><p>启动程序，然后发送SIGSEGV信号来模拟程序遇到非法内存访问错误的情形。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ ./main &amp;</div><div class="line">[new process 2018]</div><div class="line">$ kill -11 2018</div><div class="line">#0  0x00007f30d7487680 in __read_nocancel () at ../sysdeps/unix/syscall-template.S:84</div><div class="line">#1  0x0000000000400b6b in system_ex ()</div><div class="line">#2  0x0000000000400c87 in run ()</div><div class="line">#3  0x0000000000400dcb in run_gdb ()</div><div class="line">#4  0x0000000000400f37 in GetCrashInfo ()</div><div class="line">#5  &lt;signal handler called&gt;</div><div class="line">#6  0x0000000000400f9a in main ()</div></pre></td></tr></table></figure></p>
<p>我们看到了函数的堆栈，进一步还可以打出诸如本地变量，局部变量，寄存器等等信息。<br><a id="more"></a></p>
<h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>运行中的程序输出堆栈的方法有2种。<br>第一种：借助backtrace函数。<br>第二种：借助gdb。</p>
<h3 id="backtrace函数"><a href="#backtrace函数" class="headerlink" title="backtrace函数"></a>backtrace函数</h3><p>backtrace用法比较简单，但是功能也比较有限，只能输出基本的堆栈。<br>比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ cc -rdynamic prog.c -o prog</div><div class="line">$ ./prog 3</div><div class="line">backtrace() returned 8 addresses</div><div class="line">./prog(myfunc3+0x5c) [0x80487f0]</div><div class="line">./prog [0x8048871]</div><div class="line">./prog(myfunc+0x21) [0x8048894]</div><div class="line">./prog(myfunc+0x1a) [0x804888d]</div><div class="line">./prog(myfunc+0x1a) [0x804888d]</div><div class="line">./prog(main+0x65) [0x80488fb]</div><div class="line">/lib/libc.so.6(__libc_start_main+0xdc) [0xb7e38f9c]</div><div class="line">./prog [0x8048711]</div></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;execinfo.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">myfunc3</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> j, nptrs;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 100</span></div><div class="line">    <span class="keyword">void</span> *buffer[<span class="number">100</span>];</div><div class="line">    <span class="keyword">char</span> **strings;</div><div class="line"></div><div class="line">    nptrs = backtrace(buffer, SIZE);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"backtrace() returned %d addresses\n"</span>, nptrs);</div><div class="line"></div><div class="line">    <span class="comment">/* The call backtrace_symbols_fd(buffer, nptrs, STDOUT_FILENO)</span></div><div class="line">       would produce similar output to the following: */</div><div class="line"></div><div class="line">    strings = backtrace_symbols(buffer, nptrs);</div><div class="line">    <span class="keyword">if</span> (strings == <span class="literal">NULL</span>) &#123;</div><div class="line">        perror(<span class="string">"backtrace_symbols"</span>);</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; nptrs; j++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, strings[j]);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(strings);</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span>   <span class="comment">/* "static" means don't export the symbol... */</span></div><div class="line">myfunc2(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    myfunc3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">myfunc</span><span class="params">(<span class="keyword">int</span> ncalls)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (ncalls &gt; <span class="number">1</span>)</div><div class="line">        myfunc(ncalls - <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        myfunc2();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s num-calls\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    myfunc(atoi(argv[<span class="number">1</span>]));</div><div class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="借助gdb"><a href="#借助gdb" class="headerlink" title="借助gdb"></a>借助gdb</h3><p>gdb是专为调试诞生的工具，更为强大。但是如何在程序中调用gdb？系统已经提供了system调用，但是该调用不能把程序的信息输出给调用者。需要我们自己写一个system调用，能够把子进程输出的信息发送给主进程。<br>基本思路是fork一个进程，在子进程execv运行gdb，attach到主进程，运行一系列调试命令来输出调试信息。把子进程输出的信息发送给主进程的方法，涉及到了多线程通信的问题。一个比较简单的解决方法是在主进程和子进程之间建立管道，在子进程里面把标准输出重定向到管道的写入端，主进程从管道读取信息。为此专门写了一个<code>system_ex</code>函数来完成这个工作。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * system_ex -- system with something extra</div><div class="line"> *</div><div class="line"> * like original system but can save the</div><div class="line"> * cmd output value to buf. the memory</div><div class="line"> * used by buf is allocated by system_ex</div><div class="line"> * using malloc and realloc, make sure</div><div class="line"> * you free the buf memory after the</div><div class="line"> * function returns.</div><div class="line"> *</div><div class="line"> *                       yshen@2016</div><div class="line"> * Argument:</div><div class="line"> *       cmd: the command as a null terminated</div><div class="line"> *       string to execute</div><div class="line"> *       buf: the buffer to save the stdout</div><div class="line"> *       printed by the command</div><div class="line"> * Return:</div><div class="line"> *       on sucess system_ex returns the</div><div class="line"> *       command exit code</div><div class="line"> *       on faliure system_ex returns -1</div><div class="line"> *       and buf set to NULL</div><div class="line"> * Usage:</div><div class="line"> *       char *buf = NULL;</div><div class="line"> *       if (system_ex("ls",&amp;buf) != -1)</div><div class="line"> *       &#123;</div><div class="line"> *           printf("%s", buf == NULL ? "(no output)" : buf);</div><div class="line"> *           if (buf != NULL)</div><div class="line"> *               free(buf);</div><div class="line"> *       &#125;</div><div class="line"> *       else</div><div class="line"> *       &#123;</div><div class="line"> *           ...error handling...</div><div class="line"> *       &#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">system_ex</span><span class="params">(<span class="keyword">char</span>* cmd, <span class="keyword">char</span> **buf)</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span>   fd[<span class="number">2</span>];</div><div class="line">	<span class="keyword">pid_t</span> pid;</div><div class="line">	<span class="keyword">int</span>   n, count;</div><div class="line">	<span class="keyword">int</span> wait_val = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (cmd == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">	<span class="comment">/* no need to save to buf, use original system() */</span></div><div class="line">	<span class="keyword">if</span> (buf == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">return</span> system(cmd);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *         write                    read</div><div class="line">	 * child ---------&gt; fd[1] fd[0] ------------&gt; parent</div><div class="line">	 *</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (pipe(fd) &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		*buf = <span class="literal">NULL</span>;</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ((pid = fork()) &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">/* fork failed, close pipe*/</span></div><div class="line">		close(fd[<span class="number">0</span>]);</div><div class="line">		close(fd[<span class="number">1</span>]);</div><div class="line">		*buf = <span class="literal">NULL</span>;</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">/* parent */</span></div><div class="line">		<span class="keyword">int</span> allocsz = <span class="number">1024</span>;</div><div class="line">		close(fd[<span class="number">1</span>]);</div><div class="line">		count = <span class="number">0</span>;</div><div class="line">		<span class="comment">/* 1k shall be enough for most case */</span></div><div class="line">		*buf = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*allocsz);</div><div class="line">		<span class="comment">/* not enough memory */</span></div><div class="line">		<span class="keyword">if</span> (*buf == <span class="literal">NULL</span>)</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">		<span class="comment">/* parent block here waiting child to write */</span></div><div class="line">		<span class="keyword">while</span> (n = read(fd[<span class="number">0</span>], (*buf) + count, <span class="number">1024</span>))</div><div class="line">		&#123;</div><div class="line">			count += n;</div><div class="line">			<span class="keyword">if</span> (count &gt;= allocsz)</div><div class="line">			&#123;</div><div class="line">				<span class="comment">/* double the buffer each time */</span></div><div class="line">				allocsz *= <span class="number">2</span>;</div><div class="line">				*buf = (<span class="keyword">char</span> *)<span class="built_in">realloc</span>(*buf, allocsz);</div><div class="line"></div><div class="line">				<span class="comment">/* not enough memory */</span></div><div class="line">				<span class="keyword">if</span> (*buf == <span class="literal">NULL</span>)</div><div class="line">					<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/*terminate the string */</span></div><div class="line">		<span class="keyword">if</span> (count &gt; <span class="number">0</span>)</div><div class="line">			(*buf)[count - <span class="number">1</span>] = <span class="string">'\0'</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="comment">/* opps, the child exit abnormally, nothing read */</span></div><div class="line">			<span class="built_in">free</span>(*buf);</div><div class="line">			*buf = <span class="literal">NULL</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		close(fd[<span class="number">0</span>]);</div><div class="line">		<span class="comment">/* get the return value of command */</span></div><div class="line">		<span class="keyword">if</span> (wait4(pid, &amp;wait_val, <span class="number">0</span>, <span class="number">0</span>) == <span class="number">-1</span>)</div><div class="line">		&#123;</div><div class="line">			wait_val = <span class="number">-1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> wait_val;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">/* child */</span></div><div class="line">		<span class="comment">/* close read side */</span></div><div class="line">		close(fd[<span class="number">0</span>]);</div><div class="line"></div><div class="line">		<span class="comment">/* close stdout */</span></div><div class="line">		close(STDOUT_FILENO);</div><div class="line">		<span class="comment">/* dup fd1 now fd1 equals to stdout */</span></div><div class="line">		dup(fd[<span class="number">1</span>]);</div><div class="line">		<span class="comment">/* close it again */</span></div><div class="line">		close(fd[<span class="number">1</span>]);</div><div class="line">		<span class="comment">/* execute the command */</span></div><div class="line">        execl(<span class="string">"/bin/sh"</span>, <span class="string">"sh"</span>, <span class="string">"-c"</span>, cmd, (<span class="keyword">char</span>*)<span class="number">0</span>);</div><div class="line">		<span class="comment">/* should not reach here */</span></div><div class="line">        <span class="built_in">exit</span>(<span class="number">127</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* should not reach here */</span></div><div class="line">	*buf = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了准备工作完毕。下面从<code>main</code>函数开始讲解。<br>第一步在程序入口注册信号处理函数，在程序发生非法内存访问，会收到SIGSEGV信号，这时候调用GetCrashInfo。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	signal(SIGSEGV, GetCrashInfo);</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(<span class="number">1</span>)；</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来<code>GetCrashInfo</code>调用<code>run_gdb</code>来完成详细调试信息的输出。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * MAIN entrance of Crash Info Collector</div><div class="line"> * run a batch of gdb command to collect</div><div class="line"> * neccessary infomation useful for debug</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">GetCrashInfo</span><span class="params">(<span class="keyword">int</span> a)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span>  level;</div><div class="line">	<span class="keyword">int</span>  i;</div><div class="line">	</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"get singal %d\n"</span>, a);</div><div class="line"></div><div class="line">	run_gdb(<span class="string">"bt"</span>, <span class="number">-1</span>);</div><div class="line">	run_gdb(<span class="string">"thread apply all bt"</span>, <span class="number">-1</span>);</div><div class="line"></div><div class="line">	level = GetStackLevel();</div><div class="line"></div><div class="line">	<span class="comment">/* general infos */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; level ; i++)</div><div class="line">	&#123;</div><div class="line">		run_gdb(<span class="string">"info args"</span>, i);</div><div class="line">		run_gdb(<span class="string">"info locals"</span>, i);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* detailed asm info */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; level; i++)</div><div class="line">	&#123;</div><div class="line">		run_gdb(<span class="string">"info frame"</span>, i);</div><div class="line">		run_gdb(<span class="string">"info registers"</span>, i);</div><div class="line">		run_gdb(<span class="string">"disas"</span>, i);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>run_gdb</code>调用gdb来完成入参指定的命令。方法是拼了一个命令串<code>cmd_str</code>，包含要执行的gdb命令，pid等信息。接下来调用<code>run</code>来执行这个命令并返回结果。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * run a gdb command under frame n</div><div class="line"> * the output of gdb is printed using ereport LOG</div><div class="line"> * Arguments:</div><div class="line"> *      cmd: the command to run by gdb, such as "bt"</div><div class="line"> *      frame: under which frame to run the command</div><div class="line"> *             values from 0-N, any value less than 0</div><div class="line"> *             means no need to go to that frame</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run_gdb</span><span class="params">(<span class="keyword">char</span> *cmd, <span class="keyword">int</span> frame)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> cmd_str[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">	<span class="keyword">char</span> arg_f[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">	<span class="keyword">char</span> *buf = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IGNORE_STRING 	<span class="meta-string">"| grep -v \"\\[New Thread\" "</span>\</span></div><div class="line">						<span class="meta-string">"| grep -v \"No symbol table info available\" "</span>\</div><div class="line">						<span class="meta-string">"| grep -v \"in read () from\" "</span>\</div><div class="line">						<span class="meta-string">"| grep -v \"\\[Thread debugging using\" "</span>\</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (frame &gt;= <span class="number">0</span>)</div><div class="line">		<span class="built_in">sprintf</span>(arg_f,<span class="string">"-ex \"f %d\""</span>,frame);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">sprintf</span>(arg_f,<span class="string">" "</span>);</div><div class="line"></div><div class="line">	<span class="built_in">sprintf</span>(cmd_str,<span class="string">"gdb -batch "</span></div><div class="line">				<span class="string">"-ex \" set pagination 0 \" "</span></div><div class="line">				<span class="string">"%s "</span> <span class="comment">/* -ex f ?*/</span></div><div class="line">				<span class="string">"-ex \"%s\" "</span></div><div class="line">				<span class="string">"-p %d "</span></div><div class="line">				IGNORE_STRING,</div><div class="line">				arg_f,</div><div class="line">				cmd,</div><div class="line">				getpid());</div><div class="line"></div><div class="line">	buf = run(cmd_str);</div><div class="line">	<span class="keyword">if</span> (buf != <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n=====================================================================\n"</span></div><div class="line">			<span class="string">"\n            frame:%d   command:%s                                    \n"</span></div><div class="line">			<span class="string">"\n---------------------------------------------------------------------\n"</span>,</div><div class="line">			frame &lt; <span class="number">0</span> ? <span class="number">0</span> : frame, cmd);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</div><div class="line">		<span class="built_in">free</span>(buf);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>run</code>函数调用了上述的<code>system_ex</code>来实际执行命令并返回结果。对错误进行了简单的处理。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * run a command and return the output</div><div class="line"> * if the command failed report the</div><div class="line"> * error message using ereport DEBUG1</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> *</span></div><div class="line"><span class="title">run</span><span class="params">(<span class="keyword">char</span> *cmd)</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *buf = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">int</span> status;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((status = system_ex(cmd, &amp;buf)) == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (buf != <span class="literal">NULL</span>)</div><div class="line">				<span class="keyword">return</span> buf;</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"command %s failed with status %d msg %s"</span>,</div><div class="line">			cmd, WEXITSTATUS(status), buf == <span class="literal">NULL</span> ? <span class="string">"no"</span> : buf);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> buf;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="完整的源码"><a href="#完整的源码" class="headerlink" title="完整的源码"></a>完整的源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">system_ex</span><span class="params">(<span class="keyword">char</span>* cmd, <span class="keyword">char</span> **buf)</span></span>;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="title">run</span><span class="params">(<span class="keyword">char</span> *cmd)</span></span>;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run_gdb</span><span class="params">(<span class="keyword">char</span> *cmd, <span class="keyword">int</span> frame)</span></span>;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetStackLevel</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetCrashInfo</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * system_ex -- system with something extra</div><div class="line"> *</div><div class="line"> * like original system but can save the</div><div class="line"> * cmd output value to buf. the memory</div><div class="line"> * used by buf is allocated by system_ex</div><div class="line"> * using malloc and realloc, make sure</div><div class="line"> * you free the buf memory after the</div><div class="line"> * function returns.</div><div class="line"> *</div><div class="line"> *                       yshen@2016</div><div class="line"> * Argument:</div><div class="line"> *       cmd: the command as a null terminated</div><div class="line"> *       string to execute</div><div class="line"> *       buf: the buffer to save the stdout</div><div class="line"> *       printed by the command</div><div class="line"> * Return:</div><div class="line"> *       on sucess system_ex returns the</div><div class="line"> *       command exit code</div><div class="line"> *       on faliure system_ex returns -1</div><div class="line"> *       and buf set to NULL</div><div class="line"> * Usage:</div><div class="line"> *       char *buf = NULL;</div><div class="line"> *       if (system_ex("ls",&amp;buf) != -1)</div><div class="line"> *       &#123;</div><div class="line"> *           printf("%s", buf == NULL ? "(no output)" : buf);</div><div class="line"> *           if (buf != NULL)</div><div class="line"> *               free(buf);</div><div class="line"> *       &#125;</div><div class="line"> *       else</div><div class="line"> *       &#123;</div><div class="line"> *           ...error handling...</div><div class="line"> *       &#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">system_ex</span><span class="params">(<span class="keyword">char</span>* cmd, <span class="keyword">char</span> **buf)</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span>   fd[<span class="number">2</span>];</div><div class="line">	<span class="keyword">pid_t</span> pid;</div><div class="line">	<span class="keyword">int</span>   n, count;</div><div class="line">	<span class="keyword">int</span> wait_val = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (cmd == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">	<span class="comment">/* no need to save to buf, use original system() */</span></div><div class="line">	<span class="keyword">if</span> (buf == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">return</span> system(cmd);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *         write                    read</div><div class="line">	 * child ---------&gt; fd[1] fd[0] ------------&gt; parent</div><div class="line">	 *</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (pipe(fd) &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		*buf = <span class="literal">NULL</span>;</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ((pid = fork()) &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">/* fork failed, close pipe*/</span></div><div class="line">		close(fd[<span class="number">0</span>]);</div><div class="line">		close(fd[<span class="number">1</span>]);</div><div class="line">		*buf = <span class="literal">NULL</span>;</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">/* parent */</span></div><div class="line">		<span class="keyword">int</span> allocsz = <span class="number">1024</span>;</div><div class="line">		close(fd[<span class="number">1</span>]);</div><div class="line">		count = <span class="number">0</span>;</div><div class="line">		<span class="comment">/* 1k shall be enough for most case */</span></div><div class="line">		*buf = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*allocsz);</div><div class="line">		<span class="comment">/* not enough memory */</span></div><div class="line">		<span class="keyword">if</span> (*buf == <span class="literal">NULL</span>)</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">		<span class="comment">/* parent block here waiting child to write */</span></div><div class="line">		<span class="keyword">while</span> (n = read(fd[<span class="number">0</span>], (*buf) + count, <span class="number">1024</span>))</div><div class="line">		&#123;</div><div class="line">			count += n;</div><div class="line">			<span class="keyword">if</span> (count &gt;= allocsz)</div><div class="line">			&#123;</div><div class="line">				<span class="comment">/* double the buffer each time */</span></div><div class="line">				allocsz *= <span class="number">2</span>;</div><div class="line">				*buf = (<span class="keyword">char</span> *)<span class="built_in">realloc</span>(*buf, allocsz);</div><div class="line"></div><div class="line">				<span class="comment">/* not enough memory */</span></div><div class="line">				<span class="keyword">if</span> (*buf == <span class="literal">NULL</span>)</div><div class="line">					<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/*terminate the string */</span></div><div class="line">		<span class="keyword">if</span> (count &gt; <span class="number">0</span>)</div><div class="line">			(*buf)[count - <span class="number">1</span>] = <span class="string">'\0'</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="comment">/* opps, the child exit abnormally, nothing read */</span></div><div class="line">			<span class="built_in">free</span>(*buf);</div><div class="line">			*buf = <span class="literal">NULL</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		close(fd[<span class="number">0</span>]);</div><div class="line">		<span class="comment">/* get the return value of command */</span></div><div class="line">		<span class="keyword">if</span> (wait4(pid, &amp;wait_val, <span class="number">0</span>, <span class="number">0</span>) == <span class="number">-1</span>)</div><div class="line">		&#123;</div><div class="line">			wait_val = <span class="number">-1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> wait_val;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">/* child */</span></div><div class="line">		<span class="comment">/* close read side */</span></div><div class="line">		close(fd[<span class="number">0</span>]);</div><div class="line"></div><div class="line">		<span class="comment">/* close stdout */</span></div><div class="line">		close(STDOUT_FILENO);</div><div class="line">		<span class="comment">/* dup fd1 now fd1 equals to stdout */</span></div><div class="line">		dup(fd[<span class="number">1</span>]);</div><div class="line">		<span class="comment">/* close it again */</span></div><div class="line">		close(fd[<span class="number">1</span>]);</div><div class="line">		<span class="comment">/* execute the command */</span></div><div class="line">        execl(<span class="string">"/bin/sh"</span>, <span class="string">"sh"</span>, <span class="string">"-c"</span>, cmd, (<span class="keyword">char</span>*)<span class="number">0</span>);</div><div class="line">		<span class="comment">/* should not reach here */</span></div><div class="line">        <span class="built_in">exit</span>(<span class="number">127</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* should not reach here */</span></div><div class="line">	*buf = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * run a command and return the output</div><div class="line"> * if the command failed report the</div><div class="line"> * error message using ereport DEBUG1</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> *</span></div><div class="line"><span class="title">run</span><span class="params">(<span class="keyword">char</span> *cmd)</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *buf = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">int</span> status;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((status = system_ex(cmd, &amp;buf)) == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (buf != <span class="literal">NULL</span>)</div><div class="line">				<span class="keyword">return</span> buf;</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"command %s failed with status %d msg %s"</span>,</div><div class="line">			cmd, WEXITSTATUS(status), buf == <span class="literal">NULL</span> ? <span class="string">"no"</span> : buf);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> buf;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * run a gdb command under frame n</div><div class="line"> * the output of gdb is printed using ereport LOG</div><div class="line"> * Arguments:</div><div class="line"> *      cmd: the command to run by gdb, such as "bt"</div><div class="line"> *      frame: under which frame to run the command</div><div class="line"> *             values from 0-N, any value less than 0</div><div class="line"> *             means no need to go to that frame</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run_gdb</span><span class="params">(<span class="keyword">char</span> *cmd, <span class="keyword">int</span> frame)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> cmd_str[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">	<span class="keyword">char</span> arg_f[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">	<span class="keyword">char</span> *buf = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IGNORE_STRING 	<span class="meta-string">"| grep -v \"\\[New Thread\" "</span>\</span></div><div class="line">						<span class="meta-string">"| grep -v \"No symbol table info available\" "</span>\</div><div class="line">						<span class="meta-string">"| grep -v \"in read () from\" "</span>\</div><div class="line">						<span class="meta-string">"| grep -v \"\\[Thread debugging using\" "</span>\</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (frame &gt;= <span class="number">0</span>)</div><div class="line">		<span class="built_in">sprintf</span>(arg_f,<span class="string">"-ex \"f %d\""</span>,frame);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">sprintf</span>(arg_f,<span class="string">" "</span>);</div><div class="line"></div><div class="line">	<span class="built_in">sprintf</span>(cmd_str,<span class="string">"gdb -batch "</span></div><div class="line">				<span class="string">"-ex \" set pagination 0 \" "</span></div><div class="line">				<span class="string">"%s "</span> <span class="comment">/* -ex f ?*/</span></div><div class="line">				<span class="string">"-ex \"%s\" "</span></div><div class="line">				<span class="string">"-p %d "</span></div><div class="line">				IGNORE_STRING,</div><div class="line">				arg_f,</div><div class="line">				cmd,</div><div class="line">				getpid());</div><div class="line"></div><div class="line">	buf = run(cmd_str);</div><div class="line">	<span class="keyword">if</span> (buf != <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n=====================================================================\n"</span></div><div class="line">			<span class="string">"\n            frame:%d   command:%s                                    \n"</span></div><div class="line">			<span class="string">"\n---------------------------------------------------------------------\n"</span>,</div><div class="line">			frame &lt; <span class="number">0</span> ? <span class="number">0</span> : frame, cmd);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</div><div class="line">		<span class="built_in">free</span>(buf);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">GetStackLevel</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> cmd[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">	<span class="keyword">int</span>  level;</div><div class="line">	<span class="keyword">char</span> *buf = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	<span class="built_in">sprintf</span>(cmd,<span class="string">"gdb -batch "</span></div><div class="line">				<span class="string">"-ex \"set pagination 0\" "</span></div><div class="line">				<span class="string">"-ex \"bt\" "</span></div><div class="line">				<span class="string">"-p %d"</span></div><div class="line">				<span class="string">"| grep \"#\" "</span></div><div class="line">				<span class="string">"| wc -l"</span>,</div><div class="line">				getpid());</div><div class="line">	buf = run(cmd);</div><div class="line">	<span class="keyword">if</span> (buf != <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		level = atoi(buf);</div><div class="line">		<span class="built_in">free</span>(buf);</div><div class="line">		<span class="keyword">return</span> level;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * MAIN entrance of Crash Info Collector</div><div class="line"> * run a batch of gdb command to collect</div><div class="line"> * neccessary infomation useful for debug</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">GetCrashInfo</span><span class="params">(<span class="keyword">int</span> a)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span>  level;</div><div class="line">	<span class="keyword">int</span>  i;</div><div class="line">	</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"get singal %d\n"</span>, a);</div><div class="line"></div><div class="line">	run_gdb(<span class="string">"bt"</span>, <span class="number">-1</span>);</div><div class="line">	run_gdb(<span class="string">"thread apply all bt"</span>, <span class="number">-1</span>);</div><div class="line"></div><div class="line">	level = GetStackLevel();</div><div class="line"></div><div class="line">	<span class="comment">/* general infos */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; level ; i++)</div><div class="line">	&#123;</div><div class="line">		run_gdb(<span class="string">"info args"</span>, i);</div><div class="line">		run_gdb(<span class="string">"info locals"</span>, i);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* detailed asm info */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; level; i++)</div><div class="line">	&#123;</div><div class="line">		run_gdb(<span class="string">"info frame"</span>, i);</div><div class="line">		run_gdb(<span class="string">"info registers"</span>, i);</div><div class="line">		run_gdb(<span class="string">"disas"</span>, i);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	signal(SIGSEGV, GetCrashInfo);</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(<span class="number">1</span>)；</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[c和汇编混合编程]]></title>
      <url>http://shenyu.wiki/2016/11/14/c%E5%92%8C%E6%B1%87%E7%BC%96%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在各种高级语言大行其道的今天为什么要用汇编呢？其实主要的原因有：第一，在C语言在关键地方嵌入汇编可以获得最大的性能提升，比如说一些关键算法；第二，实现硬件相关的功能（这点嵌入式开发经常用到）。第三，不能用C语言实现的特性可以用汇编实现，比如说可以利用lock指令来实现原子操作。<br>本文介绍了如何把汇编语言嵌入到c语言中的基础，然后给了2个例子。</p>
</blockquote>
<a id="more"></a>
<p>在数据库中，为了实现一些特殊的操作，比如<a href="http://shenyu.wiki/2016/11/13/PostgreSQL%E4%B8%AD%E7%9A%84spinlock%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/">tas锁</a>，需要借助汇编来完成。比如PostgreSQL中的tas锁就是用汇编写的。那么如何用c和汇编混合编程呢？先介绍一下基本语法，c语言中嵌入汇编的语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">asm [volatile] ( AssemblerTemplate</div><div class="line">                 : OutputOperands</div><div class="line">                 [ : InputOperands</div><div class="line">                 [ : Clobbers ] ])</div></pre></td></tr></table></figure></p>
<p><code>asm</code>：标志一段嵌入式汇编的开始<br><code>volatile</code>：关闭编译器优化，这样就就不会把某些编译器认为无效的汇编删掉<br><code>AssemblerTemplate</code>：用于生成汇编的模板，里面包含了汇编代码和一些占位符<br><code>OutputOperands</code>：在汇编中修改的c程序中的变量，用逗号分隔<br><code>InputOperands</code>：在汇编中读取的c程序中的变量，用逗号分隔<br><code>Clobbers</code>：除了在OutputOperands列出的之外被汇编修改的register或其他的值</p>
<p>下面分别介绍一下上述内容</p>
<h2 id="AssemblerTemplate"><a href="#AssemblerTemplate" class="headerlink" title="AssemblerTemplate"></a>AssemblerTemplate</h2><p>汇编模板实际上是一个字符串，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;   cmpb    $0,%1   \n&quot;</div><div class="line">&quot;   jne     1f      \n&quot;</div><div class="line">&quot;   lock            \n&quot;</div><div class="line">&quot;   xchgb   %0,%1   \n&quot;</div></pre></td></tr></table></figure></p>
<p>里面包含了对<code>OutputOperands</code>、<code>InputOperands</code>的引用。接下来编译器会把汇编魔板中的引用等等变换为实际的汇编指令。在汇编模板中除了输入汇编指令之外，还可以有一些特殊符号，特殊符号表示了其他的含义：<br><code>%n</code>：引用<code>OutputOperands</code>、<code>InputOperands</code>中的第几个值<br><code>%%</code>：在汇编中输出一个<code>%</code>符号<br><code>%=</code>：输出一个数字，每次都是不同的。一般用来作为goto标签。<br><code>%{</code>：输出<code>{</code><br><code>%|</code>：输出<code>|</code><br><code>%}</code>：输出<code>}</code></p>
<h2 id="OutputOperands"><a href="#OutputOperands" class="headerlink" title="OutputOperands"></a>OutputOperands</h2><p><code>OutputOperands</code>的语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ [asmSymbolicName] ] constraint (cvariablename)</div></pre></td></tr></table></figure></p>
<h3 id="asmSymbolicName"><a href="#asmSymbolicName" class="headerlink" title="asmSymbolicName"></a>asmSymbolicName</h3><p><code>asmSymbolicName</code>asm符号名称，如果asm模板里面用<code>%[Value]</code>来指定了一个名称。那么可以在<code>OutputOperands</code>里面用<code>[ [asmSymbolicName] ] constraint (cvariablename)</code>映射到具体的c程序变量名。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int a,b;</div><div class="line">/* a=1;b=2;*/</div><div class="line">asm(&quot;mov $1,%[a]\n&quot;</div><div class="line">    &quot;mov $2,%[b]\n&quot;</div><div class="line">    :[a]&quot;+rm&quot;(a),[b]&quot;+rm&quot;(b)</div><div class="line">    :/* no output */</div><div class="line">    :&quot;cc&quot;);</div><div class="line">printf(&quot;a=%d\nb=%d\n&quot;,a,b);</div></pre></td></tr></table></figure></p>
<p>如果没有用<code>asm符号</code>名称的话，用0下标开始的变量名<code>%0</code>,<code>%1</code>来引用。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int a,b;</div><div class="line">/* a=1;b=2;*/</div><div class="line">asm(&quot;mov $1,%0\n&quot;</div><div class="line">    &quot;mov $2,%1\n&quot;</div><div class="line">    :&quot;+rm&quot;(a),&quot;+rm&quot;(b)</div><div class="line">    :/* no output */</div><div class="line">    :&quot;cc&quot;);</div><div class="line">printf(&quot;a=%d\nb=%d\n&quot;,a,b);</div></pre></td></tr></table></figure></p>
<h3 id="constraint"><a href="#constraint" class="headerlink" title="constraint"></a>constraint</h3><p>一个字符串用来当做界定符。界定符用来说明变量放置的位置<br><code>=</code> 该变量覆盖已存在的变量<br><code>+</code> 变量用于读写<br><code>r</code> 把变量放在register寄存器中<br><code>m</code> 把变量放在memory中</p>
<h3 id="cvariablename"><a href="#cvariablename" class="headerlink" title="cvariablename"></a>cvariablename</h3><p>引用c程序上下文中的变量名</p>
<h2 id="InputOperands"><a href="#InputOperands" class="headerlink" title="InputOperands"></a>InputOperands</h2><p>正如字面意思所讲，<code>InputOperands</code>表示输入的变量，这些变量将被汇编使用。</p>
<h2 id="Clobbers"><a href="#Clobbers" class="headerlink" title="Clobbers"></a>Clobbers</h2><p><code>cc</code>以上汇编代码改动了标志位<br><code>memory</code>以上汇编代码进行了内存读写</p>
<p>好了，解释了基本语法之后，简单看几个例子：</p>
<h2 id="例子1–赋值"><a href="#例子1–赋值" class="headerlink" title="例子1–赋值"></a>例子1–赋值</h2><p>最简单的一个例子，用了汇编的<code>mov</code>指令，用于赋值：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">    <span class="number">__</span>asm__(<span class="string">"mov $1,%0\n"</span></div><div class="line">            <span class="string">"mov $2,%1\n"</span></div><div class="line">            :<span class="string">"+rm"</span>(a),<span class="string">"+rm"</span>(b)</div><div class="line">            :<span class="comment">/* no output */</span></div><div class="line">            :<span class="string">"cc"</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a=%d\nb=%d\n"</span>,a,b);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到结果，a，b已经赋值了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ./main </div><div class="line">a=1</div><div class="line">b=2</div></pre></td></tr></table></figure></p>
<p>实际生成的汇编：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">0000000000400526 &lt;main&gt;:</div><div class="line">  400526:   55                      push   %rbp</div><div class="line">  400527:   48 89 e5                mov    %rsp,%rbp</div><div class="line">  40052a:   48 83 ec 10             sub    $0x10,%rsp</div><div class="line">  40052e:   8b 55 f8                mov    -0x8(%rbp),%edx</div><div class="line">  400531:   8b 45 fc                mov    -0x4(%rbp),%eax</div><div class="line"></div><div class="line">  400534:   ba 01 00 00 00          mov    $0x1,%edx</div><div class="line">  400539:   b8 02 00 00 00          mov    $0x2,%eax</div><div class="line"></div><div class="line">  40053e:   89 55 f8                mov    %edx,-0x8(%rbp)</div><div class="line">  400541:   89 45 fc                mov    %eax,-0x4(%rbp)</div><div class="line">  400544:   8b 55 fc                mov    -0x4(%rbp),%edx</div><div class="line">  400547:   8b 45 f8                mov    -0x8(%rbp),%eax</div><div class="line">  40054a:   89 c6                   mov    %eax,%esi</div><div class="line">  40054c:   bf f4 05 40 00          mov    $0x4005f4,%edi</div><div class="line">  400551:   b8 00 00 00 00          mov    $0x0,%eax</div><div class="line">  400556:   e8 a5 fe ff ff          callq  400400 &lt;printf@plt&gt;</div><div class="line">  40055b:   b8 00 00 00 00          mov    $0x0,%eax</div><div class="line">  400560:   c9                      leaveq</div><div class="line">  400561:   c3                      retq</div><div class="line">  400562:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</div><div class="line">  400569:   00 00 00 </div><div class="line">  40056c:   0f 1f 40 00             nopl   0x0(%rax)</div></pre></td></tr></table></figure></p>
<h2 id="例子2–交换"><a href="#例子2–交换" class="headerlink" title="例子2–交换"></a>例子2–交换</h2><p>一般在c语言中，交换a，b的值需要3条语句：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">temp=a;</div><div class="line">a=b;</div><div class="line">b=temp;</div></pre></td></tr></table></figure></p>
<p>利用汇编的<code>xchg</code>指令，可以一条指令就完成a，b交换，而且不用中间变量<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">2</span>,b=<span class="number">1</span>;</div><div class="line">    <span class="comment">/* a=b;b=a;*/</span></div><div class="line">    <span class="keyword">asm</span>(<span class="string">"xchg %0,%1\n"</span></div><div class="line">        :<span class="string">"+rm"</span>(a),<span class="string">"+rm"</span>(b)</div><div class="line">        :<span class="comment">/* no output */</span></div><div class="line">        :<span class="string">"cc"</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a=%d\nb=%d\n"</span>,a,b);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到结果，a，b已经赋值了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ./main </div><div class="line">a=1</div><div class="line">b=2</div></pre></td></tr></table></figure></p>
<h2 id="例子3–tas锁"><a href="#例子3–tas锁" class="headerlink" title="例子3–tas锁"></a>例子3–tas锁</h2><p>tas锁求整个操作只由一条指令完成，并且将总线锁住，以保证操作的“原子性”。相比之下，C语句在编译之后到底有几条指令是没有保证的，也无法要求在计算过程中对总线加锁。这时候就要借助<code>lock</code>指令来完成这个工作。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="number">__</span><span class="function">inline__ <span class="keyword">int</span></span></div><div class="line"><span class="title">tas</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">lock_t</span> *lock)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">lock_t</span> <span class="number">_</span>res = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="number">__</span>asm__ <span class="number">__</span>volatile__(</div><div class="line">        <span class="string">"   cmpb    $0,%1   \n"</span></div><div class="line">        <span class="string">"   jne     1f      \n"</span></div><div class="line">        <span class="string">"   lock            \n"</span></div><div class="line">        <span class="string">"   xchgb   %0,%1   \n"</span></div><div class="line">        <span class="string">"1: \n"</span></div><div class="line">:       <span class="string">"+q"</span>(<span class="number">_</span>res), <span class="string">"+m"</span>(*lock)</div><div class="line">:       <span class="comment">/* no inputs */</span></div><div class="line">:       <span class="string">"memory"</span>, <span class="string">"cc"</span>);</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) <span class="number">_</span>res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如上代码中的<code>lock</code>指令确保了接下来的<code>xchgb</code>指令交换<code>*lock</code>和<code>_res</code>的操作是原子性的。从而一下完成了获取<code>*lock</code>的值作为返回值和把<code>*lock</code>设为1这两个动作一下完成。</p>
<p>如果感兴趣可以进一步阅读：<br>gcc官方文档：<a href="https://gcc.gnu.org/onlinedocs/gcc-6.2.0/gcc/Extended-Asm.html#Extended-Asm" target="_blank" rel="external">https://gcc.gnu.org/onlinedocs/gcc-6.2.0/gcc/Extended-Asm.html#Extended-Asm</a><br>Linux汇编语言开发指南：<a href="http://www.ibm.com/developerworks/cn/linux/l-assembly" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/linux/l-assembly</a><br>一篇好的博文：<a href="http://blog.csdn.net/hu3167343/article/details/37660593" target="_blank" rel="external">http://blog.csdn.net/hu3167343/article/details/37660593</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL中的spinlock实现的基本原理]]></title>
      <url>http://shenyu.wiki/2016/11/13/PostgreSQL%E4%B8%AD%E7%9A%84spinlock%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>linux中锁实现方法有文件锁、mutex、semaphore等。在PostgreSQL设计过程中，考虑到mutex、semaphore具有一定的限制，为了性能和可移植性考虑，对于比较短时间的等待，spinlock性能更好。那么spinlock是怎么实现的呢？</p>
</blockquote>
<p>spinlock依赖于test and set，即先测试一个变量的值是否为0，这一步叫test；如果为0则现在没有加锁，那么接下来设置为1加锁，这一步叫set；如果加锁之后，接下来再次加锁test为1则用一个while循环不断等待，从而实现了加锁的功能。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spin_lock</span><span class="params">(<span class="keyword">lock_t</span> *lock)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(tas(lock)==<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解锁相对简单，直接把变量设为0即可。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spin_unlock</span><span class="params">(<span class="keyword">lock_t</span> *lock)</span></span></div><div class="line">&#123;</div><div class="line">	*lock = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先需要我们实现一个满足上面要求的tas函数，即函数检查一个内存中的值，看是否为0，如果为0，那么set设置为1，并返回0。如果为1则直接返回1。由于并发原因，必须确保set的原子性，即set的指令必须全部一次执行成功，中间不能出现中断。比如：<br>要把寄存器al=1的值放入内存(%rcx)，并把内存(%rcx)放入寄存器al其实是一个exchange交换操作，一般需要3条指令，其中用到了一个临时寄存器，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mov (%rcx) ah</div><div class="line">mov al     (%rcx)</div><div class="line">mov ah     al</div></pre></td></tr></table></figure></p>
<p>现在要求如上3条汇编具有原子性，即可以用一条汇编指令来实现，这个操作可以在汇编中用<code>lock xchg</code>来实现。</p>
<p>现在我们查看在PostgreSQL中一段加锁的汇编代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">  40073e:   cmpb   $0x0,(%rcx)  ;test是不是为0</div><div class="line">  400741:   jne    400746 &lt;TAS_LOCK+0x20&gt; ;如果不是0，那么直接返回</div><div class="line">  400743:   lock xchg %al,(%rcx) ;如果是0，那么设置为1</div><div class="line">  400746:   mov    %eax,%ebx ;返回结果</div><div class="line">  400748:   movzbl %bl,%eax</div><div class="line">  40074b:   pop    %rbx</div><div class="line">  40074c:   pop    %rbp</div><div class="line">  40074d:   retq</div></pre></td></tr></table></figure></p>
<p>按照其原理，通过对其进行反汇编，得到如下的c语言函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="number">__</span><span class="function">inline__ <span class="keyword">int</span></span></div><div class="line"><span class="title">tas</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">lock_t</span> *lock)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">lock_t</span> <span class="number">_</span>res = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="number">__</span>asm__ <span class="number">__</span>volatile__(</div><div class="line">        <span class="string">"   cmpb    $0,%1   \n"</span></div><div class="line">        <span class="string">"   jne     1f      \n"</span></div><div class="line">        <span class="string">"   lock            \n"</span></div><div class="line">        <span class="string">"   xchgb   %0,%1   \n"</span></div><div class="line">        <span class="string">"1: \n"</span></div><div class="line">:       <span class="string">"+q"</span>(<span class="number">_</span>res), <span class="string">"+m"</span>(*lock)</div><div class="line">:       <span class="comment">/* no inputs */</span></div><div class="line">:       <span class="string">"memory"</span>, <span class="string">"cc"</span>);</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) <span class="number">_</span>res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面通过一段并发程序，来检验一下。下面的程序首先在共享内存中创建了一个变量count，接下来fork了两个进程分别对count递增了1000000次，在递增的时候用我们上面描述的spinlock来加锁保护。最后打出了结果，正确的结果是2000000.</p>
<a id="more"></a>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/mman.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="keyword">lock_t</span>;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="number">__</span><span class="function">inline__ <span class="keyword">int</span></span></div><div class="line"><span class="title">tas</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">lock_t</span> *lock)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">lock_t</span> <span class="number">_</span>res = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="number">__</span>asm__ <span class="number">__</span>volatile__(</div><div class="line">        <span class="string">"   cmpb    $0,%1   \n"</span></div><div class="line">        <span class="string">"   jne     1f      \n"</span></div><div class="line">        <span class="string">"   lock            \n"</span></div><div class="line">        <span class="string">"   xchgb   %0,%1   \n"</span></div><div class="line">        <span class="string">"1: \n"</span></div><div class="line">:       <span class="string">"+q"</span>(<span class="number">_</span>res), <span class="string">"+m"</span>(*lock)</div><div class="line">:       <span class="comment">/* no inputs */</span></div><div class="line">:       <span class="string">"memory"</span>, <span class="string">"cc"</span>);</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) <span class="number">_</span>res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spin_lock</span><span class="params">(<span class="keyword">lock_t</span> *lock)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(tas(lock)==<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spin_unlock</span><span class="params">(<span class="keyword">lock_t</span> *lock)</span></span></div><div class="line">&#123;</div><div class="line">	*lock = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">shmalloc</span><span class="params">(<span class="keyword">ssize_t</span> size)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">void</span> *mem = (<span class="keyword">void</span> *)mmap(<span class="literal">NULL</span>,size,PROT_READ|PROT_WRITE,MAP_SHARED|MAP_ANONYMOUS,<span class="number">-1</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (mem == (<span class="keyword">void</span> *)<span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"mmap error: %s\n"</span>,strerror(errno));</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> *count = (<span class="keyword">int</span> *)shmalloc(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">	<span class="keyword">lock_t</span> *lock = (<span class="keyword">lock_t</span> *)shmalloc(<span class="keyword">sizeof</span>(<span class="keyword">lock_t</span>));</div><div class="line">	*lock = <span class="number">0</span>;</div><div class="line"></div><div class="line">	*count = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">pid_t</span> pid = fork();</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (pid &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"fork failed!\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (pid == <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">/* child */</span></div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++)</div><div class="line">		&#123;</div><div class="line">			spin_lock(lock);</div><div class="line">				(*count)++;</div><div class="line">			spin_unlock(lock);</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</div><div class="line">	&#123;	</div><div class="line">		<span class="comment">/* parent */</span></div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++)</div><div class="line">		&#123;</div><div class="line">			spin_lock(lock);</div><div class="line">				(*count)++;</div><div class="line">			spin_unlock(lock);</div><div class="line">		&#125;</div><div class="line">		wait(<span class="literal">NULL</span>);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,*count);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> $ ./tas </div><div class="line">2000000</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux中进程共享内存的2种方法]]></title>
      <url>http://shenyu.wiki/2016/11/12/linux%E4%B8%AD%E8%BF%9B%E7%A8%8B%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9A%842%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>共享内存可以在两个或多个进程间共享一个给定的内存区域，因为数据不需要在进程之间复制，相比于pipe、socket、file等共享通信方式，共享内存是最快的一种共享机制。linux中共享内存一般有2种方法即:shared memory和mmap。</p>
</blockquote>
<p>下面两个例子都是首先在主进程里创建一段共享内存，然后通过fork创建一个子进程。子进程在共享内存里写入Hello world，父进程等待子进程退出之后读取共享内存中的内容并显示出来。<br>下面通过两个实例源码来介绍。</p>
<a id="more"></a>
<h2 id="shmat"><a href="#shmat" class="headerlink" title="shmat"></a>shmat</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ipc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/shm.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> shmid = shmget(IPC_PRIVATE,<span class="number">100</span>,IPC_CREAT|IPC_EXCL|<span class="number">0600</span>);</div><div class="line">	<span class="keyword">char</span> *mem = (<span class="keyword">char</span> *)shmat(shmid,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (shmid == <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"shmget error:%s\n"</span>,strerror(errno));</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">pid_t</span> pid = fork();</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (pid &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"fork failed!\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (pid == <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">char</span> *str = <span class="string">"Hello world!\n"</span>;</div><div class="line">		<span class="built_in">memcpy</span>(mem,str,<span class="built_in">strlen</span>(str)+<span class="number">1</span>);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</div><div class="line">	&#123;	</div><div class="line">		wait(<span class="literal">NULL</span>);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%s"</span>,mem);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./shm</div><div class="line">Hello world!</div></pre></td></tr></table></figure>
<h2 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/mman.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> *mem = (<span class="keyword">char</span> *)mmap(<span class="literal">NULL</span>,<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">100</span>,PROT_READ|PROT_WRITE,MAP_SHARED|MAP_ANONYMOUS,<span class="number">-1</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">void</span> *)mem == (<span class="keyword">void</span> *)<span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"mmap error: %s\n"</span>,strerror(errno));</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">pid_t</span> pid = fork();</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (pid &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"fork failed!\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (pid == <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">char</span> *str = <span class="string">"Hello world!\n"</span>;</div><div class="line">		<span class="built_in">memcpy</span>(mem,str,<span class="built_in">strlen</span>(str)+<span class="number">1</span>);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</div><div class="line">	&#123;	</div><div class="line">		wait(<span class="literal">NULL</span>);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%s"</span>,mem);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./mmap</div><div class="line">Hello world!</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux进程改名]]></title>
      <url>http://shenyu.wiki/2016/11/10/linux%E8%BF%9B%E7%A8%8B%E6%94%B9%E5%90%8D/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在多进程程序中，用ps命令能看到进程的名字。这样能够方便管理，不会因为看到好多同样的进程而不知道他们在干什么而茫然，同时也能避免管理员kill掉错误的进程。</p>
</blockquote>
<p>比如PostgreSQL刚启动时共有7个进程，通过ps可以清楚的看到每个进程是干什么的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ps ax | grep postgres</div><div class="line">26300 pts/26   S      0:00 ./postgres -D ../data</div><div class="line">26301 ?        Ss     0:00 postgres: logger process  </div><div class="line">26303 ?        Ss     0:00 postgres: checkpointer process  </div><div class="line">26304 ?        Ss     0:00 postgres: writer process  </div><div class="line">26305 ?        Ss     0:00 postgres: wal writer process  </div><div class="line">26306 ?        Ss     0:00 postgres: autovacuum launcher process  </div><div class="line">26307 ?        Ss     0:00 postgres: stats collector process</div></pre></td></tr></table></figure>
<p>那么在linux下是如何做到进程改名的呢？</p>
<h2 id="方法1–修改argv-0"><a href="#方法1–修改argv-0" class="headerlink" title="方法1–修改argv[0]"></a>方法1–修改argv[0]</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>                                                                             #<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memcpy</span>(argv[<span class="number">0</span>],<span class="string">"hello world"</span>,<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="built_in">strlen</span>(argv[<span class="number">0</span>]));</div><div class="line">    sleep(<span class="number">100</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">yshen@yshen-office:~/test/procname$ ./main &amp;</div><div class="line">[2] 26903</div><div class="line">yshen@yshen-office:~/test/procname$ ps</div><div class="line">  PID TTY          TIME CMD</div><div class="line">26903 pts/14   00:00:00 main</div><div class="line">yshen@yshen-office:~/test/procname$ ps ax | grep hello</div><div class="line">26903 pts/14   S      0:00 hello</div></pre></td></tr></table></figure>
<p>问题：ps不起效果，ps ax才能看到。不知到为啥。<br>其实PostgreSQL中就是用的这种方法，详见ps_status.c这个文件。</p>
<h2 id="方法2–用prctl"><a href="#方法2–用prctl" class="headerlink" title="方法2–用prctl"></a>方法2–用prctl</h2><p>需要Linux 2.1.57版本以上。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/prctl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">char</span> *progname = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setproctitle</span><span class="params">(<span class="keyword">char</span> *title)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> buf[<span class="number">256</span>];</div><div class="line"></div><div class="line">	<span class="built_in">sprintf</span>(buf,<span class="string">"%s: %s"</span>, progname, title);</div><div class="line">	<span class="keyword">if</span> (<span class="number">0</span> != prctl(PR_SET_NAME,buf,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"error prctl, errno=%d, errstr=%s\n"</span>, errno, strerror(errno));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">getproctitle</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> *ret = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">16</span>);</div><div class="line">	<span class="keyword">if</span> (<span class="number">0</span> != prctl(PR_GET_NAME,ret,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"error prctl, errno=%d, errstr=%s\n"</span>, errno, strerror(errno));</div><div class="line">		<span class="built_in">free</span>(ret);</div><div class="line">		ret = <span class="literal">NULL</span>;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">pid_t</span> pid;</div><div class="line">	progname = strdup(argv[<span class="number">0</span>]);</div><div class="line">	</div><div class="line">	<span class="keyword">switch</span>(pid = fork())</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">		&#123;</div><div class="line">			<span class="comment">/* child */</span></div><div class="line">			setproctitle(<span class="string">"child"</span>);</div><div class="line">			sleep(<span class="number">100</span>);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">case</span> <span class="number">-1</span>:</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"fork falied!\n"</span>);</div><div class="line">			<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">		&#123;</div><div class="line">			<span class="comment">/* parent */</span></div><div class="line">			setproctitle(<span class="string">"parent"</span>);</div><div class="line">			sleep(<span class="number">100</span>);</div><div class="line">			wait(<span class="literal">NULL</span>);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ./main  &amp;</div><div class="line">[1] 26917</div><div class="line">$ ps</div><div class="line">  PID TTY          TIME CMD</div><div class="line">16399 pts/14   00:00:00 bash</div><div class="line">25668 pts/14   00:00:02 gedit</div><div class="line">26917 pts/14   00:00:00 ./main2: parent</div><div class="line">26918 pts/14   00:00:00 ./main2: child</div><div class="line">$ ps ax | grep main</div><div class="line">26917 pts/14   S      0:00 ./main</div><div class="line">26918 pts/14   S      0:00 ./main</div></pre></td></tr></table></figure>
<p>问题：ps ax不起效果，ps 看到。不知到为啥。</p>
<p>看来综合用这两种方法才行啊。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL源码中的EXEC_BACKEND宏]]></title>
      <url>http://shenyu.wiki/2016/11/09/PostgreSQL%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84EXEC-BACKEND%E5%AE%8F/</url>
      <content type="html"><![CDATA[<p>看pg源码的时候经常会见到一个EXEC_BACKEND宏，在源码中并没有给出解释，那么它是什么意思呢？从<a href="http://postgresql.nabble.com/EXEC-BACKEND-td1991462.html这里找到了解释：" target="_blank" rel="external">http://postgresql.nabble.com/EXEC-BACKEND-td1991462.html这里找到了解释：</a></p>
<p>It exists because Windows doesn’t have fork(), only the equivalent of<br>fork-and-exec.  Which means that no state variables will be inherited<br>from the postmaster by its child processes, and any state that needs to<br>be carried across has to be handled explicitly.  You can define<br>EXEC_BACKEND in a non-Windows build, for the purpose of testing code<br>to see if it works in that environment.</p>
<p>regards, tom lane </p>
<p>意思是说用<code>EXEC_BACKEND</code>宏是因为Windows没有fork(),只好用别的方法来实现fork-and-exec。但是这样以来，生成的子进程没办法继承父进程的一些状态变量，所以状态变量必须显式的传给所有的子进程。在非Windows平台上编译的时候（比如linux）也可以定义<code>EXEC_BACKEND</code>宏来做调试。</p>
<p>可见<code>EXEC_BACKEND</code>宏是为了在win32上用来实现变量传递机制。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL ODBC driver internal]]></title>
      <url>http://shenyu.wiki/2016/11/09/PostgreSQL-ODBC-driver-internal/</url>
      <content type="html"><![CDATA[<p><img src="http://static.zybuluo.com/shenyuflying/15buljfauji0u51n4nxoxbmk/%E5%B9%BB%E7%81%AF%E7%89%871.png" alt="幻灯片1.png-23.4kB"></p>
<p><img src="http://static.zybuluo.com/shenyuflying/71pb0f3iub67tnxwp1io8ixf/%E5%B9%BB%E7%81%AF%E7%89%872.png" alt="幻灯片2.png-99.8kB"></p>
<p><img src="http://static.zybuluo.com/shenyuflying/9hojapjxxlc9fuv751kgmbn9/%E5%B9%BB%E7%81%AF%E7%89%873.png" alt="幻灯片3.png-144.5kB"></p>
<p><img src="http://static.zybuluo.com/shenyuflying/c948ihhsyo84e5wan6ztl197/%E5%B9%BB%E7%81%AF%E7%89%874.png" alt="幻灯片4.png-63.4kB"></p>
<p><img src="http://static.zybuluo.com/shenyuflying/2tpaw767vsio8xn08cnznhwi/%E5%B9%BB%E7%81%AF%E7%89%875.png" alt="幻灯片5.png-47.7kB"></p>
<p><img src="http://static.zybuluo.com/shenyuflying/gb2ecwobm8f4xwkqmj1bhrpx/%E5%B9%BB%E7%81%AF%E7%89%8712.png" alt="幻灯片12.png-56.7kB"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pgNodeGraph -- a postgreSQL node tree print tool]]></title>
      <url>http://shenyu.wiki/2016/11/04/pgNodeGraph-a-postgreSQL-node-tree-print-tool/</url>
      <content type="html"><![CDATA[<blockquote>
<p>The output of postgreSQL node tree can be very long for the developer to investigate. pgNodeGraph tool can covert the output of the node tree into jpg formatted pictiure which is quite convenient for developing or debugging purposess.</p>
</blockquote>
<p><a href="https://github.com/shenyuflying/pgNodeGraph" target="_blank" rel="external">view source on github</a></p>
<h2 id="short-tour"><a href="#short-tour" class="headerlink" title="short tour"></a>short tour</h2><p>suppose we have a table like this<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">postgres=# \d class</div><div class="line">             Table &quot;public.class&quot;</div><div class="line">  Column   |         Type          | Modifiers </div><div class="line">-----------+-----------------------+-----------</div><div class="line"> classno   | character varying(10) | </div><div class="line"> classname | character varying(10) | </div><div class="line"> gno       | character varying(10) |</div></pre></td></tr></table></figure></p>
<p>by turning the following option on, the postgreSQL will print the node tree after parse and plan the query.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set debug_print_parse = on;</div><div class="line">set debug_print_plan = on;</div><div class="line">set debug_pretty_print = on;</div></pre></td></tr></table></figure></p>
<p>now let’s execute a statment.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">postgres=# select * from class;</div></pre></td></tr></table></figure></p>
<p>the sever will print the parse and plan node tree in the log. according to different type of queries, the out put usually last for hundred or thousand lines. below is an example.</p>
<p><img src="http://static.zybuluo.com/shenyuflying/3pnykidt3h56e4n5ukn6e9bz/image_1at06c8lbe4r1k4lrcn1o5hll113.png" alt="image_1at06c8lbe4r1k4lrcn1o5hll113.png-32.9kB"></p>
<p>the node tree printed by of postgreSQL, as you have seen is hard for the developer or user to see it as a whole. so, is there a way to print the node tree as a picture format? the answer is yes. now, let me show you how to use pgNodeGraph to convert the node tree to a picture format.</p>
<ol>
<li>copy and paste the node tree in text form.</li>
<li>put it in node dir</li>
<li>run <code>$ ./pgNodeGraph</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./pgNodeGraph </div><div class="line">processing file sample.node ...done</div></pre></td></tr></table></figure>
</li>
</ol>
<p>after a short wait, the node tree in jpg format is generated under the pic directory.</p>
<p>QueryNodeTree：<br><img src="http://static.zybuluo.com/shenyuflying/5hpdpk2pagv927zqtajj1nu3/image_1at05s7f0n6l6i9blt0918kp9.png" alt="image_1at05s7f0n6l6i9blt0918kp9.png-421.8kB"></p>
<p>PlanNodeTree：<br><img src="http://static.zybuluo.com/shenyuflying/6ufsqp1cmsirhumjbt61r1an/image_1at0639g0ftv1fulrt1ojs105am.png" alt="image_1at0639g0ftv1fulrt1ojs105am.png-404.8kB"></p>
<a id="more"></a>
<h2 id="A-complex-example"><a href="#A-complex-example" class="headerlink" title="A complex example"></a>A complex example</h2><p>Now, let’s try a much more complex query to see whether pgNodeGraph will work well.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">select classno, classname, avg(score)::numeric(5,1) as 平均分</div><div class="line">from   sc, (select * from class where class.gno=&apos;一年级&apos;) as sub</div><div class="line">where</div><div class="line"> sc.sno in (select sno from student where student.classno=sub.classno)</div><div class="line"> and</div><div class="line"> sc.cno in (select course.cno from course where course.cname=&apos;数学&apos;)</div><div class="line">group by classno, classname</div><div class="line">having avg(score)&gt;60</div><div class="line">order by 平均分 desc;</div></pre></td></tr></table></figure>
<p>following the same procedure in above, we generate the result as below.<br>QueryNodeTree:<br><img src="http://static.zybuluo.com/shenyuflying/cduxtumwqj7nuvvt93en76dk/image_1at05cvlss4p17abdpk6su88kc.png" alt="image_1at05cvlss4p17abdpk6su88kc.png-2852.3kB"><br>PlanNodeTree:<br><img src="http://static.zybuluo.com/shenyuflying/2ktr9kohxtguhc1w5o0o8qc5/image_1at074oh613aeirvkbifu0gam1g.png" alt="image_1at074oh613aeirvkbifu0gam1g.png-5300.1kB"></p>
<h1 id="hack-into-the-code"><a href="#hack-into-the-code" class="headerlink" title="hack into the code"></a>hack into the code</h1><p>pgNodeGraph tool first convert the node tree printed by postgreSQL to dot format.</p>
<p>the node tree:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;Node1</div><div class="line"> :elem1</div><div class="line"> :elem2</div><div class="line"> :elem3</div><div class="line"> &#123;Node2</div><div class="line">  :elem1</div><div class="line">  :elem2</div><div class="line">  :elem3</div><div class="line">  &#123;Node3</div><div class="line">   :elem1</div><div class="line">   :elem2</div><div class="line">   :elem3</div><div class="line">  &#125;</div><div class="line">  :elem4</div><div class="line">  :elem5</div><div class="line"> &#125;</div><div class="line"> :elem4</div><div class="line"> &#123;Node4</div><div class="line">   :elem1</div><div class="line">   :elem2</div><div class="line">   :elem3</div><div class="line"> &#125;</div><div class="line"> :elem5</div><div class="line"> :elem6</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>the corresponding dot format:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">digraph Query &#123;</div><div class="line">size=&quot;100000,100000&quot;;</div><div class="line">rankdir=LR;</div><div class="line">node [shape=record];</div><div class="line">node1 [shape=record, label=&quot;&lt;f0&gt; Node1 | &lt;f1&gt; elem1 | &lt;f2&gt; elem2 | &lt;f3&gt; elem3 | &lt;f4&gt; elem4 | &lt;f5&gt; elem5 | &lt;f6&gt; elem6 &quot;];</div><div class="line">node2 [shape=record, label=&quot;&lt;f0&gt; Node2 | &lt;f1&gt; elem1 | &lt;f2&gt; elem2 | &lt;f3&gt; elem3 | &lt;f4&gt; elem4 | &lt;f5&gt; elem5 &quot;];</div><div class="line">node3 [shape=record, label=&quot;&lt;f0&gt; Node3 | &lt;f1&gt; elem1 | &lt;f2&gt; elem2 | &lt;f3&gt; elem3 &quot;];</div><div class="line">node4 [shape=record, label=&quot;&lt;f0&gt; Node4 | &lt;f1&gt; elem1 | &lt;f2&gt; elem2 | &lt;f3&gt; elem3 &quot;];</div><div class="line">node1:f3 -&gt; node2:f0</div><div class="line">node1:f4 -&gt; node4:f0</div><div class="line">node2:f3 -&gt; node3:f0</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>the by using the <code>dot</code> tool to genereate the picture.<br>so, you must have <code>dot</code> or <code>graphvis</code> tool installed on  your system.</p>
<p><img src="http://static.zybuluo.com/shenyuflying/iht0aj2dj7zyoj1l2wt3isfb/image_1at08ct2v1f1q7mcdrh1g861qi12f.png" alt="image_1at08ct2v1f1q7mcdrh1g861qi12f.png-47.7kB"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL本地化过程及维护]]></title>
      <url>http://shenyu.wiki/2016/11/03/PostgreSQL%E6%9C%AC%E5%9C%B0%E5%8C%96%E8%BF%87%E7%A8%8B%E5%8F%8A%E7%BB%B4%E6%8A%A4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>PostgreSQL如果要支持本地化，那么./configure的时候要加上–enable-nls构建选项。加了该选项之后通过设置相应的locale之后，PostgreSQL显示的信息就可以是中文了。那么其中的过程是什么呢？如何在添加了新的程序或加了新的翻译字符串之后维护本地化内容呢？</p>
</blockquote>
<p>[TOC]</p>
<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>.po文件： po，Portable Object，里面记录了翻译内容。<br>.mo文件： mo，Machine Object，其实是一个二进制文件，用来提供给程序使用。<br>xgettext：一个工具，根据c文件生成po文件<br>msgfmt： 一个工具，根据po文件生成mo文件<br>msgmerge：更新po文件<br>nls.mk：翻译包的配置，比如翻译哪些c文件</p>
<h2 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">        xgettext            人工翻译        msgfmt          INSTALL</div><div class="line">.c文件-----------&gt;.pot文件----------&gt;.po----------&gt;.mo------------&gt;./bin/po/zh/LC_MESSAGES/.mo</div><div class="line"></div><div class="line">         gcc                              INSTALL</div><div class="line">.c文件-----------&gt;可执行文件--------------------------------------&gt;./bin</div></pre></td></tr></table></figure>
<p>基本过程如上图，首先需要xgettext工具根据.c文件生成.pot文件，接下来需要人工翻译。翻译过后用msgfmt工具把翻译好的.po文件生成.mo文件。最后把.mo文件放到制定位置即可。但是不需要我们自己直接调这些工具来完成本地化的工作，其过程都写在了<code>nls-global.mk</code>文件里面。我们只要<code>make init-po</code>、<code>make update-po</code>、<code>make install-po</code>这几个步骤即可。</p>
<p>最后生成的目录结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ tree</div><div class="line">.</div><div class="line">├── psql.c</div><div class="line">...</div><div class="line">├── Makefile</div><div class="line">├── nls.mk</div><div class="line">├── po</div><div class="line">│   ├── cs.mo</div><div class="line">│   ├── cs.po</div><div class="line">...</div><div class="line">│   ├── zh_CN.mo</div><div class="line">│   ├── zh_CN.po</div><div class="line">│   ├── zh_TW.mo</div><div class="line">│   └── zh_TW.po</div><div class="line"></div><div class="line">├── prompt.c</div><div class="line">...</div><div class="line"></div><div class="line">1 directory, 65 files</div></pre></td></tr></table></figure></p>
<h2 id="本地化详细过程"><a href="#本地化详细过程" class="headerlink" title="本地化详细过程"></a>本地化详细过程</h2><p>./configure的时候加上–enable-nls构建选项之后，构建过程会发生如下变化：</p>
<ol>
<li>gcc就会有-DENABLE_NLS的宏定义。从而gettext相关的代码就会被编译进去。</li>
<li>make就会处理相关国际化的内容。相关过程包含了nls.mk和nls-global.mk文件里面。</li>
</ol>
<p>每个工具比如src/bin/psql目录面都有一个nls.mk文件用来说明目录下对应工具的翻译包的生成规则，另外src文件夹下面还有一个nls-global.mk文件里面写了如何利用gettext相关工具生成翻译和安装翻译包。下面看一下他们中的内容。</p>
<a id="more"></a>
<h3 id="nls-mk"><a href="#nls-mk" class="headerlink" title="nls.mk"></a>nls.mk</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">CATALOG_NAME     = psql</div><div class="line">AVAIL_LANGUAGES  = cs de es fr it ja pl pt_BR ru zh_CN zh_TW</div><div class="line">GETTEXT_FILES    = command.c common.c copy.c help.c input.c large_obj.c \</div><div class="line">                   mainloop.c psqlscanslash.c startup.c \</div><div class="line">                   describe.c sql_help.h sql_help.c \</div><div class="line">                   tab-complete.c variables.c \</div><div class="line">                   ../../fe_utils/print.c ../../fe_utils/psqlscan.c \</div><div class="line">                   ../../common/exec.c ../../common/fe_memutils.c ../../common/username.c \</div><div class="line">    GETTEXT_TRIGGER../../common/wait_error.c</div><div class="line">GETTEXT_TRIGGERS = N_ psql_error simple_prompt write_error</div><div class="line">GETTEXT_FLAGS    = psql_error:1:c-format write_error:1:c-format</div></pre></td></tr></table></figure>
<p>下面来解释每个变量：<br><code>CATALOG_NAME</code>是指对应的程序，这里是psql<br><code>AVAIL_LANGUAGES</code>是指的可用的翻译，比如这里有多种。<br><code>GETTEXT_FILES</code>是指需要翻译的c文件，一般把程序c文件中带输出的c文件都加到这里<br><code>GETTEXT_TRIGGERS</code>是除了默认的指包含可翻译字符串的函数，默认的有<code>_</code>、<code>gettext</code>。<br><code>GETTEXT_FLAGS</code>是指<code>GETTEXT_TRIGGERS</code>列出的对应函数的第几个参数是待翻译的字符串</p>
<h3 id="nls-global-mk"><a href="#nls-global-mk" class="headerlink" title="nls-global.mk"></a>nls-global.mk</h3><p>这个文件比较长，我们分开来看。<br>第一部分都是注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># src/nls-global.mk                                 </div><div class="line"># Common rules for Native Language Support (NLS)</div><div class="line">#</div><div class="line"># If some subdirectory of the source tree wants to provide NLS, it</div><div class="line"># needs to contain a file &apos;nls.mk&apos; with the following make variable</div><div class="line"># assignments:</div><div class="line">#</div><div class="line"># CATALOG_NAME          -- name of the message catalog (xxx.po); probably</div><div class="line">#                          name of the program</div><div class="line"># AVAIL_LANGUAGES       -- list of languages that are provided/supported</div><div class="line"># GETTEXT_FILES         -- list of source files that contain message strings</div><div class="line"># GETTEXT_TRIGGERS      -- (optional) list of functions that contain</div><div class="line">#                          translatable strings</div><div class="line"># GETTEXT_FLAGS         -- (optional) list of gettext --flag arguments to mark</div><div class="line">#                          function arguments that contain C format strings</div><div class="line">#                          (functions must be listed in TRIGGERS and FLAGS)</div><div class="line">#</div><div class="line"># That&apos;s all, the rest is done here, if --enable-nls was specified.</div><div class="line">#</div><div class="line"># The only user-visible targets here are &apos;init-po&apos;, to make an initial</div><div class="line"># &quot;blank&quot; catalog from program sources, and &apos;update-po&apos;, which is to</div><div class="line"># be called if the messages in the program source have changed, in</div><div class="line"># order to merge the changes into the existing .po files.</div></pre></td></tr></table></figure></p>
<p>是说如果这个文件夹下的程序需要本地化NLS那么需要包含一个nls.mk的文件，以及它的格式。nls.mk文件的内容上面讲过。<br>还说了用户只需要用<code>make init-po</code>来初始化一个空的<code>catalog</code>语言包然后<code>make update-po</code>来维护翻译就行了。另外的用户可以不关心。其实还提供了如下命令<br><code>make install-po</code>来安装本地化文件<br><code>make clean-po</code>来删除一些无用的中间文件比如.pot .po.new .mo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># existence checked by Makefile.global; otherwise we won&apos;t get here</div><div class="line">include $(srcdir)/nls.mk</div></pre></td></tr></table></figure></p>
<p>包含了这个目录下的nls.mk文件，即一些规则。其实这样只需要维护nls.mk文件就行。nls-global.mk文件一般不需要改动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># If user specified the languages he wants in --enable-nls=LANGUAGES,</div><div class="line"># filter out the rest.  Else use all available ones.</div><div class="line">ifdef WANTED_LANGUAGES</div><div class="line">LANGUAGES = $(filter $(WANTED_LANGUAGES), $(AVAIL_LANGUAGES))</div><div class="line">else</div><div class="line">LANGUAGES = $(AVAIL_LANGUAGES)</div><div class="line">endif</div></pre></td></tr></table></figure></p>
<p>这几行说了在./configure的时候加了<code>--enable-nls=LANGUAGES</code>就是说只需要支持一种语言，那么make就会用<code>filter</code>函数过滤掉不需要的语言，否则就会生成所有语言的翻译。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PO_FILES = $(addprefix po/, $(addsuffix .po, $(LANGUAGES)))</div><div class="line">ALL_PO_FILES = $(addprefix po/, $(addsuffix .po, $(AVAIL_LANGUAGES)))</div><div class="line">MO_FILES = $(addprefix po/, $(addsuffix .mo, $(LANGUAGES)))</div></pre></td></tr></table></figure></p>
<p>这几行是说接下来需要生成哪些po文件和mo文件。比如LANGUAGES是<code>zh_CN</code>那么addsuffix会加上<code>.po</code>后缀生成<code>zh_CN.po</code>接下来addprefix会加上<code>po/</code>前缀生成<code>po/zh_CN.po</code>类似的也会生成<code>po/zh_CN.mo</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ifdef XGETTEXT</div><div class="line">XGETTEXT += -ctranslator --copyright-holder=&apos;PostgreSQL Global Development Group&apos; --msgid-bugs-address=pgsql-bugs@postgresql.org --no-wrap --sort-by-file --package-name=&apos;$(CATALOG_NAME) (PostgreSQL)&apos; --package-version=&apos;$(MAJORVERSION)&apos;</div><div class="line">endif</div><div class="line"></div><div class="line">ifdef MSGMERGE</div><div class="line">MSGMERGE += --no-wrap --previous --sort-by-file</div><div class="line">endif</div></pre></td></tr></table></figure>
<p>这几行是在准备xgettext和msgerge命令需要的参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># _ is defined in c.h, so it&apos;s global</div><div class="line">GETTEXT_TRIGGERS += _</div><div class="line">GETTEXT_FLAGS    += _:1:pass-c-format</div></pre></td></tr></table></figure>
<p>这几行对比nls.mk文件中对应的选项，其实就是加了默认的<code>_()</code>函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># common settings that apply to backend and all backend modules</div><div class="line">BACKEND_COMMON_GETTEXT_TRIGGERS = \</div><div class="line">    errmsg errmsg_plural:1,2 \</div><div class="line">    errdetail errdetail_log errdetail_plural:1,2 \</div><div class="line">    errhint \</div><div class="line">    errcontext \</div><div class="line">    XactLockTableWait:4 \</div><div class="line">    MultiXactIdWait:6 \</div><div class="line">    ConditionalMultiXactIdWait:6</div><div class="line">BACKEND_COMMON_GETTEXT_FLAGS = \</div><div class="line">    errmsg:1:c-format errmsg_plural:1:c-format errmsg_plural:2:c-format \</div><div class="line">    errdetail:1:c-format errdetail_log:1:c-format errdetail_plural:1:c-format errdetail_plural:2:c-format \</div><div class="line">    errhint:1:c-format \</div><div class="line">    errcontext:1:c-format</div></pre></td></tr></table></figure></p>
<p>接下来又加了另外的一些函数。这些可以认为是多个语言包默认都要支持的，就不用挨个加在nls.mk文件里面了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">all-po: $(MO_FILES)</div><div class="line"></div><div class="line">%.mo: %.po</div><div class="line">    $(MSGFMT) $(MSGFMT_FLAGS) -o $@ $&lt;</div></pre></td></tr></table></figure></p>
<p>这里是生成规则，是说最后需要生成<code>.mo</code>文件。生成<code>.mo</code>文件首先需要先成<code>.po</code>文件。<code>.mo</code>来生成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ifeq ($(word 1,$(GETTEXT_FILES)),+)</div><div class="line">po/$(CATALOG_NAME).pot: $(word 2, $(GETTEXT_FILES)) $(MAKEFILE_LIST)                                                                                                                                             </div><div class="line">ifdef XGETTEXT</div><div class="line">    $(XGETTEXT) -D $(srcdir) -n $(addprefix -k, $(GETTEXT_TRIGGERS)) $(addprefix --flag=, $(GETTEXT_FLAGS)) -f $&lt;</div><div class="line">else</div><div class="line">    @echo &quot;You don&apos;t have &apos;xgettext&apos;.&quot;; exit 1</div><div class="line">endif</div><div class="line">else # GETTEXT_FILES</div><div class="line">po/$(CATALOG_NAME).pot: $(GETTEXT_FILES) $(MAKEFILE_LIST)</div><div class="line"># Change to srcdir explicitly, don&apos;t rely on $^.  That way we get</div><div class="line"># consistent #: file references in the po files.</div><div class="line">ifdef XGETTEXT</div><div class="line">    $(XGETTEXT) -D $(srcdir) -n $(addprefix -k, $(GETTEXT_TRIGGERS)) $(addprefix --flag=, $(GETTEXT_FLAGS)) $(GETTEXT_FILES)</div><div class="line">else</div><div class="line">    @echo &quot;You don&apos;t have &apos;xgettext&apos;.&quot;; exit 1</div><div class="line">endif</div><div class="line">endif # GETTEXT_FILES</div><div class="line">    @$(MKDIR_P) $(dir $@)</div><div class="line">    sed -e &apos;1,18 &#123; s/SOME DESCRIPTIVE TITLE./LANGUAGE message translation file for $(CATALOG_NAME)/;s/PACKAGE/PostgreSQL/g;s/VERSION/$(MAJORVERSION)/g;s/YEAR/&apos;`date +%Y`&apos;/g; &#125;&apos; messages.po &gt;$@</div><div class="line">    rm messages.po</div></pre></td></tr></table></figure></p>
<p>这一段是最重要的，根据规则<code>po/$(CATALOG_NAME).pot: $(GETTEXT_FILES) $(MAKEFILE_LIST)</code>来看是生成<code>pot</code>文件依赖<code>GETTEXT_FILES</code>和<code>MAKEFILE_LIST</code>这段比较复杂，就是用xgettext生成po文件。下面是一些安装的规则，这里就略去不讲了。具体语法可以参考make的文档。</p>
<p>ok，明白了基本的原理，那么如何维护呢？下面介绍一些维护的内容。</p>
<h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2><h3 id="添加了新的程序"><a href="#添加了新的程序" class="headerlink" title="添加了新的程序"></a>添加了新的程序</h3><p>从其他目录下拷贝一个nls.mk文件过来，可以参考psql的那个nls.mk：<br>执行如下命令从c文件生成po文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make init-po</div></pre></td></tr></table></figure></p>
<p>接下来翻译po文件即可，翻译过后把fuzzy去掉。需要注意占位符的位置是一致的。<br>最后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make install</div></pre></td></tr></table></figure></p>
<p>生成mo文件并安装到对应的目录</p>
<h3 id="更改或加入了新的翻译字符串"><a href="#更改或加入了新的翻译字符串" class="headerlink" title="更改或加入了新的翻译字符串"></a>更改或加入了新的翻译字符串</h3><p>当我们改动代码加入或修改了需要翻译的字符串时需要执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make update-po</div></pre></td></tr></table></figure></p>
<p>接下来翻译po文件即可，翻译过后把fuzzy去掉。<br>最后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make install</div></pre></td></tr></table></figure></p>
<h3 id="更改或加入了新的c文件"><a href="#更改或加入了新的c文件" class="headerlink" title="更改或加入了新的c文件"></a>更改或加入了新的c文件</h3><p>修改nls.mk在<code>GETTEXT_FILES</code>加上新加的c文件</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言程序的国际化]]></title>
      <url>http://shenyu.wiki/2016/11/02/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9B%BD%E9%99%85%E5%8C%96/</url>
      <content type="html"><![CDATA[<blockquote>
<p>c语言程序写的时候字符串用英语，基本固定了。那么如果想让别的语言的人使用（比如中文），就得把程序里面的字符串挨个翻译，最后再重新编译一次程序维护起来特别麻烦。那么有什么办法能够让程序显示中文？GNU的gettext项目就是用来做这个的。这篇文章以c语言为例介绍了国际化的gettext。</p>
</blockquote>
<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>.po文件： po，Portable Object，里面记录了翻译内容。<br>.mo文件： mo，Machine Object，其实是一个二进制文件，用来提供给程序使用。<br>xgettext：一个工具，根据c文件生成po文件<br>msgfmt： 一个工具，根据po文件生成mo文件<br>msgmerge：更新po文件</p>
<h2 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">        xgettext              翻译        msgfmt          INSTALL</div><div class="line">.c文件-----------&gt;.pot文件----------&gt;.po----------&gt;.mo------------&gt;./bin/po/zh/LC_MESSAGES/.mo</div><div class="line"></div><div class="line">         gcc                              INSTALL</div><div class="line">.c文件-----------&gt;可执行文件--------------------------------------&gt;./bin</div></pre></td></tr></table></figure>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在程序中添加这么几行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#include &lt;libintl.h&gt;</div><div class="line">#include&lt;locale.h&gt;</div><div class="line">#define _(String) gettext (String)</div><div class="line">#define gettext_noop(String) String</div><div class="line">#define N_(String) gettext_noop (String)</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">...</div><div class="line">    setlocale (LC_ALL, &quot;&quot;);</div><div class="line">    bindtextdomain (PACKAGE, LOCALEDIR);</div><div class="line">    textdomain (PACKAGE);</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在需要翻译的字符串使用<code>_()</code>包括进来。比如如下的一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;                                                               </div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line">#include&lt;locale.h&gt;</div><div class="line">#include &lt;libintl.h&gt;</div><div class="line">#define _(String) gettext (String)</div><div class="line">#define gettext_noop(String) String</div><div class="line">#define N_(String) gettext_noop (String)</div><div class="line"></div><div class="line">#define PACKAGE &quot;main&quot;</div><div class="line">#define LOCALEDIR &quot;po&quot;</div><div class="line"></div><div class="line">int main(int argc, char *argv[])</div><div class="line">&#123;</div><div class="line">    setlocale (LC_ALL, &quot;&quot;);</div><div class="line">    bindtextdomain (PACKAGE, LOCALEDIR);</div><div class="line">    textdomain (PACKAGE);</div><div class="line">    printf(_(&quot;Hello world!\n&quot;));</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用xgettext程序来从.c文件中找到所有可以翻译的字符串并生成.pot模板文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xgettext -k_ -o main.pot main.c </div><div class="line">cp main.pot main.po</div></pre></td></tr></table></figure></p>
<p>翻译po文件中的字符串，po文件的格式详见<a href="http://www.gnu.org/software/gettext/manual/html_node/PO-Files.html#PO-Files" target="_blank" rel="external">http://www.gnu.org/software/gettext/manual/html_node/PO-Files.html#PO-Files</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># SOME DESCRIPTIVE TITLE.                                                       </div><div class="line"># Copyright (C) YEAR THE PACKAGE&apos;S COPYRIGHT HOLDER</div><div class="line"># This file is distributed under the same license as the PACKAGE package.</div><div class="line"># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.</div><div class="line">#</div><div class="line">#, fuzzy</div><div class="line">msgid &quot;&quot;</div><div class="line">msgstr &quot;&quot;</div><div class="line">&quot;Project-Id-Version: PACKAGE VERSION\n&quot;</div><div class="line">&quot;Report-Msgid-Bugs-To: \n&quot;</div><div class="line">&quot;POT-Creation-Date: 2016-11-02 17:31+0800\n&quot;</div><div class="line">&quot;PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n&quot;</div><div class="line">&quot;Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n&quot;</div><div class="line">&quot;Language-Team: LANGUAGE &lt;LL@li.org&gt;\n&quot;</div><div class="line">&quot;Language: \n&quot;</div><div class="line">&quot;MIME-Version: 1.0\n&quot;</div><div class="line">&quot;Content-Type: text/plain; charset=UTF-8\n&quot;</div><div class="line">&quot;Content-Transfer-Encoding: 8bit\n&quot;</div><div class="line"></div><div class="line">#: main.c:18</div><div class="line">#, c-format</div><div class="line">msgid &quot;Hello world!\n&quot;</div><div class="line">msgstr &quot;你好世界！\n&quot;</div></pre></td></tr></table></figure></p>
<p>用msgfmt从po文件生成mo文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ msgfmt ./main.po -o main.mo</div></pre></td></tr></table></figure>
<p>把mo文件放到正确的地方，注意这里的<code>po</code>文件夹是main.c里面<code>PACKAGE</code>对应的文件夹。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p po/zh_CN/LC_MESSAGES/</div><div class="line">$ cp ./main.mo  ./po/zh_CN/LC_MESSAGES/main.mo</div></pre></td></tr></table></figure></p>
<p>接下来要gcc编译这个程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc main.c -o main</div></pre></td></tr></table></figure></p>
<p>最后是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ tree</div><div class="line">.</div><div class="line">├── main</div><div class="line">├── main.c</div><div class="line">├── main.mo</div><div class="line">├── main.po</div><div class="line">├── main.pot</div><div class="line">└── po</div><div class="line">    └── zh_CN</div><div class="line">        └── LC_MESSAGES</div><div class="line">            └── main.mo</div><div class="line"></div><div class="line">3 directories, 6 files</div></pre></td></tr></table></figure></p>
<p>运行一下，看到已经是翻译成中文了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./main </div><div class="line">你好世界！</div></pre></td></tr></table></figure></p>
<h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2><p>如果以后修改了.c文件，比如新加了一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    printf(_(&quot;Hello world!\n&quot;));</div><div class="line">    printf(_(&quot;Hello again!\n&quot;));</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>那么用msgmerge就可以更新原来的po文件，不需要再从头来过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$ xgettext --add-comments --keyword=_ main.c -o main.pot --from-code=UTF-8</div><div class="line">$ mv main.pot main.po</div><div class="line">$ msgmerge main.po.old main.po</div><div class="line">main.po: 警告： 字符集“CHARSET”不是可移植的编码名称。</div><div class="line">                将消息转换为用户字符集可能不工作。</div><div class="line">.... 完成。</div><div class="line"># SOME DESCRIPTIVE TITLE.</div><div class="line"># Copyright (C) YEAR THE PACKAGE&apos;S COPYRIGHT HOLDER</div><div class="line"># This file is distributed under the same license as the PACKAGE package.</div><div class="line"># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.</div><div class="line">#</div><div class="line">#, fuzzy</div><div class="line">msgid &quot;&quot;</div><div class="line">msgstr &quot;&quot;</div><div class="line">&quot;Project-Id-Version: PACKAGE VERSION\n&quot;</div><div class="line">&quot;Report-Msgid-Bugs-To: \n&quot;</div><div class="line">&quot;POT-Creation-Date: 2016-11-02 18:30+0800\n&quot;</div><div class="line">&quot;PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n&quot;</div><div class="line">&quot;Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n&quot;</div><div class="line">&quot;Language-Team: LANGUAGE &lt;LL@li.org&gt;\n&quot;</div><div class="line">&quot;Language: \n&quot;</div><div class="line">&quot;MIME-Version: 1.0\n&quot;</div><div class="line">&quot;Content-Type: text/plain; charset=UTF-8\n&quot;</div><div class="line">&quot;Content-Transfer-Encoding: 8bit\n&quot;</div><div class="line"></div><div class="line">#: main.c:18</div><div class="line">#, c-format</div><div class="line">msgid &quot;Hello world!\n&quot;</div><div class="line">msgstr &quot;你好世界！\n&quot;</div><div class="line"></div><div class="line">#: main.c:19</div><div class="line">#, fuzzy, c-format</div><div class="line">msgid &quot;Hello again!\n&quot;</div><div class="line">msgstr &quot;你好世界！\n&quot;</div></pre></td></tr></table></figure></p>
<p>可以看到Hello again被翻译成了你好世界，上面注释有fuzzy是标示这个翻译是模糊匹配的，需要人工再翻译一下。翻译过后去掉fuzzy即可。弄完之后用msgfmt再生成mo文件并拷贝到指定目录即可。当然这些都可以用Makefile来维护。稍后再写一篇PostgreSQL国际化的内容。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[x86_64汇编与调试]]></title>
      <url>http://shenyu.wiki/2016/10/29/x86-64%E6%B1%87%E7%BC%96%E4%B8%8E%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>汇编调试如下好处：<br>1）调试Release版本，调试对象里面没有debug符号。<br>2）当C代码一行中执行了很多语句，汇编调试可以准确定位错误的情况。<br>3）可以分析栈溢出等复杂的错误。<br>掌握汇编和反汇编，会更加清楚寄存器，内存，汇编指令，程序堆栈等概念，理解C语言运行时的细节，帮助提高编程能力。</p>
</blockquote>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p><img src="http://static.zybuluo.com/shenyuflying/r7omgxk97tbzi0axk0pd211a/image_1b07j5oorei6i04o1e1usj1b0d9.png" alt="计算机结构"></p>
<a id="more"></a>
<h2 id="寄存器与栈"><a href="#寄存器与栈" class="headerlink" title="寄存器与栈"></a>寄存器与栈</h2><p><img src="http://static.zybuluo.com/shenyuflying/q8k0ln5ar7saca9cl4cpif5p/image_1b07j8ngs1s0010161diro2quq416.png" alt="image_1b07j8ngs1s0010161diro2quq416.png-27kB"></p>
<p>rbp: 基地址<br>rsp：栈顶<br>rip：指令地址</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span>  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> <span class="number">2</span>  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"> <span class="number">3</span> </div><div class="line"> <span class="number">4</span>  <span class="keyword">int</span> global_var = <span class="number">0</span>;</div><div class="line"> <span class="number">5</span>  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"> 6  &#123;</div><div class="line"> <span class="number">7</span>      <span class="keyword">static</span> <span class="keyword">int</span> static_var = <span class="number">0</span>;</div><div class="line"> <span class="number">8</span>      <span class="keyword">int</span>        local_var  = <span class="number">0</span>;</div><div class="line"> <span class="number">9</span>      <span class="keyword">int</span>        *heap_var  = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line"><span class="number">10</span>      <span class="built_in">printf</span>(<span class="string">"local_var  = %p\n"</span>,&amp;local_var);</div><div class="line"><span class="number">11</span>      <span class="built_in">printf</span>(<span class="string">"heap_var   = %p\n"</span>,heap_var);</div><div class="line"><span class="number">12</span>      <span class="built_in">printf</span>(<span class="string">"static_var = %p\n"</span>,&amp;static_var);</div><div class="line"><span class="number">13</span>      <span class="built_in">printf</span>(<span class="string">"global_var = %p\n"</span>,&amp;global_var);</div><div class="line"><span class="number">14</span>      <span class="built_in">printf</span>(<span class="string">"string     = %p\n"</span>,<span class="string">"Hello world"</span>);</div><div class="line"><span class="number">15</span>      <span class="built_in">printf</span>(<span class="string">"main       = %p\n"</span>,&amp;main);</div><div class="line"><span class="number">16</span>      </div><div class="line"><span class="number">17</span>      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="number">18</span>  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ./location </div><div class="line">local_var  = <span class="number">0x7ffde741b6dc</span></div><div class="line">heap_var   = <span class="number">0x1f90010</span></div><div class="line">static_var = <span class="number">0x601050</span></div><div class="line">global_var = <span class="number">0x60104c</span></div><div class="line"><span class="built_in">string</span>     = <span class="number">0x4006b4</span></div><div class="line">main       = <span class="number">0x40057d</span></div></pre></td></tr></table></figure>
<h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> *a=<span class="number">0x0</span>;   </div><div class="line">    *a=<span class="number">1</span>;       </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">main()</div><div class="line">&#123;</div><div class="line">    bar();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">(gdb) disas bar</div><div class="line">Dump of assembler code for function bar:</div><div class="line">0x0000000000400448 &lt;bar+0&gt;:	push   %rbp</div><div class="line">0x0000000000400449 &lt;bar+1&gt;:	mov    %rsp,%rbp</div><div class="line">0x000000000040044c &lt;bar+4&gt;:	movq   $0x0,-0x8(%rbp)</div><div class="line">0x0000000000400454 &lt;bar+12&gt;:	mov    -0x8(%rbp),%rax</div><div class="line">0x0000000000400458 &lt;bar+16&gt;:	movl   $0x1,(%rax)</div><div class="line">0x000000000040045e &lt;bar+22&gt;:	mov    $0x0,%eax</div><div class="line">0x0000000000400463 &lt;bar+27&gt;:	leaveq </div><div class="line">0x0000000000400464 &lt;bar+28&gt;:	retq   </div><div class="line">End of assembler dump.</div><div class="line">(gdb) disas main</div><div class="line">Dump of assembler code for function main:</div><div class="line">0x0000000000400465 &lt;main+0&gt;:	push   %rbp</div><div class="line">0x0000000000400466 &lt;main+1&gt;:	mov    %rsp,%rbp</div><div class="line">0x0000000000400469 &lt;main+4&gt;:	mov    $0x0,%eax</div><div class="line">0x000000000040046e &lt;main+9&gt;:	callq  0x400448 &lt;bar&gt;</div><div class="line">0x0000000000400473 &lt;main+14&gt;:leaveq </div><div class="line">0x0000000000400474 &lt;main+15&gt;:retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure>
<p>看以上程序对应的汇编，在main里调用bar的指令是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x000000000040046e &lt;main+9&gt;:	callq  0x400448 &lt;bar&gt;</div></pre></td></tr></table></figure></p>
<p>call 等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">push %rip            ---保存rip地址</div><div class="line">jump 0x400448        ---跳转到指定函数地址</div></pre></td></tr></table></figure></p>
<p>跳转到bar后，会有如下指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0x0000000000400448 &lt;bar+0&gt;:	push   %rbp</div><div class="line">0x0000000000400449 &lt;bar+1&gt;:	mov    %rsp,%rbp</div><div class="line">...</div><div class="line">0x0000000000400463 &lt;bar+27&gt;:	leaveq </div><div class="line">0x0000000000400464 &lt;bar+28&gt;:	retq</div></pre></td></tr></table></figure></p>
<p>push %rbp 等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">subl $4, %rsp        ---栈上分配空间</div><div class="line">movl %rbp (%rsp)     ---把rbp保存到栈顶</div></pre></td></tr></table></figure></p>
<p>leave等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">movl %rbp %rsp       ---回退rsp</div><div class="line">popl %rbp            ---恢复rbp</div></pre></td></tr></table></figure></p>
<p>ret 等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pop %rip             ---恢复rip</div></pre></td></tr></table></figure></p>
<p>pop 等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">movl (%esp), %???    ---取栈上的值给？？？</div><div class="line">addl $4, %esp        ---回收栈空间</div></pre></td></tr></table></figure></p>
<h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><h3 id="传参——通过栈传参"><a href="#传参——通过栈传参" class="headerlink" title="传参——通过栈传参"></a>传参——通过栈传参</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> bar(a,b);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">bar:</div><div class="line">    pushl   %ebp</div><div class="line">    movl    %esp, %ebp</div><div class="line">    movl    12(%ebp), %eax</div><div class="line">    addl    8(%ebp), %eax</div><div class="line">    popl    %ebp</div><div class="line">    ret</div><div class="line">foo:</div><div class="line">    pushl   %ebp</div><div class="line">    movl    %esp, %ebp</div><div class="line">    subl    $24, %esp</div><div class="line">    movl    $1, -8(%ebp) </div><div class="line">    movl    $2, -4(%ebp)</div><div class="line">    movl    -4(%ebp), %eax</div><div class="line">    movl    %eax, 4(%esp)</div><div class="line">    movl    -8(%ebp), %eax</div><div class="line">    movl    %eax, (%esp)</div><div class="line">    call    bar</div><div class="line">    leave   </div><div class="line">    ret</div></pre></td></tr></table></figure>
<h3 id="传参——通过寄存器"><a href="#传参——通过寄存器" class="headerlink" title="传参——通过寄存器"></a>传参——通过寄存器</h3><p><img src="http://static.zybuluo.com/shenyuflying/q2bdo1w7x5359vvun9lqoqh2/image_1b07jjuiqa9j1n77po51nnbrdu9.png" alt="image_1b07jjuiqa9j1n77po51nnbrdu9.png-72.9kB"><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> bar(a,b);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">bar:</div><div class="line">    pushq   %rbp</div><div class="line">    movq    %rsp, %rbp</div><div class="line">    movl    %edi, -4(%rbp)</div><div class="line">    movl    %esi, -8(%rbp)</div><div class="line">    movl    -8(%rbp), %eax</div><div class="line">    addl    -4(%rbp), %eax</div><div class="line">    leave   </div><div class="line">    ret</div><div class="line">foo:</div><div class="line">    pushq   %rbp</div><div class="line">    movq    %rsp, %rbp</div><div class="line">    subq    $16, %rsp</div><div class="line">    movl    $1, -8(%rbp)</div><div class="line">    movl    $2, -4(%rbp)</div><div class="line">    movl    -4(%rbp), %esi      --参数 2</div><div class="line">    movl    -8(%rbp), %edi      --参数 1</div><div class="line">    call    bar</div><div class="line">    leave   </div><div class="line">    ret</div></pre></td></tr></table></figure>
<h1 id="优化级别"><a href="#优化级别" class="headerlink" title="优化级别"></a>优化级别</h1><h2 id="gcc-–O1-–m64"><a href="#gcc-–O1-–m64" class="headerlink" title="gcc –O1 –m64"></a>gcc –O1 –m64</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> bar(a,b  <span class="number">1</span> <span class="keyword">int</span> bar(<span class="keyword">int</span> a,<span class="keyword">int</span> b));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> bar:</div><div class="line">    leal    (%rsi,%rdi), %eax</div><div class="line">    ret</div><div class="line">foo:</div><div class="line">    movl    $2, %esi</div><div class="line">    movl    $1, %edi</div><div class="line">    jmp bar            -省去了函数调用</div></pre></td></tr></table></figure>
<h2 id="gcc-–O2-–m64"><a href="#gcc-–O2-–m64" class="headerlink" title="gcc –O2 –m64"></a>gcc –O2 –m64</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</div><div class="line"> <span class="keyword">return</span> bar(a,b  <span class="number">1</span> <span class="keyword">int</span> bar(<span class="keyword">int</span> a,<span class="keyword">int</span> b));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bar:</div><div class="line"> leal    (%rsi,%rdi), %eax</div><div class="line"> ret</div><div class="line">foo:</div><div class="line"> movl    $2, %esi</div><div class="line"> movl    $1, %edi</div><div class="line"> jmp bar            -省去了函数调用</div></pre></td></tr></table></figure>
<h2 id="gcc-–O3-–m64"><a href="#gcc-–O3-–m64" class="headerlink" title="gcc –O3 –m64"></a>gcc –O3 –m64</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</div><div class="line"> <span class="keyword">return</span> bar(a,b);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bar:</div><div class="line"> leal    (%rsi,%rdi), %eax</div><div class="line"> ret</div><div class="line">foo:</div><div class="line"> movl    $3, %eax      -省去了函数调用，直接计算结果返回</div><div class="line"> ret</div></pre></td></tr></table></figure>
<h1 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h1><p>反汇编首先要了解C语言对应的汇编是什么，才方便从汇编反推过来C语言。下面简单总结一下</p>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(a)</div><div class="line">        bar();</div><div class="line">    <span class="keyword">else</span></div><div class="line">        foo();</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">    .file   &quot;if.c&quot;</div><div class="line">    .text</div><div class="line">.globl func</div><div class="line">    .type   func, @function</div><div class="line">func:</div><div class="line">.LFB2:</div><div class="line">    pushq   %rbp</div><div class="line">.LCFI0:</div><div class="line">    movq    %rsp, %rbp</div><div class="line">.LCFI1:</div><div class="line">    subq    $16, %rsp           ---给int a在栈上分配空间</div><div class="line">.LCFI2:</div><div class="line">    movl    $1, -4(%rbp)          ---a=1</div><div class="line">    cmpl    $0, -4(%rbp)          ---if(a==0)</div><div class="line">    je  .L2									goto foo</div><div class="line">    movl    $0, %eax                 else</div><div class="line">    call    bar                           goto bar</div><div class="line">    jmp .L5</div><div class="line">.L2:</div><div class="line">    movl    $0, %eax</div><div class="line">    call    foo</div><div class="line">.L5:</div><div class="line">    leave</div></pre></td></tr></table></figure>
<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</div><div class="line">    <span class="keyword">switch</span>(a)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                case1();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                case2();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                case3();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> foo:</div><div class="line">.LFB2:</div><div class="line">    pushq   %rbp</div><div class="line">.LCFI0:</div><div class="line">    movq    %rsp, %rbp</div><div class="line">.LCFI1:</div><div class="line">    subq    $32, %rsp                -- int a</div><div class="line">.LCFI2:</div><div class="line">    movl    $1, -4(%rbp)             -- a=1</div><div class="line">    movl    -4(%rbp), %eax</div><div class="line">    movl    %eax, -20(%rbp)</div><div class="line">    cmpl    $2, -20(%rbp)            -- case 2:</div><div class="line">    je  .L4                                 goto case2()</div><div class="line">    cmpl    $3, -20(%rbp)            -- case 3:</div><div class="line">    je  .L5                                 goto case3()</div><div class="line">    cmpl    $1, -20(%rbp)			  -- case 1:</div><div class="line">    je  .L3                                  goto case1()</div><div class="line">    jmp .L7</div><div class="line">.L3:</div><div class="line">    movl    $0, %eax              </div><div class="line">    call    case1</div><div class="line">    jmp .L7</div><div class="line">.L4:</div><div class="line">    movl    $0, %eax</div><div class="line">    call    case2</div><div class="line">    jmp .L7</div><div class="line">.L5:</div><div class="line">    movl    $0, %eax</div><div class="line">    call    case3</div><div class="line">.L7:</div><div class="line">    leave</div><div class="line">    ret</div></pre></td></tr></table></figure>
<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">int</span> i=<span class="number">100</span>;</div><div class="line"> <span class="keyword">while</span>(i&gt;<span class="number">0</span>)</div><div class="line"> &#123;</div><div class="line">     bar();</div><div class="line">     i--;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> foo:</div><div class="line"> pushq   %rbp</div><div class="line"> movq    %rsp, %rbp</div><div class="line"> subq    $16, %rsp</div><div class="line"> movl    $100, -4(%rbp)</div><div class="line"> jmp .L2 </div><div class="line">.L3:</div><div class="line"> movl    $0, %eax</div><div class="line"> call    bar </div><div class="line"> subl    $1, -4(%rbp)</div><div class="line">.L2:</div><div class="line"> cmpl    $0, -4(%rbp)</div><div class="line"> jg  .L3 </div><div class="line"> leave</div><div class="line"> ret</div></pre></td></tr></table></figure>
<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0x123</span>;i&lt;<span class="number">0x1234</span>;i++)</div><div class="line">    &#123;</div><div class="line">        bar();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> foo:</div><div class="line">    pushq   %rbp</div><div class="line">    movq    %rsp, %rbp</div><div class="line">    subq    $16, %rsp</div><div class="line">    movl    $0, -4(%rbp)</div><div class="line">    movl    $291, -4(%rbp)    </div><div class="line">    jmp .L2 </div><div class="line">.L3:</div><div class="line">    movl    $0, %eax</div><div class="line">    call    bar </div><div class="line">    addl    $1, -4(%rbp)</div><div class="line">.L2:</div><div class="line">    cmpl    $4659, -4(%rbp)</div><div class="line">    jle .L3 </div><div class="line">    leave</div><div class="line">    ret</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">i = <span class="number">0x123</span></div><div class="line"><span class="keyword">if</span>(i&lt;<span class="number">0x1234</span>)</div><div class="line">&#123;</div><div class="line">bar()</div><div class="line">i++</div><div class="line"><span class="keyword">goto</span> …</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">break</span></div></pre></td></tr></table></figure>
<h1 id="获取汇编"><a href="#获取汇编" class="headerlink" title="获取汇编"></a>获取汇编</h1><h2 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objdump –D foo</div></pre></td></tr></table></figure>
<h2 id="C代码"><a href="#C代码" class="headerlink" title="C代码"></a>C代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc –S foo.c</div></pre></td></tr></table></figure>
<h2 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">disas [/m|/r]  [函数名|内存地址]</div><div class="line"></div><div class="line">/m  同时打出汇编和源码</div><div class="line">/r  同时打出机器码和汇编</div></pre></td></tr></table></figure>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">(gdb) disas /m main</div><div class="line">Dump of assembler code for function main:</div><div class="line">6	&#123;</div><div class="line">   0x000000000040052d &lt;+0&gt;:	push   %rbp</div><div class="line">   0x000000000040052e &lt;+1&gt;:	mov    %rsp,%rbp</div><div class="line">   0x0000000000400531 &lt;+4&gt;:	sub    $0x10,%rsp</div><div class="line"></div><div class="line">7		int n=10;</div><div class="line">   0x0000000000400535 &lt;+8&gt;:	movl   $0xa,-0x4(%rbp)</div><div class="line"></div><div class="line">8		while(--n&gt;=0)</div><div class="line">   0x000000000040053c &lt;+15&gt;:	jmp    0x400552 &lt;main+37&gt;</div><div class="line">   0x0000000000400552 &lt;+37&gt;:	subl   $0x1,-0x4(%rbp)</div><div class="line">   0x0000000000400556 &lt;+41&gt;:	cmpl   $0x0,-0x4(%rbp)</div><div class="line">   0x000000000040055a &lt;+45&gt;:	jns    0x40053e &lt;main+17&gt;</div><div class="line"></div><div class="line">9		&#123;</div><div class="line">10			printf(&quot;%d\n&quot;,n);</div><div class="line">=&gt; 0x000000000040053e &lt;+17&gt;:	mov    -0x4(%rbp),%eax</div><div class="line">   0x0000000000400541 &lt;+20&gt;:	mov    %eax,%esi</div><div class="line">   0x0000000000400543 &lt;+22&gt;:	mov    $0x4005e4,%edi</div><div class="line">   0x0000000000400548 &lt;+27&gt;:	mov    $0x0,%eax</div><div class="line">   0x000000000040054d &lt;+32&gt;:	callq  0x400410 &lt;printf@plt&gt;</div><div class="line"></div><div class="line">11			</div><div class="line">12		&#125;</div><div class="line">13	&#125;</div><div class="line">   0x000000000040055c &lt;+47&gt;:	leaveq </div><div class="line">   0x000000000040055d &lt;+48&gt;:	retq   </div><div class="line"></div><div class="line"></div><div class="line">(gdb) disas /r main</div><div class="line">Dump of assembler code for function main:</div><div class="line">   0x000000000040052d &lt;+0&gt;:	55	push   %rbp</div><div class="line">   0x000000000040052e &lt;+1&gt;:	48 89 e5	mov    %rsp,%rbp</div><div class="line">   0x0000000000400531 &lt;+4&gt;:	48 83 ec 10	sub    $0x10,%rsp</div><div class="line">   0x0000000000400535 &lt;+8&gt;:	c7 45 fc 0a 00 00 00	movl   $0xa,-0x4(%rbp)</div><div class="line">   0x000000000040053c &lt;+15&gt;:	eb 14	jmp    0x400552 &lt;main+37&gt;</div><div class="line">=&gt; 0x000000000040053e &lt;+17&gt;:	8b 45 fc	mov    -0x4(%rbp),%eax</div><div class="line">   0x0000000000400541 &lt;+20&gt;:	89 c6	mov    %eax,%esi</div><div class="line">   0x0000000000400543 &lt;+22&gt;:	bf e4 05 40 00	mov    $0x4005e4,%edi</div><div class="line">   0x0000000000400548 &lt;+27&gt;:	b8 00 00 00 00	mov    $0x0,%eax</div><div class="line">   0x000000000040054d &lt;+32&gt;:	e8 be fe ff ff	callq  0x400410 &lt;printf@plt&gt;</div><div class="line">   0x0000000000400552 &lt;+37&gt;:	83 6d fc 01	subl   $0x1,-0x4(%rbp)</div><div class="line">   0x0000000000400556 &lt;+41&gt;:	83 7d fc 00	cmpl   $0x0,-0x4(%rbp)</div><div class="line">   0x000000000040055a &lt;+45&gt;:	79 e2	jns    0x40053e &lt;main+17&gt;</div><div class="line">   0x000000000040055c &lt;+47&gt;:	c9	leaveq </div><div class="line">   0x000000000040055d &lt;+48&gt;:	c3	retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure></p>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><h2 id="gdb调试core文件"><a href="#gdb调试core文件" class="headerlink" title="gdb调试core文件"></a>gdb调试core文件</h2><p>下面就对如下一个小程序为例子展开调试：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> *a=<span class="number">0x0</span>;   </div><div class="line">    *a=<span class="number">1</span>;       </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">main()</div><div class="line">&#123;</div><div class="line">    bar();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看程序应该在第5行core掉，原因是访问了非法地址0x0。但是如何通过汇编定位到这一行呢？</p>
<p>1）载入gdb ./fcall ./core.29782<br>2）bt 看下堆栈，举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(gdb) bt</div><div class="line">#0  0x0000000000400458 in bar ()</div><div class="line">#1  0x0000000000400473 in main ()</div></pre></td></tr></table></figure></p>
<p>这个<code>0x0000000000400458</code>地址就是当前指令地址，是在这个地方core掉的。</p>
<p>3）<code>disas 0x0000000000400458</code>看<code>0x0000000000400458</code>附近的汇编<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(gdb) disas 0x0000000000400458</div><div class="line">Dump of assembler code for function bar:</div><div class="line">0x0000000000400448 &lt;bar+0&gt;:	push   %rbp</div><div class="line">0x0000000000400449 &lt;bar+1&gt;:	mov    %rsp,%rbp</div><div class="line">0x000000000040044c &lt;bar+4&gt;:	movq   $0x0,-0x8(%rbp)</div><div class="line">0x0000000000400454 &lt;bar+12&gt;:	mov    -0x8(%rbp),%rax</div><div class="line">0x0000000000400458 &lt;bar+16&gt;:	movl   $0x1,(%rax)</div><div class="line">0x000000000040045e &lt;bar+22&gt;:	mov    $0x0,%eax</div><div class="line">0x0000000000400463 &lt;bar+27&gt;:	leaveq </div><div class="line">0x0000000000400464 &lt;bar+28&gt;:	retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure></p>
<p>可以看到在<code>movl   $0x1,(%rax)</code>指令coredump了。 mov指令一般都是core的罪魁祸首，因为他要访问内存(%rax)。%rax是寄存器，加上括号就是要引用地址为%rax的内存。这里是要把1赋值给地址为%rax的内存。结合代码，很明显的是第5行赋值的问题。<br>4）看寄存器里的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(gdb) p $rax</div><div class="line">$1 = 0</div></pre></td></tr></table></figure></p>
<p>发现了寄存器rax值为0，movl   $0x1,(%rax)就是要引用地址为0的内存，显然是不合理的。</p>
<h2 id="gdb汇编调试运行程序"><a href="#gdb汇编调试运行程序" class="headerlink" title="gdb汇编调试运行程序"></a>gdb汇编调试运行程序</h2><p>先得到main和bar的汇编如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">(gdb) disas main</div><div class="line">Dump of assembler code for function main:</div><div class="line">   0x000000000040050a &lt;+0&gt;:	push   %rbp</div><div class="line">   0x000000000040050b &lt;+1&gt;:	mov    %rsp,%rbp</div><div class="line">=&gt; 0x000000000040050e &lt;+4&gt;:	mov    $0x0,%eax</div><div class="line">   0x0000000000400513 &lt;+9&gt;:	callq  0x4004ed &lt;bar&gt;</div><div class="line">   0x0000000000400518 &lt;+14&gt;:	pop    %rbp</div><div class="line">   0x0000000000400519 &lt;+15&gt;:	retq   </div><div class="line">End of assembler dump.</div><div class="line">(gdb) disas bar</div><div class="line">Dump of assembler code for function bar:</div><div class="line">   0x00000000004004ed &lt;+0&gt;:	push   %rbp</div><div class="line">   0x00000000004004ee &lt;+1&gt;:	mov    %rsp,%rbp</div><div class="line">   0x00000000004004f1 &lt;+4&gt;:	movq   $0x0,-0x8(%rbp)</div><div class="line">   0x00000000004004f9 &lt;+12&gt;:	mov    -0x8(%rbp),%rax</div><div class="line">   0x00000000004004fd &lt;+16&gt;:	movl   $0x1,(%rax)</div><div class="line">   0x0000000000400503 &lt;+22&gt;:	mov    $0x0,%eax</div><div class="line">   0x0000000000400508 &lt;+27&gt;:	pop    %rbp</div><div class="line">   0x0000000000400509 &lt;+28&gt;:	retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure></p>
<p>gdb载入后可以进行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">(gdb) b *0x0000000000400465   在某地址处打断点。</div><div class="line">(gdb) stepi                   下一条指令</div><div class="line">(gdb) nexti                   下一条指令</div><div class="line">(gdb) info frame              </div><div class="line">(gdb) info registers          </div><div class="line">(gdb) jump *address           跳转到某条指令，类似goto</div><div class="line">(gdb) info frame</div><div class="line">Stack level 0, frame at 0x7fffffffdf20:</div><div class="line"> rip = 0x40050e in main (simple.c:10); saved rip = 0x7ffff7a36ec5</div><div class="line"> source language c.</div><div class="line"> Arglist at 0x7fffffffdf10, args: </div><div class="line"> Locals at 0x7fffffffdf10, Previous frame&apos;s sp is 0x7fffffffdf20</div><div class="line"> Saved registers:</div><div class="line">  rbp at 0x7fffffffdf10, rip at 0x7fffffffdf18</div><div class="line">(gdb) info registers</div><div class="line">rax            0x40050a	4195594</div><div class="line">rbx            0x0	0</div><div class="line">rcx            0x0	0</div><div class="line">rdx            0x7fffffffe008	140737488347144</div><div class="line">rsi            0x7fffffffdff8	140737488347128</div><div class="line">rdi            0x1	1</div><div class="line">rbp            0x7fffffffdf10	0x7fffffffdf10</div><div class="line">rsp            0x7fffffffdf10	0x7fffffffdf10</div><div class="line">r8             0x7ffff7dd4e80	140737351863936</div><div class="line">r9             0x7ffff7dea560	140737351951712</div><div class="line">r10            0x7fffffffdda0	140737488346528</div><div class="line">r11            0x7ffff7a36dd0	140737348070864</div><div class="line">r12            0x400400	4195328</div><div class="line">r13            0x7fffffffdff0	140737488347120</div><div class="line">r14            0x0	0</div><div class="line">r15            0x0	0</div><div class="line">rip            0x40050e	0x40050e &lt;main+4&gt;</div><div class="line">eflags         0x246	[ PF ZF IF ]</div><div class="line">cs             0x33	51</div><div class="line">ss             0x2b	43</div><div class="line">ds             0x0	0</div><div class="line">es             0x0	0</div><div class="line">fs             0x0	0</div><div class="line">gs             0x0	0</div></pre></td></tr></table></figure></p>
<p>避免core发生：<br>打到core语句地址<br>jump跳过那条语句<br>当然在别的例子中，可以修改相应的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">(gdb) b *0x00000000004004f9</div><div class="line">Breakpoint 2 at 0x4004f9: file simple.c, line 5.</div><div class="line">(gdb) c</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 2, bar () at simple.c:5</div><div class="line">5	     *a=1;       </div><div class="line">(gdb) disas</div><div class="line">Dump of assembler code for function bar:</div><div class="line">   0x00000000004004ed &lt;+0&gt;:	push   %rbp</div><div class="line">   0x00000000004004ee &lt;+1&gt;:	mov    %rsp,%rbp</div><div class="line">   0x00000000004004f1 &lt;+4&gt;:	movq   $0x0,-0x8(%rbp)</div><div class="line">=&gt; 0x00000000004004f9 &lt;+12&gt;:	mov    -0x8(%rbp),%rax</div><div class="line">   0x00000000004004fd &lt;+16&gt;:	movl   $0x1,(%rax)</div><div class="line">   0x0000000000400503 &lt;+22&gt;:	mov    $0x0,%eax</div><div class="line">   0x0000000000400508 &lt;+27&gt;:	pop    %rbp</div><div class="line">   0x0000000000400509 &lt;+28&gt;:	retq   </div><div class="line">End of assembler dump.</div><div class="line">(gdb) info frame</div><div class="line">Stack level 0, frame at 0x7fffffffdf10:</div><div class="line"> rip = 0x4004f9 in bar (simple.c:5); saved rip = 0x400518</div><div class="line"> called by frame at 0x7fffffffdf20</div><div class="line"> source language c.</div><div class="line"> Arglist at 0x7fffffffdf00, args: </div><div class="line"> Locals at 0x7fffffffdf00, Previous frame&apos;s sp is 0x7fffffffdf10</div><div class="line"> Saved registers:</div><div class="line">  rbp at 0x7fffffffdf00, rip at 0x7fffffffdf08</div><div class="line">(gdb)</div><div class="line">(gdb) jump *0x0000000000400503</div><div class="line">Continuing at 0x400503.</div><div class="line">[Inferior 1 (process 18720) exited normally]</div></pre></td></tr></table></figure></p>
<h2 id="调试堆栈"><a href="#调试堆栈" class="headerlink" title="调试堆栈"></a>调试堆栈</h2><h3 id="堆栈溢出实例"><a href="#堆栈溢出实例" class="headerlink" title="堆栈溢出实例"></a>堆栈溢出实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">   </div><div class="line">    <span class="keyword">int</span> buf[<span class="number">1</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">    buf[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    buf[<span class="number">1</span>]=<span class="number">2</span>;</div><div class="line">    buf[<span class="number">2</span>]=<span class="number">3</span>;</div><div class="line">    buf[<span class="number">3</span>]=<span class="number">4</span>;</div><div class="line">    buf[<span class="number">4</span>]=<span class="number">5</span>;</div><div class="line">    buf[<span class="number">5</span>]=<span class="number">6</span>;</div><div class="line">    buf[<span class="number">6</span>]=<span class="number">7</span>;      --申请了<span class="number">1</span>个地址，但是写入很多个 buffer overflow</div><div class="line">    </div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    foo();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[yshen@server-yanfa1-zqgao1 stack]$ ./main2</div><div class="line">Segmentation fault (core dumped)              ---栈溢出产生的coredump</div></pre></td></tr></table></figure>
<h3 id="堆栈溢出检测"><a href="#堆栈溢出检测" class="headerlink" title="堆栈溢出检测"></a>堆栈溢出检测</h3><p><img src="http://static.zybuluo.com/shenyuflying/1x8ua7rn101n5jxciw6j4yst/image_1b07km0hd1nfo12291gje2pg90um.png" alt="image_1b07km0hd1nfo12291gje2pg90um.png-29.1kB"><br>在栈底加个MAGICNUMBER，如果这个值被改了，那么说明是栈被破坏了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAGIC 1989</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> F_INTER int __a=MAGIC;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> F_EXIT  \</span></div><div class="line">        <span class="meta-keyword">if</span>(__a!=MAGIC) \</div><div class="line">            printf(<span class="meta-string">"stack error in %s, magic=%d\n"</span>,__func__,__a);</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    F_INTER</div><div class="line">    <span class="keyword">int</span> buf[<span class="number">1</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">    buf[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    buf[<span class="number">1</span>]=<span class="number">2</span>;</div><div class="line">    buf[<span class="number">2</span>]=<span class="number">3</span>;</div><div class="line">    buf[<span class="number">3</span>]=<span class="number">4</span>;</div><div class="line">    buf[<span class="number">4</span>]=<span class="number">5</span>;</div><div class="line">    buf[<span class="number">5</span>]=<span class="number">6</span>;</div><div class="line">    buf[<span class="number">6</span>]=<span class="number">7</span>;</div><div class="line">    F_EXIT</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    foo();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function foo:</div><div class="line">0x00000000004004d8 &lt;foo+0&gt;:	push   %rbp</div><div class="line">0x00000000004004d9 &lt;foo+1&gt;:	mov    %rsp,%rbp</div><div class="line">0x00000000004004dc &lt;foo+4&gt;:	sub    $0x10,%rsp           --栈分配空间</div><div class="line">0x00000000004004e0 &lt;foo+8&gt;:	movl   $0x7c5,-0x4(%rbp)     --magicnumber在-0x4(%rbp)</div><div class="line">0x00000000004004e7 &lt;foo+15&gt;:	movl   $0x0,-0x10(%rbp)</div><div class="line">0x00000000004004ee &lt;foo+22&gt;:	movl   $0x1,-0x10(%rbp)</div><div class="line">0x00000000004004f5 &lt;foo+29&gt;:	movl   $0x2,-0xc(%rbp)</div><div class="line">0x00000000004004fc &lt;foo+36&gt;:	movl   $0x3,-0x8(%rbp)</div><div class="line">0x0000000000400503 &lt;foo+43&gt;:	movl   $0x4,-0x4(%rbp)      --magicnumber被冲了</div><div class="line">0x000000000040050a &lt;foo+50&gt;:	movl   $0x5,0x0(%rbp)       --rbp被冲了</div><div class="line">0x0000000000400511 &lt;foo+57&gt;:	movl   $0x6,0x4(%rbp)       --rip也被冲了</div><div class="line">0x0000000000400518 &lt;foo+64&gt;:	movl   $0x7,0x8(%rbp)</div><div class="line">0x000000000040051f &lt;foo+71&gt;:	cmpl   $0x7c5,-0x4(%rbp)</div><div class="line">0x0000000000400526 &lt;foo+78&gt;:	je     0x40053f &lt;foo+103&gt;</div><div class="line">0x0000000000400528 &lt;foo+80&gt;:	mov    -0x4(%rbp),%edx</div><div class="line">0x000000000040052b &lt;foo+83&gt;:	mov    $0x400658,%esi</div><div class="line">0x0000000000400530 &lt;foo+88&gt;:	mov    $0x40065c,%edi</div><div class="line">0x0000000000400535 &lt;foo+93&gt;:	mov    $0x0,%eax</div><div class="line">0x000000000040053a &lt;foo+98&gt;:	callq  0x4003d0 &lt;printf@plt&gt;</div><div class="line">0x000000000040053f &lt;foo+103&gt;:	leaveq </div><div class="line">0x0000000000400540 &lt;foo+104&gt;:	retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[yshen@server-yanfa1-zqgao1 stack]$ ./main2</div><div class="line">stack error in foo, magic=4</div><div class="line">Segmentation fault (core dumped)</div></pre></td></tr></table></figure>
<h3 id="在程序中打印堆栈"><a href="#在程序中打印堆栈" class="headerlink" title="在程序中打印堆栈"></a>在程序中打印堆栈</h3><p>知识点：<br>1）用rbp来遍历堆栈。<br>2）用dladdr获取符号信息。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * backtrace implimentation</div><div class="line"> * gcc -rdynamic -g -O0 -o bt  stacktrace.c -ldl</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;execinfo.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;dlfcn.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_BUFFER_SIZE  1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SYMBOL_SIZE      512</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ADDRESS_SIZE     20</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_DEPTH_MAX  100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> bool			 int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> true			 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> false			 0</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Assembly code, gets the values of the frame pointer.</div><div class="line"> * It only works for x86 processors.</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__i386)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ASMFP asm volatile (<span class="meta-string">"movl %%ebp, %0"</span> : <span class="meta-string">"=g"</span> (ulp));</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_PTR_FROM_VALUE(value) ((uint32)value)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_FRAME_POINTER(x) do &#123; uint64 ulp; ASMFP; x = ulp; &#125; while (0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__x86_64__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ASMFP asm volatile (<span class="meta-string">"movq %%rbp, %0"</span> : <span class="meta-string">"=g"</span> (ulp));</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_PTR_FROM_VALUE(value) (value)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_FRAME_POINTER(x) do &#123; uint64 ulp; ASMFP; x = ulp; &#125; while (0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ASMFP</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_PTR_FROM_VALUE(value) (value)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_FRAME_POINTER(x)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> uint64;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uint32;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> * <span class="keyword">uintptr_t</span>;</div><div class="line"></div><div class="line"><span class="keyword">volatile</span> <span class="keyword">char</span>	   *stack_base_ptr = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *dli_fname;  <span class="comment">/* Pathname of shared object that</span></div><div class="line">                                   contains address */</div><div class="line">        <span class="keyword">void</span>       *dli_fbase;  <span class="comment">/* Address at which shared object</span></div><div class="line">                                   is loaded */</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *dli_sname;  <span class="comment">/* Name of nearest symbol with address</span></div><div class="line">                                   lower than addr */</div><div class="line">        <span class="keyword">void</span>       *dli_saddr;  <span class="comment">/* Exact address of symbol named</span></div><div class="line">                                   in dli_sname */</div><div class="line"> &#125; Dl_info;</div><div class="line"></div><div class="line"><span class="function">uint32 <span class="title">back_trace</span><span class="params">(<span class="keyword">void</span> **stackAddresses, uint32 maxStackDepth)</span></span></div><div class="line">&#123;</div><div class="line">	assert(stack_base_ptr != <span class="literal">NULL</span>);</div><div class="line">	uint64  framePtrValue = <span class="number">0</span>;</div><div class="line">	GET_FRAME_POINTER(framePtrValue);</div><div class="line"></div><div class="line">	uint32  depth = <span class="number">0</span>;</div><div class="line">	<span class="keyword">void</span> **pFramePtr = (<span class="keyword">void</span>**) GET_PTR_FROM_VALUE(framePtrValue);</div><div class="line">	<span class="comment">/* check if the frame pointer is valid */</span></div><div class="line">	<span class="keyword">if</span> (pFramePtr != <span class="literal">NULL</span> &amp;&amp; (<span class="keyword">void</span> *) &amp;depth &lt; (<span class="keyword">void</span> *) pFramePtr)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">/* consider the first maxStackDepth frames only, below the stack base pointer */</span></div><div class="line">		<span class="keyword">for</span> (depth = <span class="number">0</span>; depth &lt; maxStackDepth; depth++)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">/* check if next frame is within stack */</span></div><div class="line">			<span class="keyword">if</span> (pFramePtr == <span class="literal">NULL</span> ||</div><div class="line">				(<span class="keyword">void</span> *) pFramePtr &gt; *pFramePtr ||</div><div class="line">				(<span class="keyword">void</span> *) stack_base_ptr &lt; *pFramePtr)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">/* get return address (one above the frame pointer) */</span></div><div class="line">			<span class="keyword">const</span> <span class="keyword">uintptr_t</span> *returnAddr = (<span class="keyword">uintptr_t</span> *)(pFramePtr + <span class="number">1</span>);</div><div class="line"></div><div class="line">			<span class="comment">/* store return address */</span></div><div class="line">			stackAddresses[depth] = (<span class="keyword">void</span> *) *returnAddr;</div><div class="line"></div><div class="line">			<span class="comment">/* move to next frame */</span></div><div class="line">			pFramePtr = (<span class="keyword">void</span>**)*pFramePtr;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> depth;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span> **</span></div><div class="line"><span class="title">back_trace_symbols</span><span class="params">(<span class="keyword">void</span> *<span class="keyword">const</span> *buffer, <span class="keyword">int</span> size)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> **result;</div><div class="line">	<span class="keyword">size_t</span> bufsize;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line"></div><div class="line">	bufsize = size * <span class="keyword">sizeof</span>(<span class="keyword">char</span> *);</div><div class="line"></div><div class="line">	<span class="comment">/* Calculate exact size */</span></div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; size; i++)</div><div class="line">	&#123;</div><div class="line">		Dl_info dli;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (dladdr(buffer[i], &amp;dli) == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			bufsize += <span class="built_in">snprintf</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="string">"%p: &lt;not found&gt;"</span>, buffer[i]) + <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			bufsize += <span class="built_in">snprintf</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="string">"%p: %s %s+0x%x"</span>, buffer[i],</div><div class="line">						dli.dli_fname, dli.dli_sname,</div><div class="line">						(<span class="keyword">int</span>)((<span class="keyword">char</span> *)(buffer[i]) - (<span class="keyword">char</span> *)(dli.dli_saddr))) + <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	result = <span class="built_in">malloc</span>(bufsize);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(!result)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Failed to get backtrace symbol: out of memory!"</span>);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> n;</div><div class="line">		<span class="keyword">char</span> *cur = (<span class="keyword">char</span> *)(result + size);</div><div class="line"></div><div class="line">		<span class="built_in">memset</span>(result, <span class="number">0</span>, bufsize);</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; size; i++)</div><div class="line">		&#123;</div><div class="line">			Dl_info dli;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (dladdr(buffer[i], &amp;dli) == <span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				n = <span class="built_in">sprintf</span>(cur, <span class="string">"%p: &lt;not found&gt;"</span>, buffer[i]);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				n = <span class="built_in">sprintf</span>(cur, <span class="string">"%p: %s %s+0x%x"</span>, buffer[i],</div><div class="line">							dli.dli_fname, dli.dli_sname,</div><div class="line">							(<span class="keyword">int</span>)((<span class="keyword">char</span> *)(buffer[i]) - (<span class="keyword">char</span> *)(dli.dli_saddr)));</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			result[i] = cur;</div><div class="line">			cur += n + <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bt</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> 		stacktracesize;</div><div class="line">	<span class="keyword">void</span>	   *stacktracearray[STACK_DEPTH_MAX];</div><div class="line">	<span class="keyword">char</span>	   **result = <span class="literal">NULL</span>;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	stacktracesize = back_trace(stacktracearray, STACK_DEPTH_MAX);</div><div class="line">	result = back_trace_symbols(stacktracearray, STACK_DEPTH_MAX);</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; result[i] != <span class="literal">NULL</span> &amp;&amp; i &lt; stacktracesize; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"#%d : %s\n"</span>,i,result[i]);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">function1</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	bt();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">function2</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	function1();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">volatile</span> <span class="keyword">char</span> stack_base;</div><div class="line">    stack_base_ptr = &amp;stack_base;</div><div class="line">	</div><div class="line">	function2();</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yshen@yshen-office:~/test/ass$ ./bt</div><div class="line">#0 : 0x400e8f: ./bt bt+0x34</div><div class="line">#1 : 0x400f33: ./bt function1+0x9</div><div class="line">#2 : 0x400f43: ./bt function2+0x9</div></pre></td></tr></table></figure>
<p>和gdb对比<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(gdb) bt</div><div class="line">#1  0x0000000000400e8f in bt () at stacktrace.c:164</div><div class="line">#2  0x0000000000400f33 in function1 () at stacktrace.c:177</div><div class="line">#3  0x0000000000400f43 in function2 () at stacktrace.c:182</div><div class="line">#4  0x0000000000400f62 in main () at stacktrace.c:191</div></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/shenyuflying/xlz76t446buibnvdmcq9doiv/image_1b07ksg28gu9k3i1jt116ds1tik9.png" alt="image_1b07ksg28gu9k3i1jt116ds1tik9.png-32.3kB"><br>私有：<br>寄存器<br>栈</p>
<p>共享：<br>库<br>堆</p>
<p>关系：<br>平等关系，没有先后顺序，后起线程可以杀掉先起的线程</p>
<h3 id="多线程举例"><a href="#多线程举例" class="headerlink" title="多线程举例"></a>多线程举例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#define N 2</div><div class="line">char **ptr; /* global variable */      --shared among threads</div><div class="line">void *thread(void *vargp);</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">  int i;</div><div class="line">  pthread_t tid;</div><div class="line">  char *msgs[N] = &#123;</div><div class="line">  "Hello from foo",</div><div class="line">  "Hello from bar"</div><div class="line">                  &#125;;</div><div class="line"></div><div class="line">  ptr = msgs;                       --ptr bind to local variable , so msgs can be shared</div><div class="line">  for (i = 0; i &lt; N; i++)</div><div class="line">  Pthread_create(&amp;tid, NULL, thread, (void *)i);</div><div class="line">  Pthread_exit(NULL);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void *thread(void *vargp)</div><div class="line">&#123;</div><div class="line">  int myid = (int)vargp;      --each thread has its own myid</div><div class="line">  static int cnt = 0;         --cnt shared among threads</div><div class="line">  printf("[%d]: %s (cnt=%d)\n", myid, ptr[myid], ++cnt);  --without lock for cnt</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">~$ ./sharing</div><div class="line">[0]: Hello from foo (cnt=1)</div><div class="line">[1]: Hello from bar (cnt=1)</div><div class="line"></div><div class="line">~$ ./sharing</div><div class="line">[0]: Hello from foo (cnt=1)</div><div class="line">[1]: Hello from bar (cnt=2)</div><div class="line"></div><div class="line"> thread:</div><div class="line">     pushq   %rbp</div><div class="line">     movq    %rsp, %rbp</div><div class="line">     movq    %rdi, -24(%rbp)</div><div class="line">     movq    -24(%rbp), %rax</div><div class="line">     movl    %eax, -4(%rbp)</div><div class="line">     movl    cnt.1629(%rip), %eax      --step1 load  cnt</div><div class="line">     addl    $1, %eax                  --step2 add   cnt</div><div class="line">     movl    %eax, cnt.1629(%rip)      --step3 save  cnt</div><div class="line">     leave   </div><div class="line">     ret</div></pre></td></tr></table></figure>
<h3 id="线程竞争"><a href="#线程竞争" class="headerlink" title="线程竞争"></a>线程竞争</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 4</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread</span><span class="params">(<span class="keyword">void</span> *vargp)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">pthread_t</span> tid[N];</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">        pthread_create(&amp;tid[i], <span class="literal">NULL</span>, thread, &amp;i);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">        pthread_join(tid[i], <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;   </div><div class="line"><span class="comment">/* thread routine */</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread</span><span class="params">(<span class="keyword">void</span> *vargp)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> myid = *((<span class="keyword">int</span> *)vargp);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello from thread %d\n"</span>, myid);</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[yshen@server-yanfa1-zqgao1 disas]$ gcc thread_race.c -O3 -lpthread -o thread_race</div><div class="line">[yshen@server-yanfa1-zqgao1 disas]$ ./thread_race </div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 0</div><div class="line">[yshen@server-yanfa1-zqgao1 disas]$ ./thread_race </div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 0</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">(gdb) disas main</div><div class="line">Dump of assembler code for function main:</div><div class="line">0x0000000000400600 &lt;main+0&gt;:	push   %rbp</div><div class="line">0x0000000000400601 &lt;main+1&gt;:	xor    %eax,%eax                eax=0</div><div class="line">0x0000000000400603 &lt;main+3&gt;:	push   %rbx</div><div class="line">0x0000000000400604 &lt;main+4&gt;:	sub    $0x38,%rsp</div><div class="line">0x0000000000400608 &lt;main+8&gt;:	lea    0x2c(%rsp),%rbp          rbp=&amp;i</div><div class="line">0x000000000040060d &lt;main+13&gt;:	movl   $0x0,0x2c(%rsp)          i=0</div><div class="line">0x0000000000400615 &lt;main+21&gt;:	mov    %rsp,%rbx</div><div class="line">0x0000000000400618 &lt;main+24&gt;:	movslq %eax,%rdi                </div><div class="line">0x000000000040061b &lt;main+27&gt;:	xor    %esi,%esi                2nd arg NULL</div><div class="line">0x000000000040061d &lt;main+29&gt;:	mov    %rbp,%rcx                4th arg &amp;i</div><div class="line">0x0000000000400620 &lt;main+32&gt;:	lea    (%rbx,%rdi,8),%rdi       1st arg &amp;tid[i]</div><div class="line">0x0000000000400624 &lt;main+36&gt;:	mov    $0x4005e0,%edx           3rd arg thread</div><div class="line">0x0000000000400629 &lt;main+41&gt;:	callq  0x4004e0 &lt;pthread_create@plt&gt;</div><div class="line">0x000000000040062e &lt;main+46&gt;:	mov    0x2c(%rsp),%eax</div><div class="line">0x0000000000400632 &lt;main+50&gt;:	add    $0x1,%eax</div><div class="line">0x0000000000400635 &lt;main+53&gt;:	cmp    $0x3,%eax</div><div class="line">0x0000000000400638 &lt;main+56&gt;:	mov    %eax,0x2c(%rsp)</div><div class="line">0x000000000040063c &lt;main+60&gt;:	jle    0x400618 &lt;main+24&gt;</div><div class="line">0x000000000040063e &lt;main+62&gt;:	movl   $0x0,0x2c(%rsp)</div><div class="line">0x0000000000400646 &lt;main+70&gt;:	xor    %eax,%eax</div><div class="line">0x0000000000400648 &lt;main+72&gt;:	cltq   </div><div class="line">0x000000000040064a &lt;main+74&gt;:	xor    %esi,%esi</div><div class="line">0x000000000040064c &lt;main+76&gt;:	mov    (%rsp,%rax,8),%rdi</div><div class="line">0x0000000000400650 &lt;main+80&gt;:	callq  0x4004f0 &lt;pthread_join@plt&gt;</div><div class="line">0x0000000000400655 &lt;main+85&gt;:	mov    0x2c(%rsp),%eax</div><div class="line">0x0000000000400659 &lt;main+89&gt;:	add    $0x1,%eax</div><div class="line">0x000000000040065c &lt;main+92&gt;:	cmp    $0x3,%eax</div><div class="line">0x000000000040065f &lt;main+95&gt;:	mov    %eax,0x2c(%rsp)</div><div class="line">0x0000000000400663 &lt;main+99&gt;:	jle    0x400648 &lt;main+72&gt;</div><div class="line">0x0000000000400665 &lt;main+101&gt;:	xor    %edi,%edi</div><div class="line">0x0000000000400667 &lt;main+103&gt;:	callq  0x4004c0 &lt;exit@plt&gt;</div><div class="line">End of assembler dump.</div><div class="line">(gdb) disas thread</div><div class="line">Dump of assembler code for function thread:</div><div class="line">0x00000000004005e0 &lt;thread+0&gt;:	sub    $0x8,%rsp</div><div class="line">0x00000000004005e4 &lt;thread+4&gt;:	mov    (%rdi),%esi               2nd arg  i stored in (%rdi)</div><div class="line">0x00000000004005e6 &lt;thread+6&gt;:	xor    %eax,%eax                 eax=0</div><div class="line">0x00000000004005e8 &lt;thread+8&gt;:	mov    $0x400768,%edi            1st arg</div><div class="line">0x00000000004005ed &lt;thread+13&gt;:	callq  0x4004b0 &lt;printf@plt&gt;</div><div class="line">0x00000000004005f2 &lt;thread+18&gt;:	xor    %eax,%eax</div><div class="line">0x00000000004005f4 &lt;thread+20&gt;:	add    $0x8,%rsp</div><div class="line">0x00000000004005f8 &lt;thread+24&gt;:	retq   </div><div class="line">End of assembler dump.</div><div class="line">(gdb)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原因：</div><div class="line">1）把i的地址传给了其他函数，i在栈上多个寄存器中保存，i自增是在寄存器内完成的，自增后%rbp没及时更新。</div><div class="line">2）新启动的多个线程访问内存中同一个地址，存在竞争关系，取值可以在以下指令中任意一个执行。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0x0000000000400629 &lt;main+41&gt;:	callq  0x4004e0 &lt;pthread_create@plt&gt;   --另一个线程启动</div><div class="line">0x000000000040062e &lt;main+46&gt;:	mov    0x2c(%rsp),%eax    --取内存中i的值</div><div class="line">0x0000000000400632 &lt;main+50&gt;:	add    $0x1,%eax          --递增</div><div class="line">0x0000000000400635 &lt;main+53&gt;:	cmp    $0x3,%eax          --判断</div><div class="line">0x0000000000400638 &lt;main+56&gt;:	mov    %eax,0x2c(%rsp)    --把i的值放到内存中</div></pre></td></tr></table></figure>
<p>解决方案：传堆上的值，每次用个不同的地址保存。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> <span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"> <span class="number">3</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"> <span class="number">4</span> <span class="meta">#<span class="meta-keyword">define</span> N 4</span></div><div class="line"> <span class="number">5</span> <span class="function"><span class="keyword">void</span> *<span class="title">thread</span><span class="params">(<span class="keyword">void</span> *vargp)</span></span>;</div><div class="line"> <span class="number">6</span> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"> 7 &#123;</div><div class="line"> <span class="number">8</span>     <span class="keyword">pthread_t</span> tid[N];</div><div class="line"> <span class="number">9</span>     <span class="keyword">int</span> i;</div><div class="line"><span class="number">10</span>     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line"><span class="number">11</span>     &#123;</div><div class="line"><span class="number">12</span>          <span class="keyword">int</span> *pi=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line"><span class="number">13</span>          *pi=i;</div><div class="line"><span class="number">14</span>          pthread_create(&amp;tid[i], <span class="literal">NULL</span>, thread, pi);</div><div class="line"><span class="number">15</span> </div><div class="line"><span class="number">16</span>     &#125;</div><div class="line"><span class="number">17</span>     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line"><span class="number">18</span>         pthread_join(tid[i], <span class="literal">NULL</span>);</div><div class="line"><span class="number">19</span>     <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line"><span class="number">20</span> &#125;</div><div class="line"><span class="number">21</span> <span class="comment">/* thread routine */</span></div><div class="line"><span class="number">22</span> <span class="function"><span class="keyword">void</span> *<span class="title">thread</span><span class="params">(<span class="keyword">void</span> *vargp)</span></span></div><div class="line">23 &#123;</div><div class="line"><span class="number">24</span>     <span class="keyword">int</span> myid = *((<span class="keyword">int</span> *)vargp);</div><div class="line"><span class="number">25</span>     <span class="built_in">free</span>(vargp);</div><div class="line"><span class="number">26</span>     <span class="built_in">printf</span>(<span class="string">"Hello from thread %d\n"</span>, myid);</div><div class="line"><span class="number">27</span>     <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"><span class="number">28</span> &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">yshen@yshen-office:~/test/ass$ gcc race.c -O3 -lpthread -o race</div><div class="line">yshen@yshen-office:~/test/ass$ ./race </div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 1</div><div class="line">Hello from thread 2</div><div class="line">Hello from thread 3</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[golang web编程之——读取csdn最新文章]]></title>
      <url>http://shenyu.wiki/2016/10/29/golang-web%E7%BC%96%E7%A8%8B%E4%B9%8B%E2%80%94%E2%80%94%E8%AF%BB%E5%8F%96csdn%E6%9C%80%E6%96%B0%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>利用go语言内置的各种网络包可以方便的进行web编程。本文章利用了csdn的<a href="http://open.csdn.net/wiki/apis" target="_blank" rel="external">开放API</a>实现读取最新文章的需求。演示了go语言发起http get请求和json的umarshing特性。</p>
</blockquote>
<h2 id="简单的http-GET请求"><a href="#简单的http-GET请求" class="headerlink" title="简单的http GET请求"></a>简单的http GET请求</h2><p>go语言内置了<code>net/http</code>包，采用<code>http.Get</code>能够方便的发起GET请求</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	resp, err := http.Get(<span class="string">"http://api.csdn.net/blog/getnewarticlelist?client_id=????&amp;page=1&amp;size=10"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">	contents, err := ioutil.ReadAll(resp.Body)</div><div class="line">	resp.Body.Close()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"%s"</span>, contents)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到返回的内容为json格式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;page&quot;:1,&quot;count&quot;:12733,&quot;size&quot;:10,&quot;list&quot;:[&#123;&quot;ArticleId&quot;:52963517,&quot;BlogId&quot;:5022393,&quot;UserName&quot;:&quot;u013410747&quot;,&quot;Title&quot;:&quot;linux修改默认的编辑器&quot;,&quot;Description&quot;:&quot;sudo select-editor    选择vim 搞定。。&quot;,&quot;PostTime&quot;:&quot;\/Date(1477712141000)\/&quot;,&quot;UpdateTime&quot;:&quot;\/Date(1477712177908)\/&quot;,&quot;Digg&quot;:0,&quot;Bury&quot;:0,&quot;ChannelId&quot;:2,&quot;Type&quot;:1,&quot;Status&quot;:0,&quot;ViewCount&quot;:0,&quot;CommentCount&quot;:0,&quot;CommentAuth&quot;:2,&quot;IsTop&quot;:false,&quot;Level&quot;:0,&quot;OutlinkCount&quot;:0,&quot;Note&quot;:null,&quot;IP&quot;:null,&quot;Categories&quot;:null,&quot;Tags&quot;:[],&quot;ColumnAlias&quot;:null,&quot;ColumnTitle&quot;:null,&quot;MarkDownContent&quot;:null,&quot;MarkDownDirectory&quot;:null,&quot;ArticleEditType&quot;:0,&quot;ArticleMore&quot;:null&#125;,...umnAlias&quot;:null,&quot;ColumnTitle&quot;:null,&quot;MarkDownContent&quot;:null,&quot;MarkDownDirectory&quot;:null,&quot;ArticleEditType&quot;:0,&quot;ArticleMore&quot;:null&#125;]&#125;成功: 进程退出代码 0.</div></pre></td></tr></table></figure>
<h2 id="JSON转为内部结构体"><a href="#JSON转为内部结构体" class="headerlink" title="JSON转为内部结构体"></a>JSON转为内部结构体</h2><p>那么如何把json格式的内容转为golang的内部结构体呢？这需要利用<code>json.Unmarshal</code></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Article <span class="keyword">struct</span> &#123;</div><div class="line">	ArticleId   <span class="keyword">int</span></div><div class="line">	BlogId      <span class="keyword">int</span></div><div class="line">	UserName    <span class="keyword">string</span></div><div class="line">	Title       <span class="keyword">string</span></div><div class="line">	Description <span class="keyword">string</span></div><div class="line">	PostTime    <span class="keyword">string</span></div><div class="line">	UpdateTime  <span class="keyword">string</span></div><div class="line">	ViewCount    <span class="keyword">int</span></div><div class="line">	CommentCount <span class="keyword">int</span></div><div class="line">	Categories  <span class="keyword">int</span></div><div class="line">	ColumnAlias <span class="keyword">bool</span></div><div class="line">	Url         <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> Articles <span class="keyword">struct</span> &#123;</div><div class="line">	Page  <span class="keyword">int</span> <span class="string">`json:"page,int"`</span></div><div class="line">	Count <span class="keyword">int</span></div><div class="line">	Size  <span class="keyword">int</span></div><div class="line">	List  []*Article</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	resp, err := http.Get(<span class="string">"http://api.csdn.net/blog/getnewarticlelist?client_id=????&amp;page=0&amp;size=20"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">	str, err := ioutil.ReadAll(resp.Body)</div><div class="line">	resp.Body.Close()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> contents Articles</div><div class="line">	<span class="keyword">if</span> err := json.Unmarshal(str, &amp;contents); err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(<span class="string">"Json unmarshing failed: "</span>, err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> contents.List &#123;</div><div class="line">		fmt.Printf(<span class="string">"%v. %v\n"</span>, k, v.Title)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们完成了用csdn的<a href="http://open.csdn.net/wiki/apis" target="_blank" rel="external">开放API</a>实现读取最新文章的需求。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">0. 1048. Find Coins (25)解题报告</div><div class="line">1. 1049. Counting Ones (30)解题报告</div><div class="line">2. java实习第二天</div><div class="line">3. 1060. 爱丁顿数(25)</div><div class="line">4. 剑指offer-数组中出现次数超过一半的数字</div><div class="line">5. jsonp跨域访问案例</div><div class="line">6. framework jar包MAKEFILE示例</div><div class="line">7. Unity3d 乱序之惑</div><div class="line">8. CodeForces 445C DZY Loves Physics</div><div class="line">9. LeetCode #424: Longest Repeating Character Replacement</div><div class="line">10. 面板显示private变量用标签[SerializeField]</div><div class="line">11. PostgreSQL问题解决--连接数过多</div><div class="line">12. 多维高斯分布及多维条件高斯分布</div><div class="line">13. 王朝  都要学C</div><div class="line">14. CharacterController.Move 实现角色移动</div><div class="line">15. bootargs</div><div class="line">16. 不用输入法输自己的名字!!!!</div><div class="line">17. mybatis mbg自动生成的selectByExample按条件查询不出来值。</div><div class="line">18. 系统乔迁留念贴</div><div class="line">19. java中Proxy(代理与动态代理)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL中的字符编码]]></title>
      <url>http://shenyu.wiki/2016/10/27/PostgreSQL%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>字符编码（Character encoding）就是把某种或多种字符（比如英语字母，中文）按照某种形式编码为比特，以便于在计算机中存储和通过网络进行传递。常见的字符编码有ASCII、UTF-8、GBK等等。</p>
<p>PostgreSQL支持多种编码字符集，对各种语言有很好的支持。每个数据库有一个字符集，字符集在初始化数据库<code>initdb -E UTF-8</code>或新建数据库<code>CREATE DATABASE chinese WITH ENCODING &#39;UTF-8&#39;</code>时确定。编码信息保存在系统表<code>pg_database</code>中。你可以在psql中用-l命令来查看数据库和对应的字符集编码。</p>
<p>服务器端不是对所有编码都支持，比如不支持GBK，但是PostgreSQL支持服务器发给客户端时自动转码，比如可以转码为GBK。转码规则在系统表<code>pg_conversion</code>里确定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">postgres=# select  conname, conproc from pg_conversion where conname like &apos;%gbk%&apos;;</div><div class="line">   conname   |   conproc   </div><div class="line">-------------+-------------</div><div class="line"> gbk_to_utf8 | gbk_to_utf8</div><div class="line"> utf8_to_gbk | utf8_to_gbk</div><div class="line">(2 rows)</div></pre></td></tr></table></figure></p>
<p>比如如下例子，服务器的默认编码是UTF8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">postgres=# \l</div><div class="line">                               List of databases</div><div class="line">    Name    | Owner | Encoding |   Collate   |    Ctype    | Access privileges </div><div class="line">------------+-------+----------+-------------+-------------+-------------------</div><div class="line"> postgres   | yshen | UTF8     | zh_CN.UTF-8 | zh_CN.UTF-8 |</div></pre></td></tr></table></figure></p>
<p>客户端的通过<code>set client_encoding = GBK;</code>设为GBK<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">postgres=# set client_encoding = GBK;</div><div class="line">SET</div><div class="line">postgres=# show client_encoding ;</div><div class="line"> client_encoding </div><div class="line">-----------------</div><div class="line"> GBK</div><div class="line">(1 row)</div></pre></td></tr></table></figure></p>
<p>在查询过程中，服务器把UTF8编码转换为GBK发送到客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">postgres=# select * from student;</div><div class="line">   sno   | sname  | gender | age | nation | classno </div><div class="line">---------+--------+--------+-----+--------+---------</div><div class="line"> 2016001 | 王二小 | 男     |  20 | 中国   | 1-1</div><div class="line"> 2016002 | 刘胡兰 | 女     |  20 | 中国   | 1-1</div><div class="line"> 2016003 | 李小明 | 男     |  20 | 中国   | 1-2</div><div class="line"> 2016004 | 李小花 | 女     |  20 | 中国   | 1-2</div><div class="line">(4 rows)</div></pre></td></tr></table></figure></p>
<p>那么编码是如何在内部实现的呢？窥探一下内部函数<code>utf8_to_gbk</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Datum</div><div class="line">utf8_to_gbk(PG_FUNCTION_ARGS)</div><div class="line">&#123;</div><div class="line">	unsigned char *src = (unsigned char *) PG_GETARG_CSTRING(2);</div><div class="line">	unsigned char *dest = (unsigned char *) PG_GETARG_CSTRING(3);</div><div class="line">	int			len = PG_GETARG_INT32(4);</div><div class="line"></div><div class="line">	CHECK_ENCODING_CONVERSION_ARGS(PG_UTF8, PG_GBK);</div><div class="line"></div><div class="line">	UtfToLocal(src, len, dest,</div><div class="line">			   ULmapGBK, lengthof(ULmapGBK),</div><div class="line">			   NULL, 0,</div><div class="line">			   NULL,</div><div class="line">			   PG_GBK);</div><div class="line"></div><div class="line">	PG_RETURN_VOID();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实就是根据输入的字节流寻找一种编码到另一种编码的映射关系，映射关系保存在ULmapGBK这个里面,找到映射关系之后再把另一种编码对应的字节输出。</p>
<p>有兴趣可以移步<a href="https://www.postgresql.org/docs/9.5/static/multibyte.html" target="_blank" rel="external">官方手册</a>进一步了解</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux中的本地化]]></title>
      <url>http://shenyu.wiki/2016/10/27/linux%E4%B8%AD%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%8C%96/</url>
      <content type="html"><![CDATA[<blockquote>
<p>linux中显示乱码了怎么办？这时候需要设置对本地化。知其然还要知其所以然，下面一步步来为你截开linux中的本地化的神秘面纱。</p>
</blockquote>
<h2 id="从locale说起"><a href="#从locale说起" class="headerlink" title="从locale说起"></a>从locale说起</h2><p>locale翻译过来是<code>本地</code>的意思。linux中的<code>locale</code>工具能够输出当前本地化信息，或者输出所有支持的本地化、编码信息。<br>在linux中执行<code>locale</code>命令可以显示出当前的本地化信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ locale</div><div class="line">LANG=zh_CN.UTF-8</div><div class="line">LANGUAGE=zh_CN:zh</div><div class="line">LC_CTYPE=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_NUMERIC=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_TIME=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_COLLATE=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_MONETARY=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_MESSAGES=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_PAPER=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_NAME=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_ADDRESS=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_TELEPHONE=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_MEASUREMENT=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_IDENTIFICATION=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_ALL=</div></pre></td></tr></table></figure></p>
<p>本地化信息包含了13个变量</p>
<ol>
<li>LC_CTYPE<br>用于字符分类和字符串处理（大小写转换），控制所有字符的处理方式，包括字符编码，字符是单字节还是多字节，如何打印等。是最重要的一个环境变量。</li>
<li>LC_COLLATE<br>字符的比较和排序规则。</li>
<li>LC_MONETARY<br>货币格式。</li>
<li>LC_NUMERIC<br>非货币的数字显示格式。</li>
<li>LC_TIME<br>时间和日期格式。</li>
<li>LC_MESSAGES<br>提示信息的语言。另外还有一个LANGUAGE参数，它与LC_MESSAGES相似，但如果该参数一旦设置，则LC_MESSAGES参数就会失效。LANGUAGE参数可同时设置多种语言信息，如LANGUANE=”zh_CN.GB18030:zh_CN.GB2312:zh_CN”。</li>
<li>LANG<br>LC<em>*的默认值，是最低级别的设置，如果LC</em>*没有设置，则使用该值。类似于 LC_ALL。如果LANG设置了，别的变量也设置成这个值。</li>
<li>LC<em>ALL<br>它是一个宏，如果该值设置了，则该值会覆盖所有LC</em>*的设置值。注意，LANG的值不受该宏影响。</li>
<li>LC_PAPER<br>纸张大小。</li>
<li>LC_NAME<br>名称的格式</li>
<li>LC_ADDRESS<br>地址的格式</li>
<li>LC_TELEPHONE<br>电话的格式</li>
<li>LC_MEASUREMENT<br>度量单位</li>
</ol>
<p>可以看各种变量的值都是<code>zh_CN.UTF-8</code>,它表示什么意思呢？<br>分为2个部分:<br><code>zh_CN</code> : 是语言.地点信息<br><code>UTF-8</code> : 是字符编码信息<br>其书写格式是<code>语言[_地域[.字符集]]</code><br>比如<code>zh_CN.UTF-8</code>说明现在用中文，地处中华人民共和国，用的是UTF-8字符编码。<br>比如<code>zh_TW.BIG5</code>说名现在用中文，地处台湾，用的是大五码字符集<br>可以通过<code>locale -a</code>命令查看支持的地点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ locale -a</div><div class="line">C           #最早期简单的C语言环境</div><div class="line">C.UTF-8</div><div class="line">en_US.utf8  #美国</div><div class="line">POSIX       #posix标准</div><div class="line">zh_CN.utf8  #中国</div><div class="line">zh_SG.utf8  #新加坡</div></pre></td></tr></table></figure></p>
<p>可以通过<code>locale -m</code>命令查看支持的编码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ locale -m | grep BIG</div><div class="line">BIG5</div><div class="line">BIG5-HKSCS</div><div class="line">UTF-8</div><div class="line">GB18030</div><div class="line">GB2312</div><div class="line">GBK</div><div class="line">GB_1988-80</div></pre></td></tr></table></figure></p>
<p>有关这些信息都放在<code>/usr/share/i18n</code>文件夹下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/usr/share/i18n</div><div class="line">|-- SUPPORTED</div><div class="line">|-- charmaps</div><div class="line">|   |-- ANSI_X3.110-1983.gz</div><div class="line">|   |-- ANSI_X3.4-1968.gz</div><div class="line">|   |-- ARMSCII-8.gz</div><div class="line">|   |-- ASMO_449.gz</div><div class="line">|   |-- BIG5-HKSCS.gz</div><div class="line">|   |-- BIG5.gz</div><div class="line">|   |-- UTF-8.gz</div><div class="line">|   |-- VIDEOTEX-SUPPL.gz</div><div class="line">|   |-- VISCII.gz</div><div class="line">|   `-- WINDOWS-31J.gz</div><div class="line">`-- locales</div><div class="line">    |-- POSIX</div><div class="line">    |-- aa_DJ</div><div class="line">    |-- aa_ER</div><div class="line">    |-- aa_ER@saaho</div><div class="line">    |-- aa_ET</div><div class="line">    |-- af_ZA</div><div class="line">    |-- zh_CN</div><div class="line">    |-- zh_HK</div><div class="line">    |-- zh_SG</div><div class="line">    |-- zh_TW</div><div class="line">    `-- zu_ZA</div></pre></td></tr></table></figure></p>
<p>locales文件夹下面其实都是可编辑的文本文件。有兴趣的可以打开试试。</p>
<p>有时候因为编码的不同，显示出来的是乱码。那么如何设置呢？</p>
<h2 id="如何设置编码"><a href="#如何设置编码" class="headerlink" title="如何设置编码"></a>如何设置编码</h2><p>设定locale就是设定12大类的locale分类属性，即13个<code>LC_*</code>。除了这13个变量可以设定以外，为了简便起见，还有两个变量：<code>LC_ALL</code>和<code>LANG</code>。它们之间有一个优先级的关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LC_ALL &gt; LANG</div></pre></td></tr></table></figure></p>
<p>可以这么说，LC_ALL是最上级设定或者强制设定，而LANG是默认设定值。</p>
<p>1、如果你设定了<code>LC_ALL＝zh_CN.UTF-8</code>，那么不管<code>LC_*</code>和<code>LANG</code>设定成什么值，它们都会被强制服从<code>LC_ALL</code>的设定，成为 <code>zh_CN.UTF-8</code>。</p>
<p>2、假如你设定了<code>LANG＝zh_CN.UTF-8</code>，并且没有设定<code>LC_ALL</code>的话，那么系统的locale设定以<code>LC_*=zh_CN.UTF-8</code>。</p>
<p>PS: 除了环境变量设置对，如果使用的是图形化终端，还需要在终端设置相应的编码。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[交互式代码格式化工具——indent]]></title>
      <url>http://shenyu.wiki/2016/10/21/%E4%BA%A4%E4%BA%92%E5%BC%8F%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94indent/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有时候在编码过程中很多细节不注意，造成了代码不符合规范。如果人工来检查，比较繁琐，还容易遗漏，不如交给工具做。在之前一片文章<a href="http://shenyu.wiki/2016/10/20/%E5%88%A9%E7%94%A8sed%E7%94%9F%E6%88%90%E8%A7%84%E8%8C%83%E7%9A%84c%E4%BB%A3%E7%A0%81/">《利用sed生成规范的c代码 》</a>基础上集合shell+vimdiff实现了交互式代码检查。</p>
</blockquote>
<h2 id="先睹为快"><a href="#先睹为快" class="headerlink" title="先睹为快"></a>先睹为快</h2><p>一份不规范的代码test.c运行工具检查一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./indent test.c</div></pre></td></tr></table></figure></p>
<p>效果如下图所示：<br><img src="http://static.zybuluo.com/shenyuflying/qv3omp4cp2ycm123vqscxob5/image_1avj8a4sm1fvr2s1e9dgsjrgs9.png" alt=""></p>
<p>左面是例子中的那份不规范的代码，右面是提示的规范代码。不规范的代码用红色标出。如果接受修改，移动到红色处用do来接受修改。]c移动到下一处。</p>
<p>修改完了之后wqa退出。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>这个小工具是用shell+sed+vimdiff写的。可以看到linux的强大之处就是可以融合多个工具来实现一个更强大的工具。<br>源码放在了github上：<a href="https://github.com/shenyuflying/indent" target="_blank" rel="external">https://github.com/shenyuflying/indent</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用sed生成规范的c代码]]></title>
      <url>http://shenyu.wiki/2016/10/20/%E5%88%A9%E7%94%A8sed%E7%94%9F%E6%88%90%E8%A7%84%E8%8C%83%E7%9A%84c%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有时候在编码过程中很多细节不注意，造成了代码不符合规范。一行行人工来修改，太麻烦了，不如交给工具做。鼎鼎大名的sed就是用来帮助你做这些繁重工作的。</p>
</blockquote>
<p>我们准备了一个不规范的代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ cat equal.<span class="function">c </span></div><div class="line"><span class="title">if</span><span class="params">(a==b &amp;&amp; b == c)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">/* some blank char follow */</span>      </div><div class="line">	<span class="keyword">if</span> (c== d)</div><div class="line">	&#123;</div><div class="line">		func(a,b, c)</div><div class="line">		func(d,e, f)</div><div class="line">		func(a, b, c)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中有这几种不规范的情况</p>
<ol>
<li>if后面不加空格</li>
<li>==前后不加空格</li>
<li>逗号后面不加空格</li>
<li>行尾有空白</li>
</ol>
<p>所以看起来十分乱。</p>
<p>废话不多说，先给出格式化脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#!/bin/sed -f                                                               </div><div class="line"></div><div class="line"># 处理==两边加空格情况</div><div class="line"># a== b to a == b</div><div class="line">s/\([^ ]\)\(==\)/\1 \2/g</div><div class="line"># a ==b to a == b</div><div class="line">s/\(==\)\([^ ]\)/\1 \2/g</div><div class="line"></div><div class="line"># 处理&amp;&amp;两边加空格情况</div><div class="line"># a&amp;&amp; b to a &amp;&amp; b</div><div class="line">s/\([^ ]\)\(&amp;&amp;\)/\1 \2/g</div><div class="line"># a &amp;&amp;b to a &amp;&amp; b</div><div class="line">s/\(&amp;&amp;\)\([^ ]\)/\1 \2/g</div><div class="line"></div><div class="line"># 处理!=两边加空格情况</div><div class="line"># a!= b to a != b</div><div class="line">s/\([^ ]\)\(!=\)/\1 \2/g</div><div class="line"># a !=b to a != b</div><div class="line">s/\(!=\)\([^ ]\)/\1 \2/g</div><div class="line"></div><div class="line"># 处理if后面加空格情况</div><div class="line"># if(...) to if (...)</div><div class="line">s/if(/if (/g</div><div class="line"></div><div class="line"># 处理for后面加空格情况</div><div class="line"># for(...) to for (...)</div><div class="line">s/for(/for (/g</div><div class="line"></div><div class="line"># 处理逗号后面加空格情况</div><div class="line"># (a,b,c) to (a, b, c) </div><div class="line">s/\(,\)\([^ \t]\)/, \2/g</div><div class="line"></div><div class="line"># 处理行尾空格情况</div><div class="line"># remove tailing blanks</div><div class="line">s/[ \t]*$//g</div></pre></td></tr></table></figure>
<p>用上面我们的sed脚本格式化一下，看到几个不规范的情况都修正了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ ./ident.sed   ./equal.<span class="function">c </span></div><div class="line"><span class="title">if</span> <span class="params">(a == b &amp;&amp; b == c)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">/* some blank char follow */</span></div><div class="line">	<span class="keyword">if</span> (c == d)</div><div class="line">	&#123;</div><div class="line">		func(a, b, c)</div><div class="line">		func(d, e, f)</div><div class="line">		func(a, b, c)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后测试了一个比较大的c文件，没有发现啥bug。但是字符串里面的也会格式化，需要注意一下。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yap--yet another program profiling tool]]></title>
      <url>http://shenyu.wiki/2016/10/14/yap-yet-another-program-profiling-tool/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Sampling tools like oprofile or dtrace’s profile provider don’t really provide methods to see what [multithreaded] programs are blocking on - only where they spend CPU time. Though there exist advanced techniques (such as systemtap and dtrace call level probes), it is overkill to build upon that. Poor man doesn’t have time. Poor man needs food.  –quoted from <a href="https://poormansprofiler.org/" target="_blank" rel="external">poor man’s profiler</a></p>
</blockquote>
<p>Just as the name implies, this is an enhenced version of poor man’s profiler with the following new features added:</p>
<ol>
<li>support command line argument, which make it easier to use and easier to integrate to your program.</li>
<li>support multi process profiling, which is good for PostgreSQL profiling.</li>
<li>user can choose how many stack level to print, which make the result set shorter and easier to read.</li>
<li>when stack level is set to 1 , instead of the stack ranking, the function ranking is printed</li>
<li>the result set is neater and much more pretty.</li>
</ol>
<h2 id="INSTALL"><a href="#INSTALL" class="headerlink" title="INSTALL"></a>INSTALL</h2><p>Download it from <code>https://github.com/shenyuflying/yap.git</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/shenyuflying/yap.git</div></pre></td></tr></table></figure></p>
<p>Type <code>yap -h</code> to show the help message.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># ./yap -h</div><div class="line">================================================================</div><div class="line">                          YAP    ver0.1                         </div><div class="line">================================================================</div><div class="line">  yap -- yet another profiling tool based on poor man&apos;s profiler</div><div class="line">         to generate stack rank of your program.                </div><div class="line">                                                                </div><div class="line">                             yshen 2016 see http://shenyu.wiki  </div><div class="line">================================================================</div><div class="line">                                                         </div><div class="line">usage: yap options=values</div><div class="line">        -s | --samples=n      how many samples to collect</div><div class="line">        -t | --sleeptime=n    how many time to sleep during each sample</div><div class="line">        -f | --stackframe=n   how deep the stack frame to output</div><div class="line">        -p | --pid=pid        which pid to analyze</div><div class="line">        -n | --progname=name  which program to analyze, good for multi-process profiling</div><div class="line">        -h | --help           show this help</div></pre></td></tr></table></figure></p>
<p>if the message is shown, the yap is ready to work.</p>
<h2 id="HOW-TO-USE"><a href="#HOW-TO-USE" class="headerlink" title="HOW TO USE"></a>HOW TO USE</h2><p>You need at least specify a progname or a pid to let yap attach to your program.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ./yap  --progname=postgres</div></pre></td></tr></table></figure></p>
<p>will be enough for the yap to run. after you have choosen a program to profile, you will be run with the default configurations, and <code>yap</code> is start working.<br>the default configurations are<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">samples=100   # take 100 samples of your program</div><div class="line">sleeptime=0   # no sleep during each iteration</div><div class="line">stackframe=5  # the stack frame depth is 5</div></pre></td></tr></table></figure></p>
<p>it will take a while and there will be a progress indicator on the screen, so take your time.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># ./yap  --progname=postgres</div><div class="line">1/100 completed.</div><div class="line">2/100 completed.</div><div class="line">3/100 completed.</div><div class="line">4/100 completed.</div><div class="line">5/100 completed.</div><div class="line">...</div><div class="line">100/100 complete.</div></pre></td></tr></table></figure></p>
<p>when done, the stack ranking is printed.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">40 __epoll_wait_nocancel	WaitEventSetWaitBlock	WaitEventSetWait	WaitLatchOrSocket	WaitLatch</div><div class="line">10 __select_nocancel	ServerLoop	PostmasterMain	main</div><div class="line">10 __epoll_wait_nocancel	WaitEventSetWaitBlock	WaitEventSetWait	WaitLatchOrSocket	SysLoggerMain</div><div class="line">10 __epoll_wait_nocancel	WaitEventSetWaitBlock	WaitEventSetWait	WaitLatchOrSocket	PgstatCollectorMain</div><div class="line">1</div></pre></td></tr></table></figure></p>
<p>if you want to seek the function ranking rather than stack ranking, use <code>--stackframe=1</code> and re-run yap</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">60 __epoll_wait_nocancel</div><div class="line">10 __select_nocancel</div><div class="line"> 1</div></pre></td></tr></table></figure>
<p>the function ranking is much sorter and easier to find the slowest functions.</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ol>
<li>shall be run in a time duration, add -b | –begin and -e | –end and -d | –duration</li>
<li>shall be exit when the profiling program exit</li>
<li>…</li>
</ol>
<p>report bugs to shenyufly@163.com</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL性能分析]]></title>
      <url>http://shenyu.wiki/2016/10/13/PostgreSQL%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>面对客户抱怨诸如“很慢”、“卡顿”等问题的时候，我们该如何找出性能瓶颈？从研发角度来说，做一下性能分析(profiling)可能有所帮助。性能分析能找出来最慢的函数，从而发现性能问题的瓶颈。再从瓶颈入手，优化代码从而解决性能问题。</p>
</blockquote>
<p>常用的方法是gdb或pstack堆栈跟踪，比如postgreSQL经常卡在一个特定的地方很长时间，往往都有相同的堆栈跟踪信息。我们要做的就是用gdb附加到进程，将所有进程堆栈打出来，然后利用一些简单的脚本将信息做汇总，再利用sort|uniq|sort的方法排序统计出最多的堆栈信息，或最多的函数调用信息。</p>
<p>其实这种profile工具已经有了，其中一个简洁有效的工具是<a href="https://poormansprofiler.org/" target="_blank" rel="external">poor man’s profiler</a>，Google, Facebook, Wikipedia, Intel的工程师都在用这个工具来分析程序的性能。在这里我对其改造一番，使得其更方便的分析postgreSQL数据库。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># ./poormansprofile.sh  </div><div class="line">usage: promansprofile username samples sleeptime</div></pre></td></tr></table></figure>
<p>username是postgreSQL登陆的用户名，脚本里来找到对应用户的pid<br>samples是采样点数<br>sleeptime是每采样点数间隔<br>比如我们分析<code>yshen</code>用户进程，采样点300个，那么如下命令启动分析：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># ./poormansprofile.sh  yshen 300 0</div><div class="line">1/300 completed.</div><div class="line">2/300 completed.</div><div class="line">3/300 completed.</div><div class="line">4/300 completed.</div><div class="line">5/300 completed.</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">300/300 completed.</div></pre></td></tr></table></figure></p>
<p>PS: 在有些环境下，需要用root用户。</p>
<h2 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h2><p>这个脚本可以分析</p>
<ul>
<li>函数排名：即哪个函数调用最占时间。</li>
<li>堆栈排名：即种调用堆栈最占用时间。</li>
</ul>
<h4 id="函数排名"><a href="#函数排名" class="headerlink" title="函数排名"></a>函数排名</h4><p>如下是跑回归测试的函数排名分析。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">266 ServerLoop</div><div class="line">266 PostmasterMain</div><div class="line">266 PostgresMain</div><div class="line">266 main</div><div class="line">266 BackendStartup</div><div class="line">266 BackendRun</div><div class="line">259 exec_simple_query</div><div class="line">134 CommitTransactionCommand</div><div class="line">134 CommitTransaction</div><div class="line">132 XLogFlush</div><div class="line">132 RecordTransactionCommit</div><div class="line">129 finish_xact_command</div><div class="line">128 XLogWrite</div><div class="line">128 pg_fdatasync</div><div class="line">128 issue_xlog_fsync</div><div class="line">128 __fdatasync_nocancel</div><div class="line">120 PortalRun</div><div class="line">101 standard_ProcessUtility</div><div class="line">101 ProcessUtility</div><div class="line"> 99 PortalRunMulti</div><div class="line"> 96 PortalRunUtility</div><div class="line"> 75 ProcessUtilitySlow</div><div class="line"> 74 smgrimmedsync</div><div class="line"> 74 pg_fsync_no_writethrough</div><div class="line"> 74 pg_fsync</div><div class="line"> 74 mdimmedsync</div><div class="line"> 74 __fsync_nocancel</div><div class="line"> 74 FileSync</div><div class="line"> 73 index_build</div><div class="line"> 69 btbuild</div></pre></td></tr></table></figure></p>
<p>可以看到ServerLoop这个函数最占用时间，很正常，因为这个函数在等待用户连接。下面几个函数其中有个函数XLogFlush，FileSync，smgrimmedsync，pg_fdatasync等等都是IO相关，可见IO非常耗时。以上是正常状态下的函数排名，如果有异常应该就可以发现，比如一些阻塞行为，死锁，IO，网络问题都能在这里发现。</p>
<h2 id="堆栈排名"><a href="#堆栈排名" class="headerlink" title="堆栈排名"></a>堆栈排名</h2><p>堆栈排名更加详细，说了哪种堆栈状态最耗时。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">45 __fdatasync_nocancel,pg_fdatasync,issue_xlog_fsync,XLogWrite,XLogFlush,RecordTransactionCommit,CommitTransaction,CommitTransactionCommand,finish_xact_command,exec_simple_query,PostgresMain,BackendRun,BackendStartup,ServerLoop,PostmasterMain,main</div><div class="line"> 7 __fsync_nocancel,pg_fsync_no_writethrough,pg_fsync,FileSync,mdimmedsync,smgrimmedsync,_bt_load,_bt_leafbuild,btbuild,index_build,index_create,DefineIndex,ProcessUtilitySlow,standard_ProcessUtility,ProcessUtility,PortalRunUtility,PortalRunMulti,PortalRun,exec_simple_query,PostgresMain,BackendRun,BackendStartup,ServerLoop,PostmasterMain,main</div><div class="line"> 4 __fsync_nocancel,pg_fsync_no_writethrough,pg_fsync,FileSync,mdimmedsync,smgrimmedsync,_bt_load,_bt_leafbuild,btbuild,index_build,index_create,create_toast_table,CheckAndCreateToastTable,NewRelationCreateToastTable,ProcessUtilitySlow,standard_ProcessUtility,ProcessUtility,PortalRunUtility,PortalRunMulti,PortalRun,exec_simple_query,PostgresMain,BackendRun,BackendStartup,ServerLoop,PostmasterMain,mai</div></pre></td></tr></table></figure></p>
<p>分析第一个堆栈，出现了45次，堆栈的内容是CommitTransaction提交事务带来的刷盘持久化操作，可见很耗时啊，因为带来了IO。同样的，如果发现什么异常行为也可以在这里发现。</p>
<h2 id="源码1-——只分析用户进程"><a href="#源码1-——只分析用户进程" class="headerlink" title="源码1 ——只分析用户进程"></a>源码1 ——只分析用户进程</h2><p>源码如下：<br>如果去掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sed &apos;s/,/\n/g&apos; | \</div><div class="line">uniq | \</div></pre></td></tr></table></figure></p>
<p>这两行就是显示的堆栈排名，否则是函数排名。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">if [ $# != 3 ] ; then</div><div class="line">        echo &quot;usage: promansprofile username samples sleeptime&quot;</div><div class="line">        exit 1</div><div class="line">fi</div><div class="line"></div><div class="line">username=$1</div><div class="line">nsamples=$2</div><div class="line">sleeptime=$3</div><div class="line"></div><div class="line">if [ $(ps aux | grep &quot;postgres: $username&quot; | wc -l) -eq 1 ] ; then</div><div class="line">        echo &quot;user process is not running&quot;</div><div class="line">        exit 1</div><div class="line">fi</div><div class="line"></div><div class="line">for x in $(seq 1 $nsamples)</div><div class="line">  do</div><div class="line">    ps_info=$(ps aux | grep &quot;postgres: $username&quot; )</div><div class="line">    pid=$(echo $ps_info | sed -n &quot;1, 1p&quot; | awk &apos;&#123;print $2&#125;&apos;)</div><div class="line">    gdb -ex &quot;set pagination 0&quot; -ex &quot;thread apply all bt&quot; -batch -p $pid  2&gt;/dev/null</div><div class="line">    sleep $sleeptime</div><div class="line">    echo &quot;$x/$nsamples completed.&quot; &gt;&amp;2</div><div class="line">  done | \</div><div class="line">awk &apos;</div><div class="line">  BEGIN &#123; s = &quot;&quot;; &#125; </div><div class="line">  /^Thread/ &#123; print s; s = &quot;&quot;; &#125; </div><div class="line">  /^\#/ &#123; if (s != &quot;&quot; ) &#123; s = s &quot;,&quot; $4&#125; else &#123; s = $4 &#125; &#125; </div><div class="line">  END &#123; print s &#125;&apos; | \</div><div class="line">sed &apos;s/,/\n/g&apos; | \</div><div class="line">uniq | \</div><div class="line">sort | \</div><div class="line">uniq -c | \</div><div class="line">sort -r -n -k 1,1</div></pre></td></tr></table></figure>
<h2 id="源码2-——分析所有postgreSQL进程"><a href="#源码2-——分析所有postgreSQL进程" class="headerlink" title="源码2 ——分析所有postgreSQL进程"></a>源码2 ——分析所有postgreSQL进程</h2><p>以下源码能分析所有PostgreSQL进程，比如vacuum、log、stat、checkpoint进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">if [ $# != 2 ] ; then                                                                                                                                  </div><div class="line">    echo &quot;usage: promansprofile samples sleeptime&quot;</div><div class="line">    exit 1</div><div class="line">fi</div><div class="line"></div><div class="line">nsamples=$1</div><div class="line">sleeptime=$2</div><div class="line"></div><div class="line"></div><div class="line">for x in $(seq 1 $nsamples)</div><div class="line">  do  </div><div class="line">    ps_info=$(ps aux)</div><div class="line">    ps_cnt=$(echo $ps_info | wc -l)</div><div class="line">    for p in $(seq 1 $ps_cnt) ; do</div><div class="line">        pid=$(echo $ps_info | sed -n &quot;$p, 1p&quot; | awk &apos;&#123;print $2&#125;&apos;)</div><div class="line">        gdb -ex &quot;set pagination 0&quot; -ex &quot;thread apply all bt&quot; -batch -p $pid  2&gt;/dev/null </div><div class="line">    done</div><div class="line">    sleep $sleeptime</div><div class="line">    echo &quot;$x/$nsamples completed.&quot; &gt;&amp;2</div><div class="line">  done | \ </div><div class="line">awk &apos;</div><div class="line">  BEGIN &#123; s = &quot;&quot;; &#125; </div><div class="line">  /^Thread/ &#123; print s; s = &quot;&quot;; &#125; </div><div class="line">  /^\#/ &#123; if (s != &quot;&quot; ) &#123; s = s &quot;,&quot; $4&#125; else &#123; s = $4 &#125; &#125; </div><div class="line">  END &#123; print s &#125;&apos; | \ </div><div class="line">sed &apos;s/,/\n/g&apos; | \ </div><div class="line">uniq  |\  </div><div class="line">sort |\</div><div class="line">uniq -c |\</div><div class="line">sort -r -n -k 1,1</div></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果有人说gdb这样不断attach到进程，是否对数据库的性能有影响，大概会拖慢0.2秒。但是为了找出性能问题所在，这样做是值得的，你的付出将会得到加倍回报。稍后我再介绍一个比gdb更快的堆栈工具，只需要1ms就能打出来堆栈。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL日志分析工具——pgBadger]]></title>
      <url>http://shenyu.wiki/2016/10/13/PostgreSQL%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94pgBadger/</url>
      <content type="html"><![CDATA[<blockquote>
<p>面对客户抱怨诸如“很慢”、“卡顿”等问题的时候，常用的办法就是查看服务器的日志。但是一头扎进几百M甚至几个G的日志里查看并不现实。那么如何快速回答：最慢的查询有哪些？查询相应时间分布？等等问题，并对最突出的问题着手优化呢？显然我们需要借助自动化工具来完成这个任务。</p>
</blockquote>
<p>pgBadger就是为分析<code>PostgreSQL全日志</code>为目的诞生的一个工具，能够分析日志并生成分析报告，<a href="/uploads/out.html">这里</a>给出了一个报告样本。怎么样，报告是不是很详细？</p>
<h2 id="pdBadger安装"><a href="#pdBadger安装" class="headerlink" title="pdBadger安装"></a>pdBadger安装</h2><p>pgBadger代码托管在github上，可以到<a href="https://github.com/dalibo/pgbadger/releases" target="_blank" rel="external">这里</a>进行下载，最新的版本是<a href="https://github.com/dalibo/pgbadger/archive/v9.0.tar.gz" target="_blank" rel="external">v9.0</a><br>安装步骤页十分简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/dalibo/pgbadger/archive/v9.0.tar.gz</div><div class="line">tar xzf pgbadger-9.0.tar.gz</div><div class="line">cd pgbadger-9.x/</div><div class="line">perl Makefile.PL</div><div class="line">make &amp;&amp; sudo make install</div></pre></td></tr></table></figure></p>
<p>安装完后，在终端执行<code>pgbadger --version</code>显示版本信息后，表明安装成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pgbadger --version</div><div class="line">pgBadger version 9.0</div></pre></td></tr></table></figure></p>
<h2 id="收集PostgreSQL日志"><a href="#收集PostgreSQL日志" class="headerlink" title="收集PostgreSQL日志"></a>收集PostgreSQL日志</h2><p>要利用pgbadger来分析日志，那么我们首先要打开PostgreSQL记录日志的参数，如下是一个典型的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">log_min_duration_statement = 0 </div><div class="line">log_checkpoints = on</div><div class="line">log_connections = on</div><div class="line">log_disconnections = on</div><div class="line">log_lock_waits = on</div><div class="line">log_temp_files = 0 </div><div class="line">log_autovacuum_min_duration = 0 </div><div class="line">log_line_prefix = &apos;%t [%p]: [%l-1] db=%d,user=%u,app=%a,client=%h&apos;</div><div class="line">log_destination = &apos;stderr&apos;  </div><div class="line">logging_collector = on    </div><div class="line">log_directory = &apos;pg_log&apos;</div><div class="line">log_filename = &apos;postgresql-%Y-%m-%d_%H%M%S.log&apos;</div><div class="line">log_file_mode = 0600</div><div class="line">log_rotation_age = 1d</div><div class="line">log_rotation_size = 1000MB</div><div class="line">lc_messages=&apos;C&apos;</div></pre></td></tr></table></figure></p>
<p>接着打开数据库，如果数据库正在运行那么需要发送一个SIGHUP信号来让数据库重新读取配置。过段时间，我们就能够在<code>pg_log</code>文件夹下看到日志产生了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls</div><div class="line">postgresql-2016-10-13_113844.log</div></pre></td></tr></table></figure></p>
<h2 id="生成分析报告"><a href="#生成分析报告" class="headerlink" title="生成分析报告"></a>生成分析报告</h2><p>生成分析报告非常简单只需要一步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pgbadger ./postgresql-2016-10-13_113844.log</div><div class="line">[========================&gt;] Parsed 5642240 bytes of 5642240 (100.00%), queries: 19436, events: 3002</div><div class="line">LOG: Ok, generating html report...</div></pre></td></tr></table></figure></p>
<p>稍等片刻就会输出分析报告<a href="/uploads/out.html">out.html</a></p>
<p>当然了，pgbadger还有一些高端玩法，比如</p>
<ul>
<li><p>分析压缩文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pgbadger /var/log/postgres.log.1.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>分析多个文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pgbadger /var/log/postgresql/postgresql-2012-05-*</div></pre></td></tr></table></figure>
</li>
<li><p>排除某些类型查询</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pgbadger --exclude-query=&quot;^(COPY|COMMIT)&quot; /var/log/postgresql.log</div></pre></td></tr></table></figure>
</li>
<li><p>指定起始时间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pgbadger -b &quot;2012-06-25 10:56:11&quot; -e &quot;2012-06-25 10:59:11&quot; </div><div class="line">                       /var/log/postgresql.log</div></pre></td></tr></table></figure>
</li>
<li><p>从管道读取</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /var/log/postgres.log | pgbadger -</div></pre></td></tr></table></figure>
</li>
<li><p>开启多进程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">perl pgbadger -j 8 /pglog/postgresql-9.1-main.log</div></pre></td></tr></table></figure>
</li>
</ul>
<p>也可以把pgbadger加入crontab计划中，来实现生成每周报告等等。</p>
<h2 id="报告分析"><a href="#报告分析" class="headerlink" title="报告分析"></a>报告分析</h2><p>报告包括了很多方面的内容：</p>
<p>总体信息</p>
<ul>
<li>服务器traffic信息，比如select、update、insert情况</li>
<li>连接情况信息，比如每个库、用户连接情况</li>
<li>会话信息，比如会话时长</li>
<li>checkpoint检查点信息</li>
<li>临时文件信息</li>
<li>vacuum信息，比如做vacuum时间分布，做vacuum表情况，删除元组、页面信息</li>
<li>等待锁的信息</li>
<li>查询信息，insert/update/delete比例分布</li>
<li>慢查询排名，查询耗时分布</li>
<li>报错信息</li>
</ul>
<p>下面介绍一下主要的几个内容</p>
<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p><img src="http://static.zybuluo.com/shenyuflying/f65eqmftm1egi0k8vkm68ub4/image_1auubla73147a1j8r1sf53a11ejq9.png" alt="image_1auubla73147a1j8r1sf53a11ejq9.png-27.5kB"></p>
<h3 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h3><p><img src="http://static.zybuluo.com/shenyuflying/qtlgqigexi461t1ixoppuxkd/image_1auubnceb1ah08qorkt1hct1tf3m.png" alt="image_1auubnceb1ah08qorkt1hct1tf3m.png-46.6kB"></p>
<p>这里可以看到有关服务器压力的信息。</p>
<h3 id="查询时间分布-Histogram-of-query-times"><a href="#查询时间分布-Histogram-of-query-times" class="headerlink" title="查询时间分布 Histogram of query times"></a>查询时间分布 Histogram of query times</h3><p><img src="http://static.zybuluo.com/shenyuflying/n5eyqk5866jo00x082uubo63/image_1auubrt19117m130akqdhgbcd513.png" alt="image_1auubrt19117m130akqdhgbcd513.png-38.5kB"></p>
<p>这里可以看到查询时间分布的信息。</p>
<h3 id="慢查询排名-Slowest-individual-queries"><a href="#慢查询排名-Slowest-individual-queries" class="headerlink" title="慢查询排名 Slowest individual queries"></a>慢查询排名 Slowest individual queries</h3><p><img src="http://static.zybuluo.com/shenyuflying/b608kg30v8brh5m4mfupw7xt/image_1auubtkfr1kvfuke1dqiknii6p1g.png" alt="image_1auubtkfr1kvfuke1dqiknii6p1g.png-161.8kB"><br>这里可以看到慢查询信息。<br>另外还有<br>Time Consuming queries (N) —— 最耗时的查询<br>Most frequent queries (N) ——　最频繁的查询<br>Normalized slowest queries　——　归一化后最慢的查询</p>
<p>PS：这里的归一化，就是排除参数不同的干扰。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>另外报告中还有关于报错信息的统计和详细情况。有助于发现服务器的故障。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过pgbadger可以快速分析几百M甚至几个G的服务器日志。掌握服务器运行情况并快速回答：最慢的查询有哪些？查询相应时间分布？等等问题。有助于对最突出的问题着手优化。从而快速解决客户的抱怨。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux性能曲线工具]]></title>
      <url>http://shenyu.wiki/2016/10/11/linux%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC-%E7%BB%98%E5%9B%BE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>linux下有很多监控工具，如top，free，vmstat等。有一大痛点就是各种工具生成的结果格式不一致，较长一段时间内监控数据量大，人工阅读非常困难。所以写了一个脚本，把各种监控参数输出为一个表格，最后再画出图形。</p>
</blockquote>
<p>目前脚本能够监控如下内容</p>
<ol>
<li>平均负载</li>
<li>空闲内存</li>
<li>已用内存</li>
<li>可用内存</li>
<li>缓存中的脏页面</li>
<li>硬盘使用率</li>
<li>进程占用CPU百分比</li>
<li>等等（可以很方便的添加别的监控参数）</li>
</ol>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$./monitor.sh  [程序名]</div></pre></td></tr></table></figure>
<p>脚本输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">------------time---------|-load-|-m_used-|-m_aval-|-m_ditry-|-sda--|-dm-0--|-dm-1--</div><div class="line">2016-10-11_21:26:07	0.34	1223	6272	0	0.50	0.48	0.00	</div><div class="line">2016-10-11_21:26:08	0.34	1224	6271	0	0.50	0.48	0.00	</div><div class="line">2016-10-11_21:26:09	0.34	1227	6269	0	0.50	0.48	0.00	</div><div class="line">2</div></pre></td></tr></table></figure></p>
<p>再用gnuplot绘图工具来绘制曲线，后期我把绘图再加到脚本中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$gnuplot</div><div class="line">set xdata time </div><div class="line">set timefmt &quot;%Y-%m-%d_%H:%M:%S&quot;</div><div class="line">plot &apos;monitor.log&apos; using 1:2 with linespoints linestyle 1</div></pre></td></tr></table></figure>
<p>比如下图绘制了我机器3分钟时间内的load average<br><img src="http://static.zybuluo.com/shenyuflying/r2rjbiq08oop1et5wi2f6uve/image_1aupv45rv67o149rtt1cjk1io29.png" alt=""></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># A system monitoring tool</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># which can generate results as a table </span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#   yshen 2016</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#global configuration</span></div><div class="line">INTERVAL=1</div><div class="line">OUTFILE=<span class="string">"monitor.log"</span></div><div class="line"></div><div class="line"><span class="comment">#monitoring configuration</span></div><div class="line">MONITOR_LOAD=1</div><div class="line">MONITOR_MEM=1</div><div class="line">MONITOR_IO=1</div><div class="line">MONITOR_PROCESS=1</div><div class="line">PRO_NAME=<span class="string">"Xorg"</span></div><div class="line"></div><div class="line"><span class="comment">#internal variables</span></div><div class="line">time=<span class="string">""</span></div><div class="line">result=<span class="string">""</span></div><div class="line">loops=0</div><div class="line"></div><div class="line"><span class="comment">#monitoring functions</span></div><div class="line"><span class="function"><span class="title">monitor_load</span></span>() &#123;</div><div class="line">	load_avg=$(uptime | awk <span class="string">'&#123;print $9&#125;'</span> | sed <span class="string">'s/,$//g'</span>)</div><div class="line">	col=<span class="string">"<span class="variable">$col</span>|-load-"</span></div><div class="line">	result=<span class="string">"<span class="variable">$result</span><span class="variable">$load_avg</span>\t"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">monitor_mem</span></span>() &#123;</div><div class="line">	mem_used=$(free -m|sed -n <span class="string">"2, 1p"</span>  | awk <span class="string">'&#123;print $3&#125;'</span>)</div><div class="line">	mem_free=$(free -m|sed -n <span class="string">"2, 1p"</span>  | awk <span class="string">'&#123;print $4&#125;'</span>)</div><div class="line">	mem_cache=$(free -m|sed -n <span class="string">"2, 1p"</span>  | awk <span class="string">'&#123;print $6&#125;'</span>)</div><div class="line">	mem_avali=$(free -m|sed -n <span class="string">"2, 1p"</span>  | awk <span class="string">'&#123;print $7&#125;'</span>)</div><div class="line">	mem_dirty_kb=$(cat /proc/meminfo  | grep Dirty | awk <span class="string">'&#123;print $2&#125;'</span>) <span class="comment">#in kb</span></div><div class="line">	mem_dirty=$((mem_dirty_kb/1024)) <span class="comment">#in mb</span></div><div class="line">	<span class="comment">#col="$col|-m_used-|-m_free-|--m_cache--|-m_aval-|"</span></div><div class="line">	col=<span class="string">"<span class="variable">$col</span>|-m_used-|-m_aval-|-m_ditry-"</span></div><div class="line">	result=<span class="string">"<span class="variable">$result</span><span class="variable">$mem_used</span>\t<span class="variable">$mem_avali</span>\t<span class="variable">$mem_dirty</span>\t"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">monitor_io</span></span>() &#123;</div><div class="line">	dev_count=$(iostat -xmd | wc <span class="_">-l</span>)</div><div class="line">	dev_count=$((dev_count - 4))</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> $(seq <span class="variable">$dev_count</span>); <span class="keyword">do</span></div><div class="line">		line=$((i+3))</div><div class="line">		dev_util=$(iostat -xmd | sed -n <span class="string">"<span class="variable">$line</span>,1p"</span>| awk <span class="string">'&#123;print $14&#125;'</span>)</div><div class="line">		dev_name=$(iostat -xmd | sed -n <span class="string">"<span class="variable">$line</span>,1p"</span>| awk <span class="string">'&#123;print $1&#125;'</span>)</div><div class="line">		col=<span class="string">"<span class="variable">$col</span>|-<span class="variable">$dev_name</span>--"</span></div><div class="line">		result=<span class="string">"<span class="variable">$result</span><span class="variable">$dev_util</span>\t"</span></div><div class="line">	<span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">monitor_process</span></span>() &#123;</div><div class="line">	process_id=$( ps aux | grep <span class="variable">$PRO_NAME</span> | sed -n <span class="string">"1,1p"</span> | awk <span class="string">'&#123;print $2&#125;'</span>)</div><div class="line">	process_cpu=$(top -b -p 3303 -n1 | sed -n <span class="string">"8,1p"</span> | awk <span class="string">'&#123;print $9&#125;'</span>)</div><div class="line">	col=<span class="string">"<span class="variable">$col</span>|-%CPU-"</span></div><div class="line">	result=<span class="string">"<span class="variable">$result</span><span class="variable">$process_cpu</span>\t"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#main entry point</span></div><div class="line"></div><div class="line"><span class="comment">#the first argument is process name to monitor</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="_">-eq</span> 0 ] ; <span class="keyword">then</span></div><div class="line">	<span class="comment">#no arg, turn off monitor process</span></div><div class="line">	MONITOR_PROCESS=0</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="_">-eq</span> 1 ] ; <span class="keyword">then</span></div><div class="line">	process_exist=$(ps aux | grep <span class="variable">$PRO_NAME</span> | wc <span class="_">-l</span>)</div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$process_exist</span> <span class="_">-eq</span> 1 ] ; <span class="keyword">then</span></div><div class="line">		MONITOR_PROCESS=0</div><div class="line">	<span class="keyword">fi</span>	</div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$process_exist</span> <span class="_">-eq</span> 2 ] ; <span class="keyword">then</span></div><div class="line">		PRO_NAME=<span class="variable">$1</span></div><div class="line">	<span class="keyword">fi</span>	</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> [ 1 <span class="_">-eq</span> 1 ] ; <span class="keyword">do</span></div><div class="line">	result=<span class="string">""</span></div><div class="line">	col=<span class="string">""</span></div><div class="line"></div><div class="line">	<span class="comment"># sleep until next integer seconds</span></div><div class="line">	sleep=$(date <span class="string">'+%s.%N'</span> | awk <span class="string">"&#123;print <span class="variable">$INTERVAL</span> - (\$1 % <span class="variable">$INTERVAL</span>)&#125;"</span>)</div><div class="line">	sleep <span class="variable">$sleep</span></div><div class="line">	</div><div class="line">	time=$(date <span class="string">'+%F_%k:%M:%S.%N'</span>)</div><div class="line">	<span class="comment">#time=$(date '+%F_%k:%M:%S')</span></div><div class="line">	result=<span class="string">"<span class="variable">$result</span><span class="variable">$time</span>\t"</span></div><div class="line">	<span class="comment">#        2016-10-11_17:45:34.002592500</span></div><div class="line">	col=<span class="string">"<span class="variable">$col</span>------------time-------------"</span></div><div class="line">	<span class="comment"># do the work</span></div><div class="line">	</div><div class="line">	<span class="comment">## COL1 monitoring the load average</span></div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$MONITOR_LOAD</span> <span class="_">-eq</span> 1 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">		monitor_load</div><div class="line">	<span class="keyword">fi</span></div><div class="line"></div><div class="line">	<span class="comment">## COL1 monitoring the load average</span></div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$MONITOR_MEM</span> <span class="_">-eq</span> 1 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">		monitor_mem</div><div class="line">	<span class="keyword">fi</span></div><div class="line"></div><div class="line">	<span class="comment">## COL1 monitoring the load average</span></div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$MONITOR_IO</span> <span class="_">-eq</span> 1 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">		monitor_io</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="comment">## COL1 monitoring the load average</span></div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$MONITOR_PROCESS</span> <span class="_">-eq</span> 1 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">		monitor_process</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="comment">## extra COLs add below</span></div><div class="line"></div><div class="line">	<span class="comment"># do the print</span></div><div class="line">    <span class="comment">## on the first iteration print the col names</span></div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$loops</span> <span class="_">-eq</span> 0 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="variable">$col</span> &gt;&gt; <span class="variable">$OUTFILE</span></div><div class="line">		<span class="built_in">echo</span> <span class="variable">$col</span></div><div class="line">	<span class="keyword">fi</span></div><div class="line"></div><div class="line">	<span class="built_in">echo</span> <span class="variable">$result</span> &gt;&gt; <span class="variable">$OUTFILE</span></div><div class="line">	<span class="built_in">echo</span> <span class="variable">$result</span></div><div class="line"></div><div class="line">	loops=$((1))</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库性能测试标准TPC]]></title>
      <url>http://shenyu.wiki/2016/10/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%A0%87%E5%87%86TPC/</url>
      <content type="html"><![CDATA[<blockquote>
<p>经常有人在自己机器上跑了一个简单的查询，就发布到网上说哪个数据性能如何如何。数据库性能的好坏影响因素很多，比如业务特点、数据量、测试时间、硬件配置等等。那么有没有一个标准来度量数据库性能的好呢？</p>
</blockquote>
<p>有这么一个组织：TPC，即事务处理性能委员位TPC(Transaction Processing Performance Council)，成立于88年，制定了一系列用来测试数据库性能的标准，在业内广泛应用。<br>TPC成员有很多软硬件厂商组成，比如IBM，INTEL传统的硬件厂商；还有ORALCE、SAP、REDHAT等软件厂商等。国内的HUAWEI也在其中。可以说TPC组织覆盖了数据库的整个生态系统。<br>他们的官网是：<a href="http://www.tpc.org" target="_blank" rel="external">http://www.tpc.org</a></p>
<p>TPC有很多测试标准，见下图。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/le1aa8mmq6jnh0191fscinj7/image_1aup9fil01m0qsda13k0mi51jmp9.png" alt="TPC测试标准"></p>
<p>其中最有名的是TPC-C和TPC-H标准。TPC-C标准是TPC推出的最早的一个标准，主要用来测试交易处理的的场景。TPC-H标准主要用来测试决策支持场景。</p>
<h2 id="TPC-C"><a href="#TPC-C" class="headerlink" title="TPC-C"></a>TPC-C</h2><p>TPC-C全称为TPC Benchmark C，主要用来测试交易处理场景下数据库的性能。该测试标准模拟了一个批发商管理订单的场景。包括了输入订单，发货，收钱，查询订单状态。性能指标有2个分别是：</p>
<ul>
<li>new-order txn rate (tpmC)</li>
<li>price/performance ($/tpmC)</li>
</ul>
<p>根据字面意思不难理解，tmpC是每分钟处理订单的数量，$/tmpC是一个经济指标说的是每tmpC花费。</p>
<h2 id="TPC-H"><a href="#TPC-H" class="headerlink" title="TPC-H"></a>TPC-H</h2><p>TPC-H全称The TPC Benchmark™H ，主要用来测试决策支持场景下数据库的性能。该测试标准模拟了商业环境中一些即席查询（Ad-hoc queries）和并发修改。这些场景都需要访问大量的数据，执行的查询非常复杂。是不是可以理解成为OLAP场景测试？</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[好书推荐：《操作系统设计与实现》]]></title>
      <url>http://shenyu.wiki/2016/10/10/%E5%A5%BD%E4%B9%A6%E6%8E%A8%E8%8D%90%EF%BC%9A%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%8B/</url>
      <content type="html"><![CDATA[<p><img src="http://static.zybuluo.com/shenyuflying/9zirytck87tjzui21z89irin/QQ%E6%88%AA%E5%9B%BE20161010194316.png" alt=""></p>
<p>这本书带领你从理论到设计再到编码，一步步深入讲解了进程、内存管理、文件系统等内容。第一次读本书是在研究生期间，最近又拿出来看了一遍，又有很多收获。其中有些设计、编程思想十分经典，值得反复阅读。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux中的硬链接和软链接]]></title>
      <url>http://shenyu.wiki/2016/10/10/linux%E4%B8%AD%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E5%92%8C%E8%BD%AF%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h2 id="建立硬链接和软链接"><a href="#建立硬链接和软链接" class="headerlink" title="建立硬链接和软链接"></a>建立硬链接和软链接</h2><p>在linux中我们通过ln命令来建立硬链接和软链接，默认是建立硬链接，加上-s参数那么建立的就是软链接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;Hello world&quot; &gt; a</div><div class="line">$ ln a a_hard_link</div><div class="line">$ ln -s a a_soft_link</div></pre></td></tr></table></figure></p>
<p>建立好之后，用ls命令看一下，记得加上-i这样我们就可以看到inode号了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ls -ali</div><div class="line">19796575 -rw-rw-r--  2 yshen yshen   12 10月 10 11:33 a</div><div class="line">19796575 -rw-rw-r--  2 yshen yshen   12 10月 10 11:33 a_hard_link</div><div class="line">19796574 lrwxrwxrwx  1 yshen yshen    1 10月 10 11:34 a_soft_link -&gt; a</div></pre></td></tr></table></figure></p>
<p><strong>inode</strong><br>科普一下：inode全称是index node即索引节点。可见inode中并没有存放文件的实际内容，而是存放了索引。这个索引指向的是磁盘中存放文件内容的物理位置。<br><strong>目录</strong><br>在linux中目录也有一个inode，inode指向记录目录实际内容的磁盘物理位置。</p>
<h2 id="什么是硬链接和软链接"><a href="#什么是硬链接和软链接" class="headerlink" title="什么是硬链接和软链接"></a>什么是硬链接和软链接</h2><p>再回到我们的例子里，ls的结果第一列是该文件的inode号，可以看到硬链接的inode号和文件原来的inode号是一样的。说明指向的物理位置是一样的。<br>我们看软链接的inode号不同，说明是一个新的文件，该文件指向的是另外的一个物理位置。该物理位置里面存放着链接目标的路径。</p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>让我们删除连接目标文件a<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ rm a</div><div class="line">$ ls -ali</div><div class="line">总用量 12</div><div class="line">19796573 drwxrwxr-x  2 yshen yshen 4096 10月 10 11:35 .</div><div class="line">58720267 drwxrwxr-x 43 yshen yshen 4096 10月 10 11:33 ..</div><div class="line">19796575 -rw-rw-r--  1 yshen yshen   12 10月 10 11:33 a_hard_link</div><div class="line">19796574 lrwxrwxrwx  1 yshen yshen    1 10月 10 11:34 a_soft_link -&gt; a</div></pre></td></tr></table></figure></p>
<p>硬链接和软链接现在还能访问么？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat a_hard_link </div><div class="line">Hello world</div><div class="line">$ cat a_soft_link </div><div class="line">cat: a_soft_link: 没有那个文件或目录</div></pre></td></tr></table></figure></p>
<p>硬链接还能访问，软链接现在已经失效了！根据定义我们不难找出原因：<br>(1)硬链接指向的是物理位置和连接对象指向的物理位置一样，该物理位置有一个引用计数（ls的第三列），删除链接对象后，引用计数从原来的2变为1，所以物理上文件并没有删除，如果为0的话采用unlink删除。所以硬链接依然可以访问。<br>(2)软链接其实是一个文件，文件指向的路径已经失效了，所以会显示没有那个文件或目录。</p>
<p>我们总结一下区别：<br>(1) 链接目标失效之后，硬链接依然可以访问。软链接不能访问。<br>(2) 硬链接只能指向和链接目标同一个分区，软链接没有限制，甚至可以指向网络地址。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux中的僵尸进程]]></title>
      <url>http://shenyu.wiki/2016/10/09/linux%E4%B8%AD%E7%9A%84%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>如果一个进程已经退出或者被杀死，但是它的父进程尚未执行wait操作，那么该进程进入僵尸(zombie)状态。这种进程不再参与调度，它的内存也会被释放，但系统不会把它从进程表中删除(top 命令中显示状态为Z)。僵尸在进程等待父进程回收它的退出状态。</p>
</blockquote>
<p>这篇文章会告诉你：</p>
<ol>
<li>僵尸进程产生原理。</li>
<li>如何产生僵尸进程。</li>
<li>如何回收僵尸进程。</li>
</ol>
<a id="more"></a>
<h2 id="产生僵尸进程"><a href="#产生僵尸进程" class="headerlink" title="产生僵尸进程"></a>产生僵尸进程</h2><p>根据僵尸进程的定义，我们不难用c语言来产生一个僵尸进程</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MB 1024*1024</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> pid;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"new process PID=%d\n"</span>, getpid());</div><div class="line">    pid = fork();</div><div class="line">    <span class="keyword">if</span>(pid==<span class="number">0</span>)</div><div class="line">    &#123;   </div><div class="line">        <span class="comment">/* child */</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"new process PID=%d\n"</span>, getpid());</div><div class="line">        <span class="keyword">char</span> * p = <span class="built_in">malloc</span>(<span class="number">512</span>*MB);</div><div class="line">        <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="number">512</span>*MB);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;   </div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;   </div><div class="line">        <span class="comment">/* parent */</span></div><div class="line">        sleep(<span class="number">60</span>);</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译并执行该程序，然后再看该程序进程的状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ./main </div><div class="line">new process PID=25810</div><div class="line">new process PID=25811</div><div class="line"></div><div class="line">$ ps aux | grep main</div><div class="line">yshen    25810  0.0  0.0   4200   620 pts/31   S+   14:30   0:00 ./main</div><div class="line">yshen    25811  0.0  0.0      0     0 pts/31   Z+   14:30   0:00 [main] &lt;defunct&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到，主进程的状态为S+即休眠状态，子进程的状态为Z+即僵尸状态。此时僵尸进程等待父进程读取其退出状态。在该程序中等待父进程退出之后，子进程也将退出（因为子进程的状态在父进程退出之后已经没什么用了）。</p>
<p>用top命令来查看内存占用情况，可以看到实僵尸进程的内存占用等于0.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ top</div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND </div><div class="line">25810 yshen     20   0    4200    792    712 S   0.0  0.0   0:00.00 main</div><div class="line">25811 yshen     20   0       0      0      0 Z   0.0  0.0   0:00.67 main</div></pre></td></tr></table></figure></p>
<h2 id="处理僵尸进程"><a href="#处理僵尸进程" class="headerlink" title="处理僵尸进程"></a>处理僵尸进程</h2><p>根据以上分析，我们不难得出僵尸进程退出的2种情况：</p>
<ol>
<li>父进程用wait/waitpid来获取子进程的状态。</li>
<li>父进程退出。</li>
</ol>
<p>子进程退出，也会给父进程发送SIGCHLD信号来通知。在实际编码中，一般应SIGCHLD信号进行处理。（如：重新fork拉起子进程或进行垃圾回收，记录日志等等）。如下例子我们注册SIGCHLD信号处理函数，等待子进程退出时由父进程调用wait来获取其退出状态。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">#include&lt;unistd.h&gt;</div><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line">#include&lt;signal.h&gt;</div><div class="line"></div><div class="line">void handler(int code)</div><div class="line">&#123;</div><div class="line">	int status;</div><div class="line">	pid_t pid =	wait(&amp;status);</div><div class="line">	printf(&quot;parent get SIGCHLD, child %d returned %d\n&quot;,</div><div class="line">									pid, WEXITSTATUS(status));</div><div class="line">	sleep(60); /* 加这行是因为父进程收到SIGCHLD信号打断了原来的sleep，如果不加这个父进程就会马上退出 */</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line"></div><div class="line">	int pid;</div><div class="line">	signal(SIGCHLD,handler);</div><div class="line">	</div><div class="line">	printf(&quot;new process PID=%d\n&quot;, getpid());</div><div class="line">	pid = fork();</div><div class="line"></div><div class="line">	if(pid==0)</div><div class="line">	&#123;</div><div class="line">		/* child */</div><div class="line">		printf(&quot;new process PID=%d\n&quot;, getpid());</div><div class="line">		exit(123);</div><div class="line">	&#125;</div><div class="line">	/* parent */</div><div class="line">	sleep(60);</div><div class="line">	exit(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译并执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ./main </div><div class="line">new process PID=26559</div><div class="line">new process PID=26560</div><div class="line">parent get SIGCHLD, child 26560 returned 123</div><div class="line"></div><div class="line">$ ps aux | grep main</div><div class="line">yshen    26604  0.0  0.0   4200   624 pts/31   S+   15:07   0:00 ./main</div></pre></td></tr></table></figure></p>
<p>可以看到，已经没有僵尸进程了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符串中特殊字符转义——php中urlencode urldecode的c语言版本]]></title>
      <url>http://shenyu.wiki/2016/10/09/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B9%89%E2%80%94%E2%80%94php%E4%B8%ADurlencode-urldecode%E7%9A%84c%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有时候字符串中的特殊字符会影响到字符串解析，比如在某些情况中不允许字符串中有特殊字符，但是用户输入的文本中可能包含一些特殊字符。这时我们需要对特殊字符进行转义。在这里我们模仿php里面的urlencode和urldecode函数，给出其C语言实现。</p>
</blockquote>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./str_encode </div><div class="line"> select * from hello_world; = [+select+%2A+from+hello_world%3B]</div></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line"></div><div class="line"></div><div class="line">static char *str_encode(char *s, int len, int *new_length);</div><div class="line">static int str_decode(char *str, int len);</div><div class="line">static int htoi(char *s);</div><div class="line"></div><div class="line"></div><div class="line">int main(int argc, char *argv[])</div><div class="line">&#123;</div><div class="line"></div><div class="line">	char * msg = &quot;hello world!&quot;;</div><div class="line">	char * msg_encode;</div><div class="line">	char  msg_decode[1024] ;</div><div class="line"></div><div class="line">	msg_encode = str_encode(msg, strlen(msg), NULL);</div><div class="line"></div><div class="line">	/* decode modify the str inplace , so have to make a copy of it */</div><div class="line">	strcpy(msg_decode, msg_encode);</div><div class="line">	str_decode(msg_decode, strlen(msg_decode));</div><div class="line"></div><div class="line">	printf(&quot;%s = [%s]\n&quot;, msg_decode, msg_encode);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">static char *str_encode(char *s, int len, int *new_length)</div><div class="line">&#123;</div><div class="line">    register unsigned char c;</div><div class="line">    unsigned char *to, *start;</div><div class="line">    unsigned char const *from, *end;</div><div class="line">    static unsigned char hexchars[] = &quot;0123456789ABCDEF&quot;;</div><div class="line">    from = (unsigned char *)s;</div><div class="line">    end  = (unsigned char *)s + len;</div><div class="line">    start = to = (unsigned char *) malloc((3*len+1)*sizeof(char));</div><div class="line"></div><div class="line">    while (from &lt; end)</div><div class="line">    &#123;</div><div class="line">        c = *from++;</div><div class="line"></div><div class="line">        if (c == &apos; &apos;)</div><div class="line">        &#123;</div><div class="line">            *to++ = &apos;+&apos;;</div><div class="line">        &#125;</div><div class="line">        else if ((c &lt; &apos;0&apos; &amp;&amp; c != &apos;-&apos; &amp;&amp; c != &apos;.&apos;) ||</div><div class="line">                 (c &lt; &apos;A&apos; &amp;&amp; c &gt; &apos;9&apos;) ||</div><div class="line">                 (c &gt; &apos;Z&apos; &amp;&amp; c &lt; &apos;a&apos; &amp;&amp; c != &apos;_&apos;) ||</div><div class="line">                 (c &gt; &apos;z&apos;))</div><div class="line">        &#123;</div><div class="line">            to[0] = &apos;%&apos;;</div><div class="line">            to[1] = hexchars[c &gt;&gt; 4];</div><div class="line">            to[2] = hexchars[c &amp; 15];</div><div class="line">            to += 3;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            *to++ = c;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    *to = 0;</div><div class="line">    if (new_length)</div><div class="line">    &#123;</div><div class="line">        *new_length = to - start;</div><div class="line">    &#125;</div><div class="line">    return (char *) start;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">static int str_decode(char *str, int len)</div><div class="line">&#123;</div><div class="line">    char *dest = str;</div><div class="line">    char *data = str;</div><div class="line"></div><div class="line">    while (len--)</div><div class="line">    &#123;</div><div class="line">        if (*data == &apos;+&apos;)</div><div class="line">        &#123;</div><div class="line">            *dest = &apos; &apos;;</div><div class="line">        &#125;</div><div class="line">        else if (*data == &apos;%&apos; &amp;&amp; len &gt;= 2 &amp;&amp; isxdigit((int) *(data + 1)) &amp;&amp; isxdigit((int) *(data + 2)))</div><div class="line">        &#123;</div><div class="line">            *dest = (char) htoi(data + 1);</div><div class="line">            data += 2;</div><div class="line">            len -= 2;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            *dest = *data;</div><div class="line">        &#125;</div><div class="line">        data++;</div><div class="line">        dest++;</div><div class="line">    &#125;</div><div class="line">    *dest = &apos;\0&apos;;</div><div class="line">    return dest - str;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">static int htoi(char *s)</div><div class="line">&#123;</div><div class="line">    int value;</div><div class="line">    int c;</div><div class="line"></div><div class="line">    c = ((unsigned char *)s)[0];</div><div class="line">    if (isupper(c))</div><div class="line">        c = tolower(c);</div><div class="line">    value = (c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; ? c - &apos;0&apos; : c - &apos;a&apos; + 10) * 16;</div><div class="line"></div><div class="line">    c = ((unsigned char *)s)[1];</div><div class="line">    if (isupper(c))</div><div class="line">        c = tolower(c);</div><div class="line">    value += c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; ? c - &apos;0&apos; : c - &apos;a&apos; + 10;</div><div class="line"></div><div class="line">    return (value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[好文推荐：《Spanner: Google's Globally-Distributed Database》]]></title>
      <url>http://shenyu.wiki/2016/10/05/%E5%A5%BD%E6%96%87%E6%8E%A8%E8%8D%90%EF%BC%9A%E3%80%8ASpanner-Google-s-Globally-Distributed-Database%E3%80%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Spanner是谷歌公司研发的、可扩展的、多版本、全球分布式、同步复制数据库。它是第一个把数据分布在全球范围内的系统，并且支持外部一致性的分布式事务。本文描述了Spanner的架构、特性、不同设计决策的背后机理和一个新的时间API，这个API可以暴露时钟的不确定性。这个API及其实现，对于支持外部一致性和许多强大特性而言，是非常重要的，这些强大特性包括：非阻塞的读、不采用锁机制的只读事务、原子模式变更。</p>
</blockquote>
<p>附上原文<a href="/uploads/spanner.pdf">Spanner: Google’s Globally-Distributed Database</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux下配置IP地址子网掩码和网关]]></title>
      <url>http://shenyu.wiki/2016/10/05/linux%E4%B8%8B%E9%85%8D%E7%BD%AEIP%E5%9C%B0%E5%9D%80%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E5%92%8C%E7%BD%91%E5%85%B3/</url>
      <content type="html"><![CDATA[<h2 id="命令配置"><a href="#命令配置" class="headerlink" title="命令配置"></a>命令配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ifconfig eth0 ipaddr 192.12.12.12 netmask 255.255.255.0 </div><div class="line">route add default gw 192.12.12.1</div><div class="line">ifconfig eth0 down</div><div class="line">ifconfig eht0 up</div></pre></td></tr></table></figure>
<p>该方法重启过之后就失效了，如果要永久生效，方法有：</p>
<ol>
<li>把以上配置命令加入到启动脚本里面</li>
<li>修改网络配置文件</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh免密码登陆linux主机]]></title>
      <url>http://shenyu.wiki/2016/10/05/ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86linux%E4%B8%BB%E6%9C%BA/</url>
      <content type="html"><![CDATA[<blockquote>
<p>比如想登陆一台服务器但是每次都需要输密码，这时候我们可以用ssh的authorized_keys文件来记录允许登陆的主机。</p>
</blockquote>
<h2 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h2><p>比如我们有2台主机，分别是host1和host2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cat /etc/hosts</div><div class="line">192.168.0.101 host1</div><div class="line">192.168.0.102 host2</div></pre></td></tr></table></figure></p>
<h2 id="生成key"><a href="#生成key" class="headerlink" title="生成key"></a>生成key</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@host1 ~]# ssh-keygen -t dsa -f ~/.ssh/id_dsa -N &quot;&quot;</div><div class="line">Generating public/private dsa key pair.</div><div class="line">Your identification has been saved in /root/.ssh/id_dsa.</div><div class="line">Your public key has been saved in /root/.ssh/id_dsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">91:09:5c:82:5a:6a:50:08:4e:b2:0c:62:de:cc:74:44 root@host1.clusterlabs.org</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+--[ DSA 1024]----+</div><div class="line">|==.ooEo..        |</div><div class="line">|X O + .o o       |</div><div class="line">| * A    +        |</div><div class="line">|  +      .       |</div><div class="line">| .      S        |</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">+-----------------+</div></pre></td></tr></table></figure>
<h2 id="新建authorized-keys文件"><a href="#新建authorized-keys文件" class="headerlink" title="新建authorized_keys文件"></a>新建authorized_keys文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@host1 ~]# cp ~/.ssh/id_dsa.pub ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<h2 id="把authorized-keys文件部署到远程主机"><a href="#把authorized-keys文件部署到远程主机" class="headerlink" title="把authorized_keys文件部署到远程主机"></a>把authorized_keys文件部署到远程主机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@host1 ~]# scp -r ~/.ssh/authorized_keys host2:～/.ssh/</div></pre></td></tr></table></figure>
<h2 id="免密码登陆远程主机"><a href="#免密码登陆远程主机" class="headerlink" title="免密码登陆远程主机"></a>免密码登陆远程主机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@host1 ~]# ssh host2</div></pre></td></tr></table></figure>
<p>其实就是把本机生成的*.pub文件内容copy到另外一台主机~/.ssh/authorized_keys文件里面就ok！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux查找文件内容]]></title>
      <url>http://shenyu.wiki/2016/10/04/linux%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有时候我们需要在一堆文件中查找包含<code>某单词</code>的文件。比如在一堆源码文件中找出来调用一个函数的地方。</p>
</blockquote>
<p>可以用find，xargs，grep三个命令联合起来实现。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find ./ -type f -name *.c | xargs grep <span class="string">"word"</span></div></pre></td></tr></table></figure></p>
<p>find找出当前目录下所有.c的普通文件<br>xargs将文件名变成参数传入到grep<br>grep打开该文件并找出文件中包含word的行</p>
<h2 id="一个脚本"><a href="#一个脚本" class="headerlink" title="一个脚本"></a>一个脚本</h2><p>为了方便使用，避免每次都输入很长的命令，写出了下面一个脚本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash                                                                 </span></div><div class="line"><span class="comment">#递归查找当前目录文件中的内容</span></div><div class="line"><span class="comment">#参数1： 文件后缀，可以省略</span></div><div class="line"><span class="comment">#参数2： 要查找的字符串</span></div><div class="line"></div><div class="line">F_ARG_SUFFIX=<span class="string">""</span></div><div class="line">F_ARG_PATTEN=<span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> == 0 ] ; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"usage: f [file suffix] pattern"</span></div><div class="line">    <span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> == 1 ] ; <span class="keyword">then</span></div><div class="line">    F_ARG_PATTEN=<span class="string">"<span class="variable">$1</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> == 2 ] ; <span class="keyword">then</span></div><div class="line">    F_ARG_SUFFIX=<span class="string">"-name *.<span class="variable">$1</span>"</span></div><div class="line">    F_ARG_PATTEN=<span class="string">"<span class="variable">$2</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">find ./ -type f <span class="variable">$F_ARG_NAME</span> | xargs grep <span class="variable">$F_ARG_PATTEN</span></div></pre></td></tr></table></figure></p>
<p>保存在/bin目录下，并加上可执行权限</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>比如找出postgreSQL源码中, c语言文件使用到heap_open函数的地方：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ f c heap_open</div><div class="line">./backend/commands/tablecmds.c:         rel = heap_openrv(rv, AccessExclusiveLock);</div><div class="line">./backend/commands/tablecmds.c:                         rel = heap_open(childrelid, NoLock);</div><div class="line">...</div><div class="line"></div><div class="line">$ f c heap_open | wc <span class="_">-l</span></div><div class="line">587</div></pre></td></tr></table></figure></p>
<p>一共使用了587次，很多啊！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[好书推荐：《软技能-代码之外的生存指南》]]></title>
      <url>http://shenyu.wiki/2016/10/04/%E5%A5%BD%E4%B9%A6%E6%8E%A8%E8%8D%90%EF%BC%9A%E3%80%8A%E8%BD%AF%E6%8A%80%E8%83%BD-%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97%E3%80%8B/</url>
      <content type="html"><![CDATA[<p><img src="http://static.zybuluo.com/shenyuflying/phjbqy6j0tco0bvbtc3h3q45/2016-10-04%2017-26-44%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p>
<p>是在知乎上看到大家说这本书非常值得一读，在当当上买到这本书一个月有余，平时工作比较忙，陆陆续续的读了一部分，今天才利用国庆假期读完。</p>
<p>正如书名所说，这本书涵盖了除如何编程以外的各个方面，从职业规划，自我营销，如何学习，提高效率到理财、健身、心态等等。相比于一些励志、心理学方面的书籍，更加贴近于程序员的生活，因为作者本身就是一个非常成功的程序员。</p>
<p>在读这本书关于自我营销这一章的过程中，对我的直接影响就是我开始写博客了。我注册了<a href="http://www.shenyu.wiki" target="_blank" rel="external">域名</a>，快速学习并掌握了一个博客框架hexo，学习了markdown标记语言和cmdmarkdown跨平台markdown编辑器，在github上架设了我的第一个个人博客。当然其中走了一段弯路，想用树莓派+wordpress+花生棒搭建本地的博客，但是由于运营商限制80端口以及网速原因放弃了。你能想象这都是在一个月中利用业余时间完成的么？</p>
<p>在读这本书关于健身这一章的过程中，我体重一个月内下降了3斤。</p>
<p>该书的别的章节，比如职业规划，如何学习，健身，理财等等，对于程序员来说也非常重要。</p>
<p>这本书值得反复读，把其中有价值的思想和方法应用到自己的学习、工作生活之中。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[颐和园 Summer Palace]]></title>
      <url>http://shenyu.wiki/2016/10/04/%E9%A2%90%E5%92%8C%E5%9B%AD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>颐和园，中国清朝时期皇家园林，前身为清漪园，坐落在北京西郊，距城区十五公里，占地约二百九十公顷，与圆明园毗邻。它是以昆明湖、万寿山为基址，以杭州西湖为蓝本，汲取江南园林的设计手法而建成的一座大型山水园林，也是保存最完整的一座皇家行宫御苑，被誉为“皇家园林博物馆”，也是国家重点旅游景点。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/y5a04va003m6b4cwu9agky5v/2016-10-04%2012-37-23%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="昆明湖"><br>$$昆明湖$$</p>
<p>昆明湖是颐和园的主要湖泊，占全园面积的四分之三，约220公顷。南部的前湖区碧波荡漾，西望起伏、北望楼阁成群；湖中有一道西堤，堤上桃柳成行；</p>
<p><img src="http://static.zybuluo.com/shenyuflying/98ubpp8932fg35oovjeuz5e5/2016-10-04%2012-35-49%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$十七孔桥$$<br>十七孔桥横卧湖上，湖中3岛上也有形式各异的古典建筑。昆明湖是清代皇家诸园中最大的湖泊，湖中一道长堤──西堤，自西北逶迤向南。西堤及其支堤把湖面划分为三个大小不等的水域，每个水域各有一个湖心岛。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/r17fgepk5zbfc0cd5oyly2xy/2016-10-04%2012-38-18%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$万寿山$$</p>
<p>万寿山属燕山余脉，高58.59米。建筑群依山而筑，万寿山前山，以八面三层四重檐的佛香阁为中心，组成巨大的主体建筑群。</p>
<p>2016-10-3</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo静态博客修改侧边栏]]></title>
      <url>http://shenyu.wiki/2016/10/04/hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E4%BE%A7%E8%BE%B9%E6%A0%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>hexo主题默认的侧边栏只有<code>首页</code>、<code>归档</code>、<code>标签</code>这几项。调研了几个比较优秀的博客之后发现，还需要添加<code>关于</code>、<code>搜索</code>、<code>阅读</code>、<code>旅行</code>等等几个侧边栏项目，那么如何在博客里面添加新的侧边栏项目呢？</p>
</blockquote>
<h2 id="添加关于、留言项目"><a href="#添加关于、留言项目" class="headerlink" title="添加关于、留言项目"></a>添加关于、留言项目</h2><p>关于、留言这两个项目实际上是利用了hexo的page页面功能。</p>
<h3 id="Step1-新建关于页面"><a href="#Step1-新建关于页面" class="headerlink" title="Step1 新建关于页面"></a>Step1 新建关于页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo new page about</div><div class="line">INFO  Created: ~/blog/source/about/index.md</div></pre></td></tr></table></figure>
<p>打开修改为如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: about</div><div class="line">date: 2016-09-17 13:21:20</div><div class="line">comments: false   添加这行关闭评论</div><div class="line">---</div><div class="line">here is something about me</div></pre></td></tr></table></figure></p>
<h3 id="Step2-新建留言页面"><a href="#Step2-新建留言页面" class="headerlink" title="Step2 新建留言页面"></a>Step2 新建留言页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page message</div></pre></td></tr></table></figure>
<p>打开修改为如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: message</div><div class="line">date: 2016-09-17 13:21:20</div><div class="line">comments: true   打开评论</div><div class="line">---</div><div class="line">有事请留言</div></pre></td></tr></table></figure></p>
<h3 id="Step3-把关于、留言添加到侧边栏中"><a href="#Step3-把关于、留言添加到侧边栏中" class="headerlink" title="Step3 把关于、留言添加到侧边栏中"></a>Step3 把关于、留言添加到侧边栏中</h3><p>打开主题配置文件<code>./themes/next/_config.yml</code>，可以看到侧边栏Menu Settings有两项：<br>第一项是menu，控制侧边栏显示的项目；<br>第二项是menu_icons，控制显示项目的图标；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  books: /categories/阅读</div><div class="line">  travel: /categories/旅行</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div><div class="line">  message: /message #添加这一行</div><div class="line">  about: /about     #添加这一行</div><div class="line"></div><div class="line">menu_icons:</div><div class="line">  enable: true</div><div class="line">  home: home</div><div class="line">  about: user     #添加这一行</div><div class="line">  categories: th</div><div class="line">  books: book</div><div class="line">  travel: plane</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  commonweal: heartbeat</div><div class="line">  message: comment #添加这一行</div></pre></td></tr></table></figure></p>
<p>添加我们需要的阅读、旅行两个项目。<br>然后配置项目的图标，可以参考<a href="http://fontawesome.io/icons/" target="_blank" rel="external">http://fontawesome.io/icons/</a></p>
<h3 id="Step4-生成"><a href="#Step4-生成" class="headerlink" title="Step4 生成"></a>Step4 生成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<p>我们看到，生成了关于、评论的页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/public/about/index.html</div><div class="line">/public/message/index.html</div></pre></td></tr></table></figure></p>
<h2 id="添加阅读、旅行项目"><a href="#添加阅读、旅行项目" class="headerlink" title="添加阅读、旅行项目"></a>添加阅读、旅行项目</h2><p>阅读、旅行这两个项目实际上是利用了hexo主题的categories分类功能。</p>
<h3 id="Step1-模板添加分类categories"><a href="#Step1-模板添加分类categories" class="headerlink" title="Step1  模板添加分类categories"></a>Step1  模板添加分类categories</h3><p>打开<code>./scaffolds/post.md</code>添加一行<code>categories:</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">tags:</div><div class="line">categories:</div><div class="line">comments: true</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h3 id="Step2-把分类添加到侧边栏中"><a href="#Step2-把分类添加到侧边栏中" class="headerlink" title="Step2 把分类添加到侧边栏中"></a>Step2 把分类添加到侧边栏中</h3><p>打开主题配置文件<code>./themes/next/_config.yml</code>，可以看到侧边栏Menu Settings有两项：<br>第一项是menu，控制侧边栏显示的项目；<br>第二项是menu_icons，控制显示项目的图标；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  books: /categories/阅读</div><div class="line">  travel: /categories/旅行</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div><div class="line">  message: /message</div><div class="line">  about: /about</div><div class="line"></div><div class="line">menu_icons:</div><div class="line">  enable: true</div><div class="line">  home: home</div><div class="line">  about: user</div><div class="line">  categories: th</div><div class="line">  books: book</div><div class="line">  travel: plane</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  commonweal: heartbeat</div><div class="line">  message: comment</div></pre></td></tr></table></figure></p>
<p>添加我们需要的阅读、旅行两个项目。<br>然后配置项目的图标，可以参考<a href="http://fontawesome.io/icons/" target="_blank" rel="external">http://fontawesome.io/icons/</a></p>
<h3 id="Step3-新建文章"><a href="#Step3-新建文章" class="headerlink" title="Step3 新建文章"></a>Step3 新建文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo new &quot;我推荐的编程书籍&quot;</div><div class="line">INFO  Created: ~/blog/source/_posts/我推荐的编程书籍.md</div><div class="line">$ vim ./source/_posts/我推荐的编程书籍.md</div></pre></td></tr></table></figure>
<p>新建的文章自动添加了categories标签。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 我推荐的编程书籍</div><div class="line">comments: true</div><div class="line">date: 2016-10-04 11:19:10</div><div class="line">tags: 阅读</div><div class="line">categories:</div><div class="line">---</div><div class="line">## 《代码大全》 Code Complete</div><div class="line">。。。该书籍的介绍。。。</div></pre></td></tr></table></figure></p>
<h3 id="Step4-生成-1"><a href="#Step4-生成-1" class="headerlink" title="Step4 生成"></a>Step4 生成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<p>我们看到，生成了书籍分类的页面index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/home/yshen/blog/public/categories/书籍/index.html</div></pre></td></tr></table></figure></p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>最后，看一下最终效果：<br><img src="http://static.zybuluo.com/shenyuflying/nsteo6fk5y9ss50gz1z22gny/side_bar.png" alt="效果图"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wget下载网站供离线浏览]]></title>
      <url>http://shenyu.wiki/2016/10/02/wget%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99%E4%BE%9B%E7%A6%BB%E7%BA%BF%E6%B5%8F%E8%A7%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我们经常使用wget命令来下载文件，那么能不能使用wget来下载整个网站呢？</p>
</blockquote>
<p>看wget的man说明，可以发现wget有几个特点：</p>
<ol>
<li>非交互式，可以工作在后台。</li>
<li>可以追踪html中的链接，在下载过程中把连接自动转换为本地路径，从而创建本地网站镜像。</li>
<li>健壮性高，在失败之后会不断尝试，支持断线重连。</li>
</ol>
<p>发现wget果然强大，有网站下载这个功能，而且还可以控制网站下载的方式，下面就是wget进行网站下载的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ wget \</div><div class="line">     --recursive \</div><div class="line">     --no-clobber \</div><div class="line">     --page-requisites \</div><div class="line">     --html-extension \</div><div class="line">     --convert-links \</div><div class="line">     --restrict-file-names=windows \</div><div class="line">     --domains shenyu.wiki \</div><div class="line">     --no-parent \</div><div class="line">         shenyu.wiki</div></pre></td></tr></table></figure>
<p>上面的命令会下载 <a href="http://www.shenyu.wiki" target="_blank" rel="external">http://www.shenyu.wiki</a> 下面所有的页面。</p>
<p>上面用到的wget网站下载选择解释：</p>
<pre><code>--recursive: 下载整个网站
--domains shenyu.wiki: 不要下载指定域名之外的网页。
--no-parent: 仅仅下载当前目录结构下的文件。
--page-requisites: 现在网页包括的所有内容(images, CSS and so on).
--html-extension: 将网页保存为html文件。
--convert-links: 将连接转换为本地连接
--restrict-file-names=unix: 文件名保存为unix格式,如果是要保存windows格式的，这里写成windows
--no-clobber: 不要覆盖已有文件，在下载中断后继续下载。
</code></pre><p>下载完成之后，生成了<code>shenyu.wiki</code>文件夹，进去可以看到该网站的内容都下载好了。可以打开index.html文件来离线浏览网站。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ ll</div><div class="line">total 220</div><div class="line">drwxr-xr-x 6 yshen yshen   4096 10月  2 16:41 ./</div><div class="line">drwxr-xr-x 3 yshen yshen   4096 10月  2 16:41 ../</div><div class="line">drwxr-xr-x 4 yshen yshen   4096 10月  2 16:41 2016/</div><div class="line">-rw-r--r-- 1 yshen yshen  21632 10月  2 13:08 about.html</div><div class="line">-rw-r--r-- 1 yshen yshen  27364 10月  2 13:08 archives.html</div><div class="line">drwxr-xr-x 2 yshen yshen   4096 10月  2 16:41 css/</div><div class="line">-rw-r--r-- 1 yshen yshen 101642 10月  2 13:08 index.html</div><div class="line">-rw-r--r-- 1 yshen yshen  19836 10月  2 13:08 message.html</div><div class="line">-rw-r--r-- 1 yshen yshen  20598 10月  2 13:08 tags.html</div><div class="line">drwxr-xr-x 2 yshen yshen   4096 10月  2 16:41 uploads/</div><div class="line">drwxr-xr-x 4 yshen yshen   4096 10月  2 16:41 vendors/</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二进制文件 十六进制文件 互转]]></title>
      <url>http://shenyu.wiki/2016/10/02/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6-%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6-%E4%BA%92%E8%BD%AC/</url>
      <content type="html"><![CDATA[<blockquote>
<p>二进制文件用文本方式打开之后都是乱码，如何把二进制转为十六进制呢？如下一个小程序实现了二进制和十六进制相互转换。转换为十六进制之后就可以以0-9，a-f显示出来，方便阅读和以字符串形式发送。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 编译</div><div class="line">$ gcc c2bs.c -o c2bs</div><div class="line"></div><div class="line"># 帮助</div><div class="line">$ ./c2bs2</div><div class="line">convert to binary or strings.</div><div class="line">will read from stdin and write to stdout</div><div class="line">usage: ./c2bs2 [options]</div><div class="line">[options]</div><div class="line">    -b convert to binary</div><div class="line">    -s convert to string</div><div class="line"></div><div class="line"># 二进制可执行文件转16进制字符串</div><div class="line">$ cat ./c2bs | ./c2bs -c &gt; c2bs.hex </div><div class="line">$ head c2bs.hex</div><div class="line">7f454c4602010100000000000000000002003e000100000020064000000000004000000000000000a0110000000000000000000040003800090040001e001b000600000005000000400000000000000040004000000000004000400000000000f801000000000000f8010000000...</div><div class="line"></div><div class="line"># 十六进制字符串再转回到二进制</div><div class="line">$ cat ./c2bs.hex | ./c2bs -b &gt; c2bs</div></pre></td></tr></table></figure>
<p> 源码如下，需要注意的是，都用了不带符号的unsigned char类型，这个很关键，想想为什么？</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> in;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> talbe[<span class="string">'f'</span>+<span class="number">1</span>];</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> in_2[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (argc == <span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"convert to binary or strings.\n"</span>);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"will read from stdin and write to stdout\n"</span>);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"usage: %s [options]\n"</span></div><div class="line">			<span class="string">"[options]\n"</span></div><div class="line">			<span class="string">"    -b convert to binary\n"</span></div><div class="line">			<span class="string">"    -s convert to string\n"</span>,argv[<span class="number">0</span>]);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">switch</span>(argv[<span class="number">1</span>][<span class="number">1</span>])</div><div class="line">	&#123;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> <span class="string">'s'</span>:</div><div class="line">			<span class="keyword">while</span>( fread(&amp;in,<span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">1</span>,<span class="built_in">stdin</span>) &gt; <span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">"%02x"</span>,in);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		<span class="keyword">break</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">case</span> <span class="string">'b'</span>:</div><div class="line"></div><div class="line">			talbe[<span class="string">'0'</span>]=<span class="number">0</span>;	</div><div class="line">			talbe[<span class="string">'1'</span>]=<span class="number">1</span>;	</div><div class="line">			talbe[<span class="string">'2'</span>]=<span class="number">2</span>;	</div><div class="line">			talbe[<span class="string">'3'</span>]=<span class="number">3</span>;	</div><div class="line">			talbe[<span class="string">'4'</span>]=<span class="number">4</span>;	</div><div class="line">			talbe[<span class="string">'5'</span>]=<span class="number">5</span>;	</div><div class="line">			talbe[<span class="string">'6'</span>]=<span class="number">6</span>;	</div><div class="line">			talbe[<span class="string">'7'</span>]=<span class="number">7</span>;	</div><div class="line">			talbe[<span class="string">'8'</span>]=<span class="number">8</span>;	</div><div class="line">			talbe[<span class="string">'9'</span>]=<span class="number">9</span>;	</div><div class="line">			talbe[<span class="string">'a'</span>]=<span class="number">10</span>;	</div><div class="line">			talbe[<span class="string">'b'</span>]=<span class="number">11</span>;	</div><div class="line">			talbe[<span class="string">'c'</span>]=<span class="number">12</span>;	</div><div class="line">			talbe[<span class="string">'d'</span>]=<span class="number">13</span>;	</div><div class="line">			talbe[<span class="string">'e'</span>]=<span class="number">14</span>;	</div><div class="line">			talbe[<span class="string">'f'</span>]=<span class="number">15</span>;	</div><div class="line">			<span class="keyword">while</span>( fread(in_2,<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">2</span>,<span class="number">1</span>,<span class="built_in">stdin</span>) &gt; <span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">unsigned</span> <span class="keyword">char</span> out;</div><div class="line">				out = <span class="number">16</span>*talbe[in_2[<span class="number">0</span>]] + talbe[in_2[<span class="number">1</span>]]; </div><div class="line">				<span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">"%c"</span>,out);</div><div class="line">			&#125;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"unknown parameter %s"</span>,argv[<span class="number">1</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL count(*) 优化]]></title>
      <url>http://shenyu.wiki/2016/10/02/PostgreSQL-count-%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>在PostgreSQL数据库中，count(<em>)默认是全表扫描，那么对于数据量很大的表，因为需要把表的所有页面读入到内存，需要较多IO，耗费的时间很长。在很多应用中，需要频繁的count(</em>)来统计行数，那么在此类应用中如何优化count(*)的效率呢？</p>
<h2 id="建立一个表"><a href="#建立一个表" class="headerlink" title="建立一个表"></a>建立一个表</h2><p>我们先建立一个100万行的表，来做实验。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">postgres=# create table tb ( a int, b text);</div><div class="line">CREATE TABLE</div><div class="line">postgres=# insert into tb values ( generate_series(1,1000000), 'xxxxxx');</div><div class="line">INSERT 0 1000000</div><div class="line">postgres=# select count(*) from tb;</div><div class="line">  count  </div><div class="line">---------</div><div class="line"> 1000000</div><div class="line">(1 row)</div><div class="line">Time: 652.431 ms</div></pre></td></tr></table></figure>
<p>实际执行下来，花费时间是652ms<br>下面我们来看一下执行计划</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">postgres=# explain select count(*) from tb;</div><div class="line">                            QUERY PLAN                            </div><div class="line">------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=17906.00..17906.01 rows=1 width=0)</div><div class="line">   -&gt;  Seq Scan on tb  (cost=0.00..15406.00 rows=1000000 width=0)</div><div class="line">(2 rows)</div></pre></td></tr></table></figure>
<p>可以看到，count(*)是采用顺序扫描的执行计划。</p>
<h2 id="analyze会不会有改善？"><a href="#analyze会不会有改善？" class="headerlink" title="analyze会不会有改善？"></a>analyze会不会有改善？</h2><p>那么analyze会不会起作用呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">postgres=# analyze tb;</div><div class="line">ANALYZE</div><div class="line">Time: 201.853 ms</div><div class="line">postgres=# select count(*) from tb;</div><div class="line">  count  </div><div class="line">---------</div><div class="line"> 1000000</div><div class="line">(1 row)</div><div class="line">Time: 649.252 ms</div></pre></td></tr></table></figure>
<p>可以看到analyze基本没什么作用。</p>
<h2 id="主键会不会有改善？"><a href="#主键会不会有改善？" class="headerlink" title="主键会不会有改善？"></a>主键会不会有改善？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">postgres=# alter table tb add  primary key(a);</div><div class="line">ALTER TABLE</div><div class="line">Time: 2353.671 ms</div><div class="line">postgres=# select count(*) from tb;</div><div class="line">  count  </div><div class="line">---------</div><div class="line"> 1000000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">Time: 654.886 ms</div><div class="line">postgres=# alter table tb add  primary key(a);</div><div class="line">ERROR:  multiple primary keys for table &quot;tb&quot; are not allowed</div><div class="line">Time: 1.603 ms</div><div class="line">postgres=# explain select count(*) from tb;</div><div class="line">                            QUERY PLAN                            </div><div class="line">------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=17906.00..17906.01 rows=1 width=0)</div><div class="line">   -&gt;  Seq Scan on tb  (cost=0.00..15406.00 rows=1000000 width=0)</div><div class="line">(2 rows)</div><div class="line"></div><div class="line">Time: 1.246 ms</div></pre></td></tr></table></figure>
<p>可以看到，加了索引之后还是在走顺序扫描，时间没有什么改善。</p>
<h2 id="索引会不会有改善？"><a href="#索引会不会有改善？" class="headerlink" title="索引会不会有改善？"></a>索引会不会有改善？</h2><p>那么建立一个索引有没有作用？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">postgres=# create index tb_idx on tb(a);</div><div class="line">CREATE INDEX</div><div class="line">Time: 2009.193 ms</div><div class="line">postgres=# select count(*) from tb;</div><div class="line">  count  </div><div class="line">---------</div><div class="line"> 1000000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">Time: 654.997 ms</div><div class="line">postgres=# explain select count(*) from tb;</div><div class="line">                            QUERY PLAN                            </div><div class="line">------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=17906.00..17906.01 rows=1 width=0)</div><div class="line">   -&gt;  Seq Scan on tb  (cost=0.00..15406.00 rows=1000000 width=0)</div><div class="line">(2 rows)</div></pre></td></tr></table></figure>
<p>可以看到，建立了索引之后，时间依然没有明显改善，查看执行计划，可以看到依然是走的顺序扫描。<br>为什么不走索引呢？我们把顺序扫描关闭之后。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">postgres=# set enable_seqscan = off;</div><div class="line">SET</div><div class="line">postgres=# explain (analyze,buffers) select count(*) from tb;</div><div class="line">                              QUERY PLAN                     </div><div class="line">                                           </div><div class="line">----------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=33889.43..33889.44 rows=1 width=0) (actual time=1968.386..1968.387 rows=1 loo</div><div class="line">ps=1)</div><div class="line">   Buffers: shared hit=8141</div><div class="line">   -&gt;  Index Only Scan using tb_pkey on tb  (cost=0.42..31389.42 rows=1000000 width=0) (actual </div><div class="line">time=0.073..1542.385 rows=1000000 loops=1)</div><div class="line">         Heap Fetches: 1000000</div><div class="line">         Buffers: shared hit=8141</div><div class="line"> Planning time: 0.203 ms</div><div class="line"> Execution time: 1968.514 ms</div><div class="line">(7 rows)</div><div class="line">Time: 1969.929 ms</div></pre></td></tr></table></figure></p>
<p>顺序扫描之后看到时间反而变多了！查看执行计划可以看到，用的是Index Only Scan，读取到的页面是8141，而且还要读Heap上的100万条数据来查看事务信息，所以在该例子中采用索引扫描并不能有多大提升。</p>
<h2 id="优化方法——建触发器"><a href="#优化方法——建触发器" class="headerlink" title="优化方法——建触发器"></a>优化方法——建触发器</h2><p>如果这个表更新不那么频繁，可以建一个表用来缓存count的结果，再建一个触发器来更新缓存表。查的时候，查缓存count的那个表。<br>举个例子：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--建立count缓存表</span></div><div class="line"> <span class="keyword">create</span> <span class="keyword">table</span> tb_count(<span class="keyword">col</span> <span class="built_in">int</span>);</div><div class="line"><span class="comment">--初始化count缓存表</span></div><div class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> tb_count ( <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb);</div><div class="line"><span class="comment">--创建更新函数</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> tb_func()  <span class="keyword">RETURNS</span> <span class="keyword">TRIGGER</span> <span class="keyword">AS</span> $$</div><div class="line">        <span class="keyword">BEGIN</span></div><div class="line">                <span class="keyword">update</span>  tb_count  <span class="keyword">set</span> <span class="keyword">col</span> = <span class="keyword">col</span> + <span class="number">1</span>;</div><div class="line">                RETURN null;</div><div class="line">        <span class="keyword">END</span>;</div><div class="line">$$ LANGUAGE plpgsql; </div><div class="line"><span class="comment">--创建触发器</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tb_insert</div><div class="line">    <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> tb</div><div class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></div><div class="line">    <span class="keyword">EXECUTE</span> <span class="keyword">PROCEDURE</span> tb_func();</div><div class="line">    </div><div class="line"><span class="comment">--类似的创建对于如下2个的触发器</span></div><div class="line">    <span class="keyword">DELETE</span></div><div class="line">    <span class="keyword">TRUNCATE</span></div></pre></td></tr></table></figure>
<p>下面我们来看一下，优化之后的效率：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">postgres=# select count(*) from tb;</div><div class="line">  count  </div><div class="line">---------</div><div class="line"> 1000001</div><div class="line">(1 row)</div><div class="line"></div><div class="line">Time: 898.974 ms</div><div class="line">postgres=# select * from tb_count;</div><div class="line">   col   </div><div class="line">---------</div><div class="line"> 1000001</div><div class="line">(1 row)</div><div class="line"></div><div class="line">Time: 2.463 ms</div><div class="line">postgres=#</div></pre></td></tr></table></figure>
<p>可以看到，优化之后时间从原来的898ms降低为2ms。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Here Document]]></title>
      <url>http://shenyu.wiki/2016/10/02/Here-Document/</url>
      <content type="html"><![CDATA[<p>我们经常需要在shell中新建文件并输入内容，通常的做法有2种。<br>第一种： 用vim打开一个文件，输入内容，保存并退出。<br>第二种： 用echo输出重定向：echo “hello world” &gt; a.out。<br>但是这两种方法都有一定弊端，比如第一种无法在shell脚本里面实现往文件中输入内容。第二种，无法输入多行内容。<br>如果我们需要在shell脚本中对文件中输入多行内容，这时候我们Here Document就派上用场了。<br>另外，我们也可以用Here Document来执行一个命令， 并在程序打开后输入命令的一系列操作。</p>
<h2 id="什么是Here-Document"><a href="#什么是Here-Document" class="headerlink" title="什么是Here Document?"></a>什么是Here Document?</h2><p>Here Document 是在Linux Shell 中的一种特殊的重定向方式，它的基本的形式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cmd &lt;&lt; delimiter</div><div class="line">  Here Document Content</div><div class="line">delimiter</div></pre></td></tr></table></figure></p>
<p>它的作用就是将两个 delimiter 之间的内容(Here Document Content 部分) 传递给cmd 作为输入参数。</p>
<h2 id="在shell脚本中对文件输入多行内容"><a href="#在shell脚本中对文件输入多行内容" class="headerlink" title="在shell脚本中对文件输入多行内容"></a>在shell脚本中对文件输入多行内容</h2><p>基本方法是用here document把输入重定向给cat然后输出重定向到a.out文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">yshen@yshen-ThinkPad-X201 ~ $ cat &lt;&lt;EOF &gt; a.out</div><div class="line">&gt; this is line1</div><div class="line">&gt; this is line2</div><div class="line">&gt; this is line3</div><div class="line">&gt; ...</div><div class="line">&gt; this is lineN</div><div class="line">&gt; EOF</div><div class="line">yshen@yshen-ThinkPad-X201 ~ $ cat a.out </div><div class="line">this is line1</div><div class="line">this is line2</div><div class="line">this is line3</div><div class="line">...</div><div class="line">this is lineN</div></pre></td></tr></table></figure></p>
<p>这样，我们就使用Here Document在shell脚本中完成了多行文本的输入。</p>
<h2 id="输入命令的一系列操作"><a href="#输入命令的一系列操作" class="headerlink" title="输入命令的一系列操作"></a>输入命令的一系列操作</h2><p>另外，我们也可以用Here Document来执行一个命令， 并在程序打开后输入命令的一系列操作，比如。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ./isql -USYSTEM -WMANAGER -dTEST -p60102 &lt;&lt;EOF</div><div class="line">&gt; select 1;</div><div class="line">&gt; \q</div><div class="line">&gt; EOF</div><div class="line"> ?COLUMN? </div><div class="line">----------</div><div class="line">        1</div><div class="line">(1 row)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[贪吃蛇-基于SDL]]></title>
      <url>http://shenyu.wiki/2016/09/17/%E8%B4%AA%E5%90%83%E8%9B%87-%E5%9F%BA%E4%BA%8ESDL/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>贪吃蛇不用多说了吧，就是一条蛇吃水果，吃一个他的长度就加１。</p>
<h2 id="无图无真相"><a href="#无图无真相" class="headerlink" title="无图无真相"></a>无图无真相</h2><p><img src="/uploads/snake.png" alt="tup"></p>
<p>目前只是先实现了基本的功能，移动，长度加１。还没有实现碰撞检测的功能。</p>
<a id="more"></a>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL2/SDL.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL2/SDL_image.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> bool int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> true 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0</span></div><div class="line"></div><div class="line"><span class="comment">//Screen dimension constants</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SCREEN_WIDTH   640</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SCREEN_HEIGHT   480</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BOX_SIZE   20</span></div><div class="line"></div><div class="line"><span class="comment">//the map grid</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BOX_WIDTH SCREEN_WIDTH/BOX_SIZE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BOX_HEIGHT   SCREEN_HEIGHT/BOX_SIZE</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>game &#123;</div><div class="line">	<span class="keyword">bool</span> (*init) (<span class="keyword">struct</span> <span class="number">_</span>game * self);</div><div class="line">	<span class="keyword">bool</span> (*handle_events)(<span class="keyword">struct</span> <span class="number">_</span>game * self);</div><div class="line">	<span class="keyword">bool</span> (*update)(<span class="keyword">struct</span> <span class="number">_</span>game * self);</div><div class="line">	<span class="keyword">bool</span> (*render)(<span class="keyword">struct</span> <span class="number">_</span>game * self);</div><div class="line">	<span class="keyword">bool</span> (*close)(<span class="keyword">struct</span> <span class="number">_</span>game * self);</div><div class="line"></div><div class="line">	<span class="comment">//The window we'll be rendering to</span></div><div class="line">	SDL_Window* gWindow;</div><div class="line"></div><div class="line">	<span class="comment">//The window renderer</span></div><div class="line">	SDL_Renderer* gRenderer;</div><div class="line"></div><div class="line">	<span class="comment">//Event handler</span></div><div class="line">	SDL_Event e;</div><div class="line"></div><div class="line">	<span class="comment">//if want to quit</span></div><div class="line">	<span class="keyword">bool</span> quit;</div><div class="line"></div><div class="line">	<span class="comment">//if key pressed and need update the screen</span></div><div class="line">	<span class="keyword">bool</span> need_update;</div><div class="line"></div><div class="line">	<span class="comment">// use to draw a snake</span></div><div class="line">	<span class="keyword">int</span> path[BOX_WIDTH][BOX_HEIGHT];</div><div class="line">	<span class="keyword">int</span> head_x,head_y;</div><div class="line">	<span class="keyword">int</span> tail_x,tail_y;</div><div class="line"></div><div class="line">	<span class="comment">// use to draw the fruit</span></div><div class="line">	<span class="keyword">int</span> fruit_x,fruit_y;</div><div class="line">	<span class="keyword">int</span> fruit_need_update;</div><div class="line"></div><div class="line">	<span class="comment">// counter for each node used to find the tail</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> counter;</div><div class="line">	</div><div class="line">&#125; GameData, * Game;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>color &#123;</div><div class="line">	Uint8 r;</div><div class="line">	Uint8 g;</div><div class="line">	Uint8 b;</div><div class="line">	Uint8 a;</div><div class="line">&#125; Color;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">(<span class="keyword">struct</span> <span class="number">_</span>game * self)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">handle_events</span><span class="params">(<span class="keyword">struct</span> <span class="number">_</span>game * self)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">update</span><span class="params">(<span class="keyword">struct</span> <span class="number">_</span>game * self)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render</span><span class="params">(<span class="keyword">struct</span> <span class="number">_</span>game * self)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render_draw_solid_rec</span><span class="params">(Game self,<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h, Color c)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render_draw_empty_rec</span><span class="params">(Game self,<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h, Color c)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render_draw_line</span><span class="params">(Game self,<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, Color c)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">close</span><span class="params">(<span class="keyword">struct</span> <span class="number">_</span>game * self)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">get_count</span><span class="params">(<span class="keyword">struct</span> <span class="number">_</span>game *self)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> self-&gt;counter++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> newGame(game)\</span></div><div class="line">	(Game) malloc(sizeof(GameData)); \</div><div class="line">	game-&gt;init=init;\</div><div class="line">	game-&gt;handle_events=handle_events;\</div><div class="line">	game-&gt;update=update;\</div><div class="line">	game-&gt;render=render;\</div><div class="line">	game-&gt;close=close;\</div><div class="line">	game-&gt;gWindow=NULL;\</div><div class="line">	game-&gt;gRenderer=NULL;\</div><div class="line">	game-&gt;quit=false;\</div><div class="line">	game-&gt;need_update=false;\</div><div class="line">	game-&gt;length=3;\</div><div class="line">	memset(game-&gt;path,0,sizeof(game-&gt;path));\</div><div class="line">	game-&gt;counter=1;\</div><div class="line">	game-&gt;path[10][11]=get_count(game);\</div><div class="line">	game-&gt;path[10][12]=get_count(game);\</div><div class="line">	game-&gt;head_x=10;game-&gt;head_y=12;\</div><div class="line">	game-&gt;tail_x=10;game-&gt;tail_y=11;\</div><div class="line">	game-&gt;fruit_x=rand()%BOX_WIDTH;game-&gt;fruit_y=rand()%BOX_HEIGHT;\</div><div class="line">	game-&gt;fruit_need_update=false;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> have_fruit()\</span></div><div class="line">	(self-&gt;fruit_x!=-1 &amp;&amp; self-&gt;fruit_y!=-1)</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fruit_need_update()\</span></div><div class="line">	(self-&gt;fruit_need_update)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">(Game self)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//Initialization flag</span></div><div class="line">	<span class="keyword">bool</span> success = <span class="literal">true</span>;</div><div class="line"></div><div class="line">	<span class="comment">//Initialize SDL</span></div><div class="line">	<span class="keyword">if</span>( SDL_Init( SDL_INIT_VIDEO ) &lt; <span class="number">0</span> )</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>( <span class="string">"SDL could not initialize! SDL Error: %s\n"</span>, SDL_GetError() );</div><div class="line">		success = <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">//Set texture filtering to linear</span></div><div class="line">		<span class="keyword">if</span>( !SDL_SetHint( SDL_HINT_RENDER_SCALE_QUALITY, <span class="string">"1"</span> ) )</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>( <span class="string">"Warning: Linear texture filtering not enabled!"</span> );</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//Create window</span></div><div class="line">		self-&gt;gWindow = SDL_CreateWindow( <span class="string">"Snake"</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );</div><div class="line">		<span class="keyword">if</span>( self-&gt;gWindow == <span class="literal">NULL</span> )</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>( <span class="string">"Window could not be created! SDL Error: %s\n"</span>, SDL_GetError() );</div><div class="line">			success = <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="comment">//Create renderer for window</span></div><div class="line">			self-&gt;gRenderer = SDL_CreateRenderer( self-&gt;gWindow, <span class="number">-1</span>, SDL_RENDERER_ACCELERATED );</div><div class="line">			<span class="keyword">if</span>(self-&gt;gRenderer == <span class="literal">NULL</span> )</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">printf</span>( <span class="string">"Renderer could not be created! SDL Error: %s\n"</span>, SDL_GetError() );</div><div class="line">				success = <span class="literal">false</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				<span class="comment">//Initialize renderer color</span></div><div class="line">				SDL_SetRenderDrawColor( self-&gt;gRenderer, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span> );</div><div class="line"></div><div class="line">				<span class="comment">//Initialize PNG loading</span></div><div class="line">				<span class="keyword">int</span> imgFlags = IMG_INIT_PNG;</div><div class="line">				<span class="keyword">if</span>( !( IMG_Init( imgFlags ) &amp; imgFlags ) )</div><div class="line">				&#123;</div><div class="line">					<span class="built_in">printf</span>( <span class="string">"SDL_image could not initialize! SDL_image Error: %s\n"</span>, IMG_GetError() );</div><div class="line">					success = <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> success;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">handle_events</span><span class="params">(Game self)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="comment">//Handle events on queue</span></div><div class="line">	<span class="keyword">while</span>( SDL_PollEvent( &amp;(self-&gt;e) ) != <span class="number">0</span> )</div><div class="line">	&#123;</div><div class="line">		<span class="comment">//User requests quit</span></div><div class="line">		<span class="keyword">if</span>( self-&gt;e.type == SDL_QUIT )</div><div class="line">		&#123;</div><div class="line">			self-&gt;quit = <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//User presses a key</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( self-&gt;e.type == SDL_KEYDOWN )</div><div class="line">        &#123;</div><div class="line">			<span class="comment">//Select surfaces based on key press</span></div><div class="line">            <span class="keyword">switch</span>( self-&gt;e.key.keysym.sym )</div><div class="line">             &#123;</div><div class="line">                  <span class="keyword">case</span> SDLK_UP:</div><div class="line">				  	<span class="keyword">if</span> (self-&gt;head_y<span class="number">-1</span>!=<span class="number">-1</span>&amp;&amp; !self-&gt;path[self-&gt;head_x][self-&gt;head_y<span class="number">-1</span>])</div><div class="line">				  	&#123;</div><div class="line">		                self-&gt;head_y--;	</div><div class="line">						self-&gt;need_update=<span class="literal">true</span>;</div><div class="line">				  	&#125;</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                  <span class="keyword">case</span> SDLK_DOWN:</div><div class="line">				  	<span class="keyword">if</span> (self-&gt;head_y+<span class="number">1</span>!=BOX_HEIGHT &amp;&amp; !self-&gt;path[self-&gt;head_x][self-&gt;head_y+<span class="number">1</span>])</div><div class="line">				  	&#123;				  	</div><div class="line">	                 	self-&gt;head_y++;</div><div class="line">						self-&gt;need_update=<span class="literal">true</span>;</div><div class="line">			  		&#125;</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                  <span class="keyword">case</span> SDLK_LEFT:</div><div class="line">				  	<span class="keyword">if</span> (self-&gt;head_x<span class="number">-1</span>!=<span class="number">-1</span> &amp;&amp; !self-&gt;path[self-&gt;head_x<span class="number">-1</span>][self-&gt;head_y])</div><div class="line">				  	&#123;	</div><div class="line">						self-&gt;head_x--;	</div><div class="line">						self-&gt;need_update=<span class="literal">true</span>;</div><div class="line">				  	&#125;</div><div class="line">				  <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                  <span class="keyword">case</span> SDLK_RIGHT:</div><div class="line">				  	<span class="keyword">if</span> (self-&gt;head_x+<span class="number">1</span>!=BOX_WIDTH &amp;&amp; !self-&gt;path[self-&gt;head_x+<span class="number">1</span>][self-&gt;head_y])</div><div class="line">				  	&#123;	</div><div class="line">	                     self-&gt;head_x++;</div><div class="line">						 self-&gt;need_update=<span class="literal">true</span>;</div><div class="line">				  	&#125;</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line"></div><div class="line">              &#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">update</span><span class="params">(Game self)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j;</div><div class="line">	<span class="keyword">if</span>(self-&gt;need_update)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// the head always have the biggest number</span></div><div class="line">		self-&gt;path[self-&gt;head_x][self-&gt;head_y]=get_count(self);</div><div class="line"></div><div class="line">		<span class="comment">// if head reach fruit, tail don't move</span></div><div class="line">		<span class="keyword">if</span> (self-&gt;head_x == self-&gt;fruit_x &amp;&amp; self-&gt;head_y == self-&gt;fruit_y)</div><div class="line">		&#123;</div><div class="line">			self-&gt;fruit_need_update = <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="comment">//the head missed fruit, need move</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">unsigned</span> <span class="keyword">int</span> max;</div><div class="line">			<span class="comment">//mark the tail as invisible</span></div><div class="line">			self-&gt;path[self-&gt;tail_x][self-&gt;tail_y]=<span class="number">0</span>;</div><div class="line"></div><div class="line">			<span class="comment">//find new tail, shall be min</span></div><div class="line">			max=self-&gt;path[self-&gt;head_x][self-&gt;head_y];</div><div class="line">			<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;BOX_WIDTH;i++)</div><div class="line">			<span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;BOX_HEIGHT;j++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span> (self-&gt;path[i][j]!=<span class="number">0</span> &amp;&amp; self-&gt;path[i][j] &lt; max)</div><div class="line">				&#123;</div><div class="line">					self-&gt;tail_x=i;</div><div class="line">					self-&gt;tail_y=j;</div><div class="line">					max = self-&gt;path[i][j];</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		self-&gt;need_update=<span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (have_fruit()&amp;&amp;fruit_need_update())</div><div class="line">	&#123;</div><div class="line">		self-&gt;fruit_x=rand()%BOX_WIDTH;</div><div class="line">		self-&gt;fruit_y=rand()%BOX_HEIGHT;</div><div class="line">		self-&gt;fruit_need_update=<span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render</span><span class="params">(Game self)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j;</div><div class="line">	</div><div class="line">	<span class="comment">//Clear screen</span></div><div class="line">	SDL_SetRenderDrawColor( self-&gt;gRenderer, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> );</div><div class="line">	SDL_RenderClear( self-&gt;gRenderer );</div><div class="line"></div><div class="line">	<span class="comment">//do the drawing...</span></div><div class="line"></div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;BOX_WIDTH;i++)</div><div class="line">	<span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;BOX_HEIGHT;j++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (self-&gt;path[i][j])</div><div class="line">		&#123;</div><div class="line">			Color c = &#123;<span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFF</span> &#125;;</div><div class="line">			render_draw_solid_rec(self,i*BOX_SIZE,j*BOX_SIZE,BOX_SIZE,BOX_SIZE,c);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (have_fruit())</div><div class="line">	&#123;</div><div class="line">		Color c = &#123;<span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0xFF</span> &#125;;</div><div class="line">		render_draw_solid_rec(self,self-&gt;fruit_x*BOX_SIZE,self-&gt;fruit_y*BOX_SIZE,BOX_SIZE,BOX_SIZE,c);</div><div class="line">	&#125;</div><div class="line">		</div><div class="line">	SDL_RenderPresent( self-&gt;gRenderer );</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">close</span><span class="params">(Game self)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render_draw_solid_rec</span><span class="params">(Game self,<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h, Color c)</span></span></div><div class="line">&#123;</div><div class="line">	SDL_Rect fillRect = &#123; x,y,w,h &#125;;</div><div class="line">	SDL_SetRenderDrawColor( self-&gt;gRenderer, c.r, c.g, c.b, c.a );		</div><div class="line">	SDL_RenderFillRect( self-&gt;gRenderer, &amp;fillRect );</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render_draw_empty_rec</span><span class="params">(Game self,<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h, Color c)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//Render green outlined quad</span></div><div class="line">	SDL_Rect outlineRect = &#123; x,y,w,h&#125;;</div><div class="line">	SDL_SetRenderDrawColor( self-&gt;gRenderer, c.r, c.g, c.b, c.a );	</div><div class="line">	SDL_RenderDrawRect( self-&gt;gRenderer, &amp;outlineRect );</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render_draw_line</span><span class="params">(Game self,<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, Color c)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//Draw blue horizontal line</span></div><div class="line">	SDL_SetRenderDrawColor( self-&gt;gRenderer, c.r, c.g, c.b, c.a );	</div><div class="line">	SDL_RenderDrawLine( self-&gt;gRenderer, x1,y1,x2,y2);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">	Game  snake = newGame(snake) ;</div><div class="line"></div><div class="line">	snake-&gt;init(snake);</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(!snake-&gt;quit)</div><div class="line">	&#123;</div><div class="line">		snake-&gt;handle_events(snake);</div><div class="line">		snake-&gt;update(snake);</div><div class="line">		snake-&gt;render(snake);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[c语言转汇编语言shell脚本]]></title>
      <url>http://shenyu.wiki/2016/09/17/c%E8%AF%AD%E8%A8%80%E8%BD%AC%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80shell%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>最近在学习汇编，为了方便写了一个shell脚本，用来把c语言转换为汇编语言。很方便。</p>
<h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash  </div><div class="line">if [  &quot;$#&quot; = &quot;0&quot; ] ; then</div><div class="line">        echo &apos;help: c2asm FILENAME&apos;  </div><div class="line">        exit 1;</div><div class="line">fi</div><div class="line"></div><div class="line"></div><div class="line">if [ -f &quot;$1&quot; ] ; then</div><div class="line">        echo &apos;check file ok!&apos;  </div><div class="line">else</div><div class="line">        echo &apos;c2asm: file not exist&apos;  </div><div class="line">        exit 1;</div><div class="line">fi</div><div class="line">echo &apos;generating asm file...&apos;  </div><div class="line">gcc -O0 -S &quot;$1&quot;</div><div class="line">tmp=$1</div><div class="line">asmfile=$&#123;tmp%%.c&#125;.s;</div><div class="line"></div><div class="line">echo &quot;asm file generated: $asmfile&quot;  </div><div class="line">echo &apos;==================asm====================&apos;  </div><div class="line">cat &quot;$asmfile&quot; | grep -v &apos;\.&apos;</div><div class="line">echo &apos;==================c======================&apos;  </div><div class="line">cat &quot;$1&quot;</div><div class="line">echo &apos;==================END====================&apos;  </div><div class="line">echo &apos;done&apos;</div></pre></td></tr></table></figure>
<h2 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">check file ok!</div><div class="line">generating asm file...</div><div class="line">asm file generated: main.s</div><div class="line">==================asm====================</div><div class="line">main:</div><div class="line">	pushq	%rbp</div><div class="line">	movq	%rsp, %rbp</div><div class="line">	movl	$1, -8(%rbp)</div><div class="line">	movl	$1, -4(%rbp)</div><div class="line">	movl	-8(%rbp), %edx</div><div class="line">	movl	-4(%rbp), %eax</div><div class="line">	addl	%edx, %eax</div><div class="line">	popq	%rbp</div><div class="line">	ret</div><div class="line">==================c======================</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	int a,b;</div><div class="line">	a = 1;</div><div class="line">	b = 1;</div><div class="line">	return a+b;</div><div class="line"></div><div class="line">&#125;</div><div class="line">==================END====================</div><div class="line">done</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux shell聊天室]]></title>
      <url>http://shenyu.wiki/2016/09/17/linux-shell%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
      <content type="html"><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>里程碑0：</p>
<p>1、基于C/S架构的聊天室，分为客户端和服务器。<br>2、客户端登陆时输入服务器IP、port、 昵称不能重复</p>
<p>里程碑1：</p>
<p>3、可以群发消息或指定接收人<br>4、admin账号可以踢人<br>5、新加入用户可以看到聊天历史记录</p>
<p>里程碑2：</p>
<p>5、可以互传文件<br>6、保存聊天信息</p>
<p>里程碑3：</p>
<p>7、第一次登录时，需要注册。</p>
<h2 id="技术设计"><a href="#技术设计" class="headerlink" title="技术设计"></a>技术设计</h2><p>1、在shell下的图形库：curses<br>2、多线程：pthread<br>3、网络：socket<br>4、消息结构：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> msg_st  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">char</span> name[<span class="number">256</span>];  </div><div class="line">    <span class="keyword">char</span> to[<span class="number">256</span>];  </div><div class="line">    <span class="keyword">char</span> data[<span class="number">4096</span>];  </div><div class="line">    <span class="keyword">char</span> cmd[<span class="number">256</span>];  </div><div class="line"><span class="comment">/*</span></div><div class="line"> * 其中，关于cmd内容：</div><div class="line"> * login 登陆</div><div class="line"> * offline 服务器即将踢人</div><div class="line"> * user 服务发送的用户列表，数据在data里</div><div class="line"> * chat 表示这是一条消息，数据在data里</div><div class="line"> */</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>5、服务器用了epoll来监听多个fd</p>
<h2 id="登陆界面"><a href="#登陆界面" class="headerlink" title="登陆界面"></a>登陆界面</h2><p><img src="http://img.blog.csdn.net/20141228204352953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hlbnl1Zmx5aW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="登陆界面"></p>
<h2 id="聊天界面"><a href="#聊天界面" class="headerlink" title="聊天界面"></a>聊天界面</h2><p><img src="http://img.blog.csdn.net/20141228193822585?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hlbnl1Zmx5aW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="聊天界面"></p>
<a id="more"></a>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//client.c  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netdb.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ioctl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/select.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ncurses.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"shared_vals.h"</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"chat_net.h"</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"chat_ui.h"</span>  </span></div><div class="line">  </div><div class="line"><span class="keyword">char</span> promote[<span class="number">256</span>]= &#123;<span class="number">0</span>&#125;;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    ui_init();  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="keyword">do</span>  </div><div class="line">    &#123;  </div><div class="line">        ui_login(ip,&amp;port,name);  </div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span>==net_login(ip,&amp;port,name))  </div><div class="line">        &#123;  </div><div class="line">            ui_alert(<span class="string">"Login ok!"</span>);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">        &#123;  </div><div class="line">            ui_alert(<span class="string">"Login failed!"</span>);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>);  </div><div class="line">  </div><div class="line">    ui_init_wins();  </div><div class="line">  </div><div class="line">    ui_refresh_wins();  </div><div class="line">    wprintw(win[<span class="number">1</span>],<span class="string">"IP:%s\nPORT:%d\nNAME:%s"</span>,ip,port,name);  </div><div class="line">    ui_refresh_wins();  </div><div class="line">  </div><div class="line"><span class="comment">//    int i=0;  </span></div><div class="line"><span class="comment">//    for(i=0; i&lt;100; i++)  </span></div><div class="line"><span class="comment">//        ui_print_msg("This is a test message!");  </span></div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="comment">//generate promote as [from] [to]  </span></div><div class="line">    <span class="built_in">sprintf</span>(promote,<span class="string">"[%s]:"</span>, name);  </div><div class="line">    <span class="comment">//start recev process  </span></div><div class="line">  </div><div class="line">    <span class="keyword">pthread_t</span> thread;  </div><div class="line">    <span class="keyword">int</span> res=pthread_create(&amp;thread,<span class="literal">NULL</span>,(<span class="keyword">void</span> *)net_getmsg,(<span class="keyword">void</span>*)<span class="literal">NULL</span>);  </div><div class="line">    <span class="keyword">if</span>(res!=<span class="number">0</span>)  </div><div class="line">    &#123;  </div><div class="line">          ui_alert(<span class="string">"Error"</span>);  </div><div class="line">          getch();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)  </div><div class="line">    &#123;  </div><div class="line">        ui_promote(promote);  </div><div class="line">  </div><div class="line">        <span class="keyword">int</span> c=<span class="number">0</span>;  </div><div class="line">        <span class="keyword">struct</span> msg_st msg_client;  </div><div class="line">        <span class="built_in">memset</span>((<span class="keyword">void</span> *)&amp;msg_client,<span class="number">0</span>,<span class="keyword">sizeof</span>(msg_client));  </div><div class="line">        ui_getmsg(msg_client.data);  </div><div class="line">        <span class="built_in">strcpy</span>(msg_client.name,name);  </div><div class="line">        <span class="built_in">strcpy</span>(msg_client.cmd,<span class="string">"chat"</span>);  </div><div class="line">        write(sockfd,&amp;msg_client,<span class="keyword">sizeof</span>(msg_client));  </div><div class="line">  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    net_end();  </div><div class="line">    ui_end();  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//chat_net.h  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CHAT_NET_H_  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CHAT_NET_H_  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netdb.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ioctl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/select.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ncurses.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"shared_vals.h"</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">"chat_ui.h"</span>  </span></div><div class="line"><span class="keyword">int</span> sockfd;  </div><div class="line"><span class="keyword">int</span> len;  </div><div class="line"><span class="keyword">struct</span> sockaddr_in address;  </div><div class="line"><span class="keyword">int</span> result;  </div><div class="line"><span class="keyword">char</span> ip[<span class="number">256</span>];  </div><div class="line"><span class="keyword">int</span>  port;  </div><div class="line"><span class="keyword">char</span> name[<span class="number">256</span>];  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">net_login</span><span class="params">(<span class="keyword">char</span> *ip,<span class="keyword">int</span> * port,<span class="keyword">char</span> *name)</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">  </div><div class="line">    sockfd=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);  </div><div class="line">    address.sin_family=AF_INET;  </div><div class="line">    address.sin_addr.s_addr=inet_addr(<span class="string">"127.0.0.1"</span>);  </div><div class="line">    address.sin_port=htons(*port);  </div><div class="line">    len=<span class="keyword">sizeof</span>(address);  </div><div class="line">    result=connect(sockfd,(<span class="keyword">struct</span> sockaddr *)&amp;address,len);  </div><div class="line">    <span class="keyword">if</span>(result==<span class="number">-1</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"ERROR:%s\n"</span>,strerror(errno));  </div><div class="line">        close(sockfd);  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">struct</span> msg_st msg;  </div><div class="line">    <span class="built_in">memset</span>((<span class="keyword">void</span> *)&amp;msg,<span class="number">0</span>,<span class="keyword">sizeof</span>(msg));  </div><div class="line">    <span class="built_in">sprintf</span>(msg.cmd,<span class="string">"login"</span>);  </div><div class="line">    <span class="built_in">strcpy</span>(msg.name,name);  </div><div class="line">    <span class="comment">//  fgets(msg.name,256,stdin);  </span></div><div class="line">    <span class="comment">//printf("checking name [%s]...\n",msg.name);  </span></div><div class="line">    write(sockfd,&amp; msg,<span class="keyword">sizeof</span>( msg));  </div><div class="line">  </div><div class="line">    usleep(<span class="number">100000</span>);  </div><div class="line">    <span class="keyword">int</span> nread=<span class="number">0</span>;  </div><div class="line">    ioctl(sockfd,FIONREAD,&amp;nread);  </div><div class="line">    <span class="keyword">if</span>(nread!=<span class="number">0</span>)  </div><div class="line">    &#123;  </div><div class="line">        read(sockfd,&amp;msg,<span class="keyword">sizeof</span>(msg));  </div><div class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">"ok"</span>,msg.data)==<span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//login ok  </span></div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">        &#123;  </div><div class="line">  </div><div class="line">            <span class="comment">// printf("Login failed!\n");  </span></div><div class="line">            close(sockfd);  </div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//login failed  </span></div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line"><span class="comment">//   printf("Login failed!\n");  </span></div><div class="line">    close(sockfd);  </div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//login failed  </span></div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">net_getmsg</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)  </div><div class="line">    &#123;  </div><div class="line">        usleep(<span class="number">100000</span>);  </div><div class="line">        <span class="keyword">int</span> nread=<span class="number">0</span>;  </div><div class="line">        ioctl(sockfd,FIONREAD,&amp;nread);  </div><div class="line">        <span class="keyword">if</span>(nread!=<span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">struct</span> msg_st msg_read;  </div><div class="line">            read(sockfd,&amp;msg_read,<span class="keyword">sizeof</span>(msg_read));  </div><div class="line">            <span class="keyword">if</span>(<span class="built_in">strncmp</span>(msg_read.cmd,<span class="string">"chat"</span>,<span class="number">4</span>)==<span class="number">0</span>)  </div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">struct</span> tm *tm_ptr;  </div><div class="line">                <span class="keyword">time_t</span> the_time;  </div><div class="line">                (<span class="keyword">void</span>)time(&amp;the_time);  </div><div class="line">                tm_ptr=gmtime(&amp;the_time);  </div><div class="line">                <span class="keyword">char</span> buff[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;  </div><div class="line">                <span class="built_in">sprintf</span>(buff,<span class="string">"\n[%02d:%02d:%02d]"</span>,tm_ptr-&gt;tm_hour,tm_ptr-&gt;tm_min,tm_ptr-&gt;tm_sec);  </div><div class="line">                <span class="built_in">strcat</span>(buff,msg_read.name);  </div><div class="line">                <span class="built_in">strcat</span>(buff,<span class="string">":"</span>);  </div><div class="line">                ui_print_msg(buff);  </div><div class="line">                ui_print_msg(msg_read.data);  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(msg_read.cmd,<span class="string">"user"</span>,<span class="number">4</span>)==<span class="number">0</span>)  </div><div class="line">            &#123;  </div><div class="line">                 ui_list_users(msg_read.data);  </div><div class="line">                 ui_input_win_active();  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(msg_read.cmd,<span class="string">"chat"</span>,<span class="number">4</span>)==<span class="number">0</span>)  </div><div class="line">            &#123;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(msg_read.cmd,<span class="string">"chat"</span>,<span class="number">4</span>)==<span class="number">0</span>)  </div><div class="line">            &#123;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">            &#123;  </div><div class="line">            &#125;  </div><div class="line">            <span class="comment">//debug  </span></div><div class="line">  </div><div class="line">            <span class="comment">//todo  </span></div><div class="line">  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    pthread_exit(<span class="literal">NULL</span>);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">net_end</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    close(sockfd);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//chat_ui.h  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CHAT_UI_H_  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CHAT_UI_H_  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;curses.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> WIN_MAX  10  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> USR_MAX  20l  </span></div><div class="line">  </div><div class="line"><span class="comment">//need from other files  </span></div><div class="line"><span class="comment">//char ip[256];  </span></div><div class="line"><span class="comment">//int port;  </span></div><div class="line"><span class="comment">//char name[256];  </span></div><div class="line">  </div><div class="line"><span class="comment">//char *usr_list[USR_MAX]=&#123;"Shenyu",  </span></div><div class="line"><span class="comment">//                            "Wanglm",  </span></div><div class="line"> <span class="comment">//                           NULL&#125;;  </span></div><div class="line">  </div><div class="line">  </div><div class="line"><span class="comment">////  </span></div><div class="line">WINDOW * win[WIN_MAX ]=&#123;<span class="number">0</span>&#125;;<span class="comment">//max open win = 10  </span></div><div class="line"><span class="keyword">int</span> cur_x,cur_y;  </div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_refresh_wins</span><span class="params">()</span> <span class="comment">//refresh all open wins  </span></span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;WIN_MAX ;i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(win [i]!=<span class="literal">NULL</span>)  </div><div class="line">        &#123;  </div><div class="line">            touchwin(win [i]);  </div><div class="line">            wrefresh(win [i]);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//the input always active  </span></div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_input_win_active</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">      touchwin(win [<span class="number">2</span>]);  </div><div class="line">      wrefresh(win [<span class="number">2</span>]);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ui_init</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    initscr();  </div><div class="line">    refresh();  </div><div class="line">  </div><div class="line">    start_color();  </div><div class="line">  </div><div class="line">    init_pair(<span class="number">1</span>,COLOR_BLACK,COLOR_CYAN);  </div><div class="line">    init_pair(<span class="number">2</span>,COLOR_YELLOW,COLOR_BLUE);  </div><div class="line">    init_pair(<span class="number">3</span>,COLOR_YELLOW,COLOR_RED);  </div><div class="line">  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ui_init_wins</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    win[<span class="number">0</span>]=newwin(<span class="number">20</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">0</span>);  </div><div class="line">    win[<span class="number">1</span>]=newwin(<span class="number">20</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">10</span>);  </div><div class="line">    win[<span class="number">2</span>]=newwin(<span class="number">1</span>,<span class="number">60</span>,<span class="number">20</span>,<span class="number">0</span>);  </div><div class="line">  </div><div class="line">  </div><div class="line">    wbkgd(win[<span class="number">0</span>],COLOR_PAIR(<span class="number">1</span>));  </div><div class="line">    wbkgd(win[<span class="number">1</span>],COLOR_PAIR(<span class="number">2</span>)|A_BOLD);  </div><div class="line">    wbkgd(win[<span class="number">2</span>],COLOR_PAIR(<span class="number">3</span>)|A_BOLD);  </div><div class="line">    scrollok(win[<span class="number">0</span>],TRUE);  </div><div class="line">    scrollok(win[<span class="number">1</span>],TRUE);  </div><div class="line">  </div><div class="line">  </div><div class="line">    keypad(win[<span class="number">0</span>],TRUE);  </div><div class="line">    keypad(win[<span class="number">1</span>],TRUE);  </div><div class="line">    keypad(win[<span class="number">2</span>],TRUE);  </div><div class="line">    keypad(stdscr, TRUE);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ui_login</span><span class="params">(<span class="keyword">char</span> *ip,<span class="keyword">int</span> * port,<span class="keyword">char</span> *name)</span>  </span></div><div class="line">&#123;  </div><div class="line">    win[<span class="number">3</span>]=newwin(<span class="number">10</span>,<span class="number">40</span>,<span class="number">5</span>,<span class="number">10</span>);  </div><div class="line">    wbkgd(win[<span class="number">3</span>],COLOR_PAIR(<span class="number">3</span>)|A_BOLD);  </div><div class="line">  </div><div class="line">    wrefresh(win[<span class="number">3</span>]);  </div><div class="line">    mvwprintw(win[<span class="number">3</span>],<span class="number">3</span>,<span class="number">3</span>,<span class="string">"Server   IP:\n"</span>);  </div><div class="line">    mvwprintw(win[<span class="number">3</span>],<span class="number">4</span>,<span class="number">3</span>,<span class="string">"Server port:\n"</span>);  </div><div class="line">    mvwprintw(win[<span class="number">3</span>],<span class="number">5</span>,<span class="number">3</span>,<span class="string">"User name  :\n"</span>);  </div><div class="line">    wrefresh(win[<span class="number">3</span>]);  </div><div class="line">  </div><div class="line">    wmove(win[<span class="number">3</span>],<span class="number">3</span>,<span class="number">16</span>);  </div><div class="line">    wrefresh(win[<span class="number">3</span>]);  </div><div class="line">    wgetnstr(win[<span class="number">3</span>],ip,<span class="number">100</span>);  </div><div class="line">  </div><div class="line">    wmove(win[<span class="number">3</span>],<span class="number">4</span>,<span class="number">16</span>);  </div><div class="line">    wrefresh(win[<span class="number">3</span>]);  </div><div class="line">    wscanw(win[<span class="number">3</span>],<span class="string">"%d"</span>, port);  </div><div class="line">  </div><div class="line">    wmove(win[<span class="number">3</span>],<span class="number">5</span>,<span class="number">16</span>);  </div><div class="line">    wrefresh(win[<span class="number">3</span>]);  </div><div class="line">    wgetnstr(win[<span class="number">3</span>],name,<span class="number">100</span>);  </div><div class="line">    delwin(win[<span class="number">3</span>]);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_list_users</span><span class="params">(<span class="keyword">char</span> * data)</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;  </div><div class="line">wclear(win[<span class="number">0</span>]);  </div><div class="line"> wprintw(win[<span class="number">0</span>],<span class="string">"--users--\n"</span>);  </div><div class="line"> wprintw(win[<span class="number">0</span>],<span class="string">"%s\n"</span>,data);  </div><div class="line">wrefresh(win[<span class="number">0</span>]);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_print_msg</span><span class="params">(<span class="keyword">char</span> *msg)</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">   wprintw(win[<span class="number">1</span>],<span class="string">"%s\n"</span>,msg);  </div><div class="line">   wrefresh(win[<span class="number">1</span>]);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_alert</span><span class="params">(<span class="keyword">char</span> *msg)</span>  </span></div><div class="line">&#123;  </div><div class="line">    win[<span class="number">4</span>]=newwin(<span class="number">10</span>,<span class="number">40</span>,<span class="number">5</span>,<span class="number">10</span>);  </div><div class="line">    wbkgd(win[<span class="number">4</span>],COLOR_PAIR(<span class="number">3</span>)|A_BOLD);  </div><div class="line">    wrefresh(win[<span class="number">4</span>]);  </div><div class="line">    mvwprintw(win[<span class="number">4</span>],<span class="number">5</span>,<span class="number">3</span>,<span class="string">"%s\n   Press any key to continue..."</span>,msg);  </div><div class="line">    wrefresh(win[<span class="number">4</span>]);  </div><div class="line">    getch();  </div><div class="line">    delwin(win[<span class="number">3</span>]);  </div><div class="line">  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_end</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    endwin();  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_promote</span><span class="params">(<span class="keyword">char</span> *msg)</span>  </span></div><div class="line">&#123;  </div><div class="line"> ui_input_win_active();  </div><div class="line"> wclear(win[<span class="number">2</span>]);  </div><div class="line"> wprintw(win[<span class="number">2</span>],<span class="string">"%s"</span>,msg);  </div><div class="line"> wrefresh(win[<span class="number">2</span>]);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_getmsg</span><span class="params">(<span class="keyword">char</span> * buff)</span>  </span></div><div class="line">&#123;  </div><div class="line"> ui_input_win_active();  </div><div class="line"> wgetnstr(win[<span class="number">2</span>],buff,<span class="number">4096</span>);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//sample programs for UI  </span></div><div class="line"><span class="comment">//int main(int argc, char * argv[])  </span></div><div class="line"><span class="comment">//&#123;  </span></div><div class="line"><span class="comment">//  </span></div><div class="line"><span class="comment">//  </span></div><div class="line"><span class="comment">//    ui_init();  </span></div><div class="line"><span class="comment">//    ui_login(ip,&amp;port,name);  </span></div><div class="line"><span class="comment">//  </span></div><div class="line"><span class="comment">//    ui_init_wins();  </span></div><div class="line"><span class="comment">//    ui_list_users( usr_list );  </span></div><div class="line"><span class="comment">//    ui_refresh_wins();  </span></div><div class="line"><span class="comment">//    wprintw(win[1],"IP:%s\nPORT:%d\nNAME:%s",ip,port,name);  </span></div><div class="line"><span class="comment">//    ui_refresh_wins();  </span></div><div class="line"><span class="comment">//  </span></div><div class="line"><span class="comment">//int i=0;  </span></div><div class="line"><span class="comment">//for(i=0;i&lt;100;i++)  </span></div><div class="line"><span class="comment">//    ui_print_msg("This is a test message!");  </span></div><div class="line"><span class="comment">//  </span></div><div class="line"><span class="comment">//  </span></div><div class="line"><span class="comment">//    ui_refresh_wins();  </span></div><div class="line"><span class="comment">//    getch();  </span></div><div class="line"><span class="comment">//&#125;  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// _CHAT_UI_H_</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SHARED_VALS_H_  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _SHARED_VALS_H_  </span></div><div class="line">  </div><div class="line"><span class="keyword">struct</span> msg_st  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">char</span> name[<span class="number">256</span>];<span class="comment">//发送信息人  </span></div><div class="line">    <span class="keyword">char</span> to[<span class="number">256</span>];  <span class="comment">//接收人  </span></div><div class="line">    <span class="keyword">char</span> data[<span class="number">4096</span>];<span class="comment">//数据  </span></div><div class="line">    <span class="keyword">char</span> cmd[<span class="number">256</span>];<span class="comment">//消息的类型  </span></div><div class="line">&#125;;  </div><div class="line">  </div><div class="line"><span class="comment">//login 登陆  </span></div><div class="line"><span class="comment">//offline 服务器即将踢人  </span></div><div class="line"><span class="comment">//user 服务发送的用户列表，数据在data里  </span></div><div class="line"><span class="comment">//chat 表示这是一条消息，数据在data里  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netdb.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ioctl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/select.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXEVENTS 64  </span></div><div class="line">  </div><div class="line"><span class="keyword">struct</span> msg_st  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">char</span> name[<span class="number">256</span>];  </div><div class="line">    <span class="keyword">char</span> to[<span class="number">256</span>];  </div><div class="line">    <span class="keyword">char</span> data[<span class="number">4096</span>];  </div><div class="line">    <span class="keyword">char</span> cmd[<span class="number">256</span>];  </div><div class="line">&#125;;  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_CLIENTS 256  </span></div><div class="line"><span class="keyword">int</span> chat_clients_sets[MAX_CLIENTS]=&#123;<span class="number">0</span>&#125;;  </div><div class="line"><span class="keyword">char</span> *chat_clients_names [MAX_CLIENTS] = &#123;<span class="number">0</span>&#125;;  </div><div class="line"><span class="keyword">int</span> chat_clients_count=<span class="number">0</span>;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">chat_clients_add</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">char</span> * <span class="number">_</span>name)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;MAX_CLIENTS; i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(chat_clients_sets[i]==<span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">            chat_clients_sets[i]=fd;  </div><div class="line">  </div><div class="line">            <span class="keyword">int</span> len=<span class="built_in">strlen</span>(<span class="number">_</span>name)+<span class="number">1</span>;  </div><div class="line">            <span class="keyword">char</span> *ptr=<span class="built_in">malloc</span>(len*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));  </div><div class="line">            <span class="built_in">memset</span>(ptr,<span class="number">0</span>,<span class="keyword">sizeof</span>(ptr));  </div><div class="line">            <span class="built_in">strcpy</span>(ptr,<span class="number">_</span>name);  </div><div class="line">            *(chat_clients_names+i)=ptr;  </div><div class="line">  </div><div class="line">            chat_clients_count++;  </div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">chat_clients_del</span><span class="params">(<span class="keyword">int</span> fd)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;MAX_CLIENTS;i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(chat_clients_sets[i]==fd)  </div><div class="line">        &#123;  </div><div class="line">            chat_clients_sets[i]=<span class="number">0</span>;  </div><div class="line">            <span class="built_in">free</span>(*(chat_clients_names+i));  </div><div class="line">            *(chat_clients_names+i)=<span class="literal">NULL</span>;  </div><div class="line">            chat_clients_count--;  </div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">chat_user_list</span><span class="params">(<span class="keyword">struct</span> msg_st * m)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="built_in">memset</span>( m,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> msg_st));  </div><div class="line">    <span class="built_in">strcpy</span>(m-&gt;cmd,<span class="string">"user"</span>);  </div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;MAX_CLIENTS;i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(*(chat_clients_names+i)!=<span class="literal">NULL</span>)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">char</span> buff[<span class="number">4096</span>];  </div><div class="line">            <span class="built_in">memset</span>(buff,<span class="number">0</span>,<span class="keyword">sizeof</span>(buff));  </div><div class="line">  </div><div class="line">            <span class="built_in">sprintf</span>(buff,<span class="string">"%s\n"</span>,*(chat_clients_names+i));  </div><div class="line">            <span class="built_in">strcat</span>(m-&gt;data,buff);  </div><div class="line">  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">chat_clients_sendto_all</span><span class="params">(<span class="keyword">struct</span> msg_st * mymsg)</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; MAX_CLIENTS; j++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(chat_clients_sets[j]!=<span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"send to %s\n"</span>,(*mymsg).name);  </div><div class="line">          <span class="keyword">int</span>    s = write (chat_clients_sets[j] , mymsg, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> msg_st));  </div><div class="line">            <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">            &#123;  </div><div class="line">                perror (<span class="string">"write"</span>);  </div><div class="line">                <span class="built_in">abort</span> ();  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  </span></div><div class="line"><span class="title">create_and_bind</span> <span class="params">(<span class="keyword">char</span> *port)</span>  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">struct</span> addrinfo hints;  </div><div class="line">    <span class="keyword">struct</span> addrinfo *result, *rp;  </div><div class="line">    <span class="keyword">int</span> s, sfd;  </div><div class="line">  </div><div class="line">    <span class="built_in">memset</span> (&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> addrinfo));  </div><div class="line">    hints.ai_family = AF_UNSPEC;     <span class="comment">/* Return IPv4 and IPv6 choices */</span>  </div><div class="line">    hints.ai_socktype = SOCK_STREAM; <span class="comment">/* We want a TCP socket */</span>  </div><div class="line">    hints.ai_flags = <span class="number">0x0001</span>;  <span class="comment">/* All interfaces */</span>  </div><div class="line">  </div><div class="line">    s = getaddrinfo (<span class="literal">NULL</span>, port, &amp;hints, &amp;result);  </div><div class="line">    <span class="keyword">if</span> (s != <span class="number">0</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"getaddrinfo: %s\n"</span>, gai_strerror (s));  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (rp = result; rp != <span class="literal">NULL</span>; rp = rp-&gt;ai_next)  </div><div class="line">    &#123;  </div><div class="line">        sfd = socket (rp-&gt;ai_family, rp-&gt;ai_socktype, rp-&gt;ai_protocol);  </div><div class="line">        <span class="keyword">if</span> (sfd == <span class="number">-1</span>)  </div><div class="line">            <span class="keyword">continue</span>;  </div><div class="line">        s = bind (sfd, rp-&gt;ai_addr, rp-&gt;ai_addrlen);  </div><div class="line">        <span class="keyword">if</span> (s == <span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">            <span class="comment">/* We managed to bind successfully! */</span>  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        close (sfd);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">if</span> (rp == <span class="literal">NULL</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"Could not bind\n"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">    freeaddrinfo (result);  </div><div class="line">    <span class="keyword">return</span> sfd;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  </span></div><div class="line"><span class="title">make_socket_non_blocking</span> <span class="params">(<span class="keyword">int</span> sfd)</span>  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> flags, s;  </div><div class="line">  </div><div class="line">    flags = fcntl (sfd, F_GETFL, <span class="number">0</span>);  </div><div class="line">    <span class="keyword">if</span> (flags == <span class="number">-1</span>)  </div><div class="line">    &#123;  </div><div class="line">        perror (<span class="string">"fcntl"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    flags |= O_NONBLOCK;  </div><div class="line">    s = fcntl (sfd, F_SETFL, flags);  </div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">    &#123;  </div><div class="line">        perror (<span class="string">"fcntl"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> sfd, s;  </div><div class="line">    <span class="keyword">int</span> efd;  </div><div class="line">    <span class="keyword">struct</span> epoll_event event;  </div><div class="line">    <span class="keyword">struct</span> epoll_event *events;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"Usage: %s [port]\n"</span>, argv[<span class="number">0</span>]);  </div><div class="line">        <span class="built_in">exit</span> (EXIT_FAILURE);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    sfd = create_and_bind (argv[<span class="number">1</span>]);  </div><div class="line">    <span class="keyword">if</span> (sfd == <span class="number">-1</span>)  </div><div class="line">        <span class="built_in">abort</span> ();  </div><div class="line">  </div><div class="line">    s = make_socket_non_blocking (sfd);  </div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">        <span class="built_in">abort</span> ();  </div><div class="line">  </div><div class="line">    s = listen (sfd, SOMAXCONN);  </div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">    &#123;  </div><div class="line">        perror (<span class="string">"listen"</span>);  </div><div class="line">        <span class="built_in">abort</span> ();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    efd = epoll_create1 (<span class="number">0</span>);  </div><div class="line">    <span class="keyword">if</span> (efd == <span class="number">-1</span>)  </div><div class="line">    &#123;  </div><div class="line">        perror (<span class="string">"epoll_create"</span>);  </div><div class="line">        <span class="built_in">abort</span> ();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    event.data.fd = sfd;  </div><div class="line">    event.events = EPOLLIN | EPOLLET;  </div><div class="line">    s = epoll_ctl (efd, EPOLL_CTL_ADD, sfd, &amp;event);  </div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">    &#123;  </div><div class="line">        perror (<span class="string">"epoll_ctl"</span>);  </div><div class="line">        <span class="built_in">abort</span> ();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* Buffer where events are returned */</span>  </div><div class="line">    events = <span class="built_in">calloc</span> (MAXEVENTS, <span class="keyword">sizeof</span> event);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">server_accept_clients</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line"> <span class="comment">/* We have a notification on the listening socket, which </span></div><div class="line">                   means one or more incoming connections. */  </div><div class="line">                <span class="keyword">while</span> (<span class="number">1</span>)  </div><div class="line">                &#123;  </div><div class="line">                    <span class="keyword">struct</span> sockaddr in_addr;  </div><div class="line">                    <span class="keyword">socklen_t</span> in_len;  </div><div class="line">                    <span class="keyword">int</span> infd;  </div><div class="line">                    <span class="keyword">char</span> hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];  </div><div class="line">  </div><div class="line">                    in_len = <span class="keyword">sizeof</span> in_addr;  </div><div class="line">                    infd = accept (sfd, &amp;in_addr, &amp;in_len);  </div><div class="line">                    <span class="keyword">if</span> (infd == <span class="number">-1</span>)  </div><div class="line">                    &#123;  </div><div class="line">                        <span class="keyword">if</span> ((errno == EAGAIN) ||  </div><div class="line">                                (errno == EWOULDBLOCK))  </div><div class="line">                        &#123;  </div><div class="line">                            <span class="comment">/* We have processed all incoming </span></div><div class="line">                               connections. */  </div><div class="line">                            <span class="keyword">break</span>;  </div><div class="line">                        &#125;  </div><div class="line">                        <span class="keyword">else</span>  </div><div class="line">                        &#123;  </div><div class="line">                            perror (<span class="string">"accept"</span>);  </div><div class="line">                            <span class="keyword">break</span>;  </div><div class="line">                        &#125;  </div><div class="line">                    &#125;  </div><div class="line">  </div><div class="line">                     <span class="keyword">int</span> s = getnameinfo (&amp;in_addr, in_len,  </div><div class="line">                                     hbuf, <span class="keyword">sizeof</span> hbuf,  </div><div class="line">                                     sbuf, <span class="keyword">sizeof</span> sbuf,  </div><div class="line">                                     NI_NUMERICHOST | NI_NUMERICSERV);  </div><div class="line">                    <span class="keyword">if</span> (s == <span class="number">0</span>)  </div><div class="line">                    &#123;  </div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"Server: accepted connection on descriptor %d "</span>  </div><div class="line">                               <span class="string">"(host=%s, port=%s)\n"</span>, infd, hbuf, sbuf);  </div><div class="line">                    &#125;  </div><div class="line">  </div><div class="line">                    <span class="comment">/* Make the incoming socket non-blocking and add it to the </span></div><div class="line">                       list of fds to monitor. */  </div><div class="line">                    s = make_socket_non_blocking (infd);  </div><div class="line">                    <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">                        <span class="built_in">abort</span> ();  </div><div class="line">  </div><div class="line">                    event.data.fd = infd;  </div><div class="line">                    event.events = EPOLLIN | EPOLLET;  </div><div class="line">                    s = epoll_ctl (efd, EPOLL_CTL_ADD, infd, &amp;event);  </div><div class="line">                    <span class="comment">//add to clients sets  </span></div><div class="line">                   <span class="comment">// chat_clients_add(infd);  </span></div><div class="line">                    <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">                    &#123;  </div><div class="line">                        perror (<span class="string">"epoll_ctl"</span>);  </div><div class="line">                        <span class="built_in">abort</span> ();  </div><div class="line">                    &#125;  </div><div class="line">                &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span>  </span></div><div class="line"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span>  </div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    init(argc,argv);  </div><div class="line">  </div><div class="line">    <span class="comment">/* The event loop */</span>  </div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">int</span> n, i;  </div><div class="line">  </div><div class="line">        n = epoll_wait (efd, events, MAXEVENTS, <span class="number">-1</span>);  </div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) ||  </div><div class="line">                    (events[i].events &amp; EPOLLHUP) ||  </div><div class="line">                    (!(events[i].events &amp; EPOLLIN)))  </div><div class="line">            &#123;  </div><div class="line">                <span class="comment">/* An error has occured on this fd, or the socket is not </span></div><div class="line">                   ready for reading (why were we notified then?) */  </div><div class="line">                <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"epoll error\n"</span>);  </div><div class="line">                close (events[i].data.fd);  </div><div class="line">                <span class="keyword">continue</span>;  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sfd == events[i].data.fd)  </div><div class="line">            &#123;  </div><div class="line">                server_accept_clients();  </div><div class="line">                <span class="keyword">continue</span>;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">            &#123;  </div><div class="line">                <span class="comment">/* We have data on the fd waiting to be read. Read and </span></div><div class="line">                   display it. We must read whatever data is available </div><div class="line">                   completely, as we are running in edge-triggered mode </div><div class="line">                   and won't get a notification again for the same </div><div class="line">                   data. */  </div><div class="line">                <span class="keyword">int</span> done = <span class="number">0</span>;  </div><div class="line">  </div><div class="line">                <span class="keyword">while</span> (<span class="number">1</span>)  </div><div class="line">                &#123;  </div><div class="line">                    <span class="keyword">ssize_t</span> count;  </div><div class="line">                    <span class="comment">//char buf[512]= &#123;0&#125;;  </span></div><div class="line">                    <span class="keyword">struct</span> msg_st mymsg;  </div><div class="line">                    <span class="built_in">memset</span>((<span class="keyword">void</span> *)&amp;mymsg,<span class="number">0</span>,<span class="keyword">sizeof</span>(mymsg));  </div><div class="line">                    count = read (events[i].data.fd, (<span class="keyword">void</span> *)&amp;mymsg, <span class="keyword">sizeof</span>(mymsg));  </div><div class="line">  </div><div class="line">                    <span class="keyword">if</span> (count == <span class="number">-1</span>)  </div><div class="line">                    &#123;  </div><div class="line">                        <span class="comment">/* If errno == EAGAIN, that means we have read all </span></div><div class="line">                           data. So go back to the main loop. */  </div><div class="line">                        <span class="keyword">if</span> (errno != EAGAIN)  </div><div class="line">                        &#123;  </div><div class="line">                            perror (<span class="string">"read"</span>);  </div><div class="line">                            done = <span class="number">1</span>;  </div><div class="line">                        &#125;  </div><div class="line">                        <span class="keyword">break</span>;  </div><div class="line">                    &#125;  </div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">0</span>)  </div><div class="line">                    &#123;  </div><div class="line">                        <span class="comment">/* End of file. The remote has closed the </span></div><div class="line">                           connection. */  </div><div class="line">                        done = <span class="number">1</span>;  </div><div class="line">                        <span class="keyword">break</span>;  </div><div class="line">                    &#125;  </div><div class="line">                    <span class="comment">/* do a little work here*/</span>  </div><div class="line">  </div><div class="line">                    <span class="comment">/* Write the buffer to standard output */</span>  </div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"Server: msg from client [%s]-[%s]\n"</span>,mymsg.name,mymsg.data);  </div><div class="line">  </div><div class="line">                    <span class="keyword">if</span>(<span class="built_in">strncmp</span>(mymsg.cmd,<span class="string">"login"</span>,<span class="number">5</span>)==<span class="number">0</span>)  </div><div class="line">                    &#123;  </div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"return login ok!\n"</span>);  </div><div class="line">                        <span class="built_in">strcpy</span>(mymsg.data,<span class="string">"ok"</span>);  </div><div class="line">                        chat_clients_add(events[i].data.fd,mymsg.name);  </div><div class="line">                          chat_clients_sendto_all(&amp;mymsg);  </div><div class="line">                          <span class="keyword">continue</span>;  </div><div class="line">                    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">                    <span class="built_in">strcpy</span>(mymsg.cmd,<span class="string">"chat"</span>);  </div><div class="line">                    chat_clients_sendto_all(&amp;mymsg);  </div><div class="line">                    usleep(<span class="number">100000</span>);  </div><div class="line">                    chat_user_list(&amp;mymsg);  </div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"==user==\n%s\n"</span>,mymsg.data);  </div><div class="line">                    chat_clients_sendto_all(&amp;mymsg);  </div><div class="line">  </div><div class="line">                &#125;  </div><div class="line">  </div><div class="line">                <span class="keyword">if</span> (done)  </div><div class="line">                &#123;  </div><div class="line">                    <span class="built_in">printf</span> (<span class="string">"Server: closed connection on descriptor %d\n"</span>,  </div><div class="line">                            events[i].data.fd);  </div><div class="line">  </div><div class="line">                    <span class="comment">/* Closing the descriptor will make epoll remove it </span></div><div class="line">                       from the set of descriptors which are monitored. */  </div><div class="line">                    close (events[i].data.fd);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="built_in">free</span> (events);  </div><div class="line">  </div><div class="line">    close (sfd);  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在linux shell 下切换程序]]></title>
      <url>http://shenyu.wiki/2016/09/17/linux-shell-%E5%88%87%E6%8D%A2%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>我们都知道，在 Windows 上我们可以轻松打开多个窗口并用Alt+TAB进行切换。但是在 Linux Shell下如何实现呢？请看下面的介绍。</p>
<h2 id="让程序在后台执行"><a href="#让程序在后台执行" class="headerlink" title="让程序在后台执行"></a>让程序在后台执行</h2><p>命令： &amp;<br>这个用在一个命令的最后，可以把这个命令放到后台执行。<br>例如 ./program1 &amp;程序便在后台执行了，此时用户可以继续输入其他命令。</p>
<h2 id="把程序放到后台"><a href="#把程序放到后台" class="headerlink" title="把程序放到后台"></a>把程序放到后台</h2><p>命令：ctrl + z<br>可以将一个正在前台执行的命令放到后台，并且暂停。</p>
<h2 id="查看当前有多少在后台运行的命令"><a href="#查看当前有多少在后台运行的命令" class="headerlink" title="查看当前有多少在后台运行的命令"></a>查看当前有多少在后台运行的命令</h2><p>命令：jobs<br>查看当前有多少在后台运行的命令</p>
<h2 id="将后台中的命令调至前台继续运行"><a href="#将后台中的命令调至前台继续运行" class="headerlink" title="将后台中的命令调至前台继续运行"></a>将后台中的命令调至前台继续运行</h2><p>命令：fg<br>如果后台中有多个命令，可以用 fg %jobnumber将选中的命令调出，%jobnumber是通过jobs命令查到的后台正在执行的命令的序号(不是pid)。</p>
<h2 id="将一个在后台暂停的命令，变成继续执行"><a href="#将一个在后台暂停的命令，变成继续执行" class="headerlink" title="将一个在后台暂停的命令，变成继续执行"></a>将一个在后台暂停的命令，变成继续执行</h2><p>命令：bg<br>将一个在后台暂停的命令，变成继续执行<br>如果后台中有多个命令，可以用bg %jobnumber将选中的命令调出，%jobnumber是通过jobs命令查到的后台正在执行的命令的序号(不是pid)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[奥运会成绩管理系统]]></title>
      <url>http://shenyu.wiki/2016/09/17/%E5%A5%A5%E8%BF%90%E4%BC%9A%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>要求编程实现奥运会成绩管理系统，具有如下功能：初始化、录入成绩、取消成绩、查询奖牌榜。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>能够任何时候初始化，清空系统所有数据。<br>函数原型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void init (void);</div></pre></td></tr></table></figure></p>
<h3 id="录入成绩"><a href="#录入成绩" class="headerlink" title="录入成绩"></a>录入成绩</h3><p>录入运动员取得成绩情况。<br>函数原型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool enter_score(int time, int country, char * name, int sport, int medal);</div></pre></td></tr></table></figure></p>
<p>入参：</p>
<ul>
<li>时间： 0-30 单位为天，录入成绩时，时间必须不变或递增</li>
<li>国家：运动员所在的国家，有中、美、日、韩、俄、英</li>
<li>名字：运动员的名字，10个字符以内，只有字母，区分大小写</li>
<li>项目：比赛获奖的项目，1-11，共11个项目。 录入成绩顺序，一个项目必须先录入金牌，再录入银牌，最后录入铜牌。</li>
<li>奖牌：金牌、银牌、铜牌</li>
</ul>
<h3 id="取消成绩"><a href="#取消成绩" class="headerlink" title="取消成绩"></a>取消成绩</h3><p>取消一条取得的成绩，该项目成绩取消后，其他选手的成绩自动上调。如：取消金牌，则原来的银牌变金牌，铜牌变银牌。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bool cancle_score(int time, char * name, int sport);</div><div class="line">void query_score(void);</div></pre></td></tr></table></figure></p>
<h3 id="查询奖牌榜"><a href="#查询奖牌榜" class="headerlink" title="查询奖牌榜"></a>查询奖牌榜</h3><p>按照比赛获奖情况，生成奖牌榜，排序并显示。</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">____________________________________________</div><div class="line">|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |</div><div class="line">|-------------------------------------------|</div><div class="line">|      CHINA|     2|       0|       0|     1|</div><div class="line">|    AMERICA|     2|       0|       0|     1|</div><div class="line">|      KOREA|     0|       2|       0|     3|</div><div class="line">|     RUSSUA|     0|       0|       3|     4|</div><div class="line">|      JAPAN|     0|       0|       0|     5|</div><div class="line">|    ENGLAND|     0|       0|       0|     5|</div><div class="line">____________________________________________</div></pre></td></tr></table></figure></p>
<p>说明：</p>
<ul>
<li>排序规则：先金牌、再银牌、最后铜牌。</li>
<li>相同奖牌情况排序相同，比如并列第一的情况。</li>
</ul>
<a id="more"></a>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> true  1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> bool  int</span></div><div class="line"></div><div class="line"><span class="comment">/* prototype for medal */</span></div><div class="line"><span class="keyword">enum</span> Medal &#123;</div><div class="line">	MEDAL_BEGIN,</div><div class="line">	GOLD,</div><div class="line">	SILVER,</div><div class="line">	BRONZE,</div><div class="line">	MEDAL_END</div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>medal_str &#123;</div><div class="line">	<span class="keyword">int</span> medal;</div><div class="line">	<span class="keyword">char</span> str[<span class="number">256</span>];</div><div class="line">&#125; medal_str;</div><div class="line">medal_str m_s[] = &#123;</div><div class="line">	&#123;MEDAL_BEGIN,<span class="string">"INVALID"</span>&#125;,</div><div class="line">	&#123;GOLD,<span class="string">"GOLD"</span>&#125;,</div><div class="line">	&#123;SILVER,<span class="string">"SILVER"</span>&#125;,</div><div class="line">	&#123;BRONZE,<span class="string">"BRONZE"</span>&#125;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> medal2str(medal) m_s[medal].str</span></div><div class="line"></div><div class="line"><span class="comment">/* prototype for country */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> COUNTRY_COUNT 6</span></div><div class="line"><span class="keyword">enum</span> Country &#123;</div><div class="line">	CHINA,</div><div class="line">	AMERICA,</div><div class="line">	JAPAN,</div><div class="line">	KOREA,</div><div class="line">	RUSSUA,</div><div class="line">	ENGLAND,</div><div class="line">	COUNTRY_END</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>country_str &#123;</div><div class="line">	<span class="keyword">int</span> country;</div><div class="line">	<span class="keyword">char</span> str[<span class="number">256</span>];</div><div class="line">&#125; country_str;</div><div class="line"></div><div class="line">country_str c_s[] = &#123;</div><div class="line">	&#123;CHINA, <span class="string">"CHINA"</span>&#125;,</div><div class="line">	&#123;AMERICA, <span class="string">"AMERICA"</span>&#125;,</div><div class="line">	&#123;JAPAN,<span class="string">"JAPAN"</span>&#125;,</div><div class="line">	&#123;KOREA,<span class="string">"KOREA"</span>&#125;,</div><div class="line">	&#123;RUSSUA,<span class="string">"RUSSUA"</span>&#125;,</div><div class="line">	&#123;ENGLAND,<span class="string">"ENGLAND"</span>&#125;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> country2str(country) c_s[country].str</span></div><div class="line"></div><div class="line"><span class="comment">/* prototype for sport */</span></div><div class="line"><span class="keyword">enum</span> Sport &#123;</div><div class="line">	SPORT_BEGIN,</div><div class="line">	S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,</div><div class="line">	SPORT_END</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* prototype for game record */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME_LEN 10</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>Record &#123;</div><div class="line">	<span class="keyword">int</span> time;</div><div class="line">	<span class="keyword">int</span> country;</div><div class="line">	<span class="keyword">char</span> name[NAME_LEN+<span class="number">1</span>];</div><div class="line">	<span class="keyword">int</span> sport;</div><div class="line">	<span class="keyword">int</span> medal;</div><div class="line">	<span class="keyword">bool</span> valid;	</div><div class="line">&#125; Record;</div><div class="line"></div><div class="line"><span class="comment">/* prototype for medal list */</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>medal_list &#123;</div><div class="line">	<span class="keyword">int</span> country;</div><div class="line">	<span class="keyword">int</span> gold;</div><div class="line">	<span class="keyword">int</span> silver;</div><div class="line">	<span class="keyword">int</span> bronze;</div><div class="line">	<span class="keyword">int</span> rank;</div><div class="line">&#125; MedalList;</div><div class="line"></div><div class="line"><span class="comment">/* Global vars */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REC_LEN 1024   <span class="comment">/* how many record can hold */</span></span></div><div class="line">Record record[REC_LEN];<span class="comment">/* where to hold all records */</span></div><div class="line"><span class="keyword">int</span>    current_record; <span class="comment">/* current count of record */</span></div><div class="line"><span class="keyword">int</span>    sys_time;       <span class="comment">/* system time */</span></div><div class="line">MedalList medal_list[COUNTRY_COUNT]; <span class="comment">/* country's medal list */</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *  API of this program</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">enter_score</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> country, <span class="keyword">char</span> * name, <span class="keyword">int</span> sport, <span class="keyword">int</span> medal)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cancle_score</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">char</span> * name, <span class="keyword">int</span> sport)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_score</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Internals</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_name</span><span class="params">(<span class="keyword">int</span> country, <span class="keyword">char</span> * name)</span></span>; <span class="comment">/* check if name is ok */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err_report</span><span class="params">(<span class="keyword">char</span> * msg)</span>   <span class="comment">/* report error use for debug */</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"ERROR:%s\n"</span>,msg);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_sport_name_medal</span><span class="params">(<span class="keyword">int</span> sport,<span class="keyword">char</span>* name, <span class="keyword">int</span> medal)</span></span>;<span class="comment">/* check lots of conflicting cases */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_record</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">/* print the record arry */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen_medal_list</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">/* print the medal list */</span></div><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">comp_medal_list</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="number">_</span>a, <span class="keyword">const</span> <span class="keyword">void</span> * <span class="number">_b</span>)</span></span>; <span class="comment">/* use for sort the medal list*/</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Test cases</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test_insert</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test_cancle</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST(func) \</span></div><div class="line">	printf(<span class="meta-string">"===================================================\n"</span>);\</div><div class="line">	printf(<span class="meta-string">"                Test %d                            \n"</span>,all_tests);\</div><div class="line">	printf(<span class="meta-string">"===================================================\n"</span>);\</div><div class="line">	<span class="meta-keyword">if</span> (func()) \</div><div class="line">	&#123;\</div><div class="line">		passed_tests++; \</div><div class="line">	printf(<span class="meta-string">"====Test %d PASSED=================================\n\n"</span>,all_tests);\</div><div class="line">	&#125;\</div><div class="line">	<span class="meta-keyword">else</span>\</div><div class="line">	&#123;\</div><div class="line">	printf(<span class="meta-string">"====Test %d FAILED=================================\n\n"</span>,all_tests);\</div><div class="line">	&#125;\</div><div class="line">	all_tests++;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; REC_LEN; i++)</div><div class="line">	&#123;</div><div class="line">		record[i].time = <span class="number">0</span>;</div><div class="line">		record[i].country = <span class="number">0</span>;</div><div class="line">		<span class="built_in">memset</span>(record[i].name,<span class="string">'\0'</span>,<span class="keyword">sizeof</span>(record[i].name));</div><div class="line">		record[i].sport = <span class="number">0</span>;</div><div class="line">		record[i].medal = <span class="number">0</span>;</div><div class="line">		record[i].valid = <span class="literal">true</span>; <span class="comment">/* default is true ,later can be set to false*/</span></div><div class="line">	&#125;</div><div class="line">	sys_time = <span class="number">0</span>;</div><div class="line">	current_record = <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">enter_score</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> country, <span class="keyword">char</span> * name, <span class="keyword">int</span> sport, <span class="keyword">int</span> medal)</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"DEBUG: enter_score(time=%d,country=%s,name=%s,sport=%d,medal=%s)\n"</span>,</div><div class="line">						time, country2str(country), name, sport, medal2str(medal));</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	<span class="comment">/* check time within 0,30 */</span></div><div class="line">	<span class="keyword">if</span> (time &lt; <span class="number">0</span> || time &gt; <span class="number">30</span>)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"time should be within [0,30]"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check sys_time: time should &gt;= sys_time */</span></div><div class="line">	<span class="keyword">if</span> (time &lt; sys_time)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"time should &gt;= sys_time"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if name is valied */</span></div><div class="line">	<span class="keyword">if</span> (!check_name(country, name))</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if country valid */</span></div><div class="line">	<span class="keyword">if</span> (country &gt;= COUNTRY_END || country &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"country is not valid"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if sport is valid */</span></div><div class="line">	<span class="keyword">if</span> (sport &gt;= SPORT_END || sport &lt;= SPORT_BEGIN)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"sport is not valid"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if medal is valid */</span></div><div class="line">	<span class="keyword">if</span> (medal &gt;= MEDAL_END || medal &lt;= MEDAL_BEGIN)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"medal is not valid"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* in the same sport: gold first, then silver, bronze come last */</span></div><div class="line">	<span class="comment">/* check if sport medal aready have */</span></div><div class="line">	<span class="keyword">if</span> (!check_sport_name_medal(sport,name, medal))</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if we reach REC_LEN */</span></div><div class="line">	<span class="keyword">if</span> (current_record == REC_LEN)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"no space for a new record"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* check ok, do the actual entry*/</span></div><div class="line">	record[current_record].country = country;</div><div class="line">	record[current_record].sport   = sport;</div><div class="line">	record[current_record].medal   = medal;</div><div class="line">	record[current_record].time    = time;</div><div class="line">	<span class="built_in">memcpy</span>(record[current_record].name,name,<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="built_in">strlen</span>(name));</div><div class="line">	current_record++;</div><div class="line"></div><div class="line">	<span class="comment">/* update the systime */</span></div><div class="line">	sys_time = time;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;		</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_name</span><span class="params">(<span class="keyword">int</span> country, <span class="keyword">char</span> * name)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i, len;</div><div class="line">	<span class="comment">/* check name length */</span></div><div class="line">	<span class="keyword">if</span> (!name)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"name can not be NULL"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	len = <span class="built_in">strlen</span>(name);</div><div class="line">	<span class="keyword">if</span> (len &gt; NAME_LEN)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"name len should be 1 to 10"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/* check if name contain ony letters */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (!<span class="built_in">isalpha</span>(name[i]))</div><div class="line">		&#123;</div><div class="line">			err_report(<span class="string">"name contains char that is not alpha"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if already have the same name in another country*/</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(record[i].name,name) == <span class="number">0</span> &amp;&amp; record[i].country != country)</div><div class="line">		&#123;</div><div class="line">			err_report(<span class="string">"player cannot play in different country"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;		</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_sport_name_medal</span><span class="params">(<span class="keyword">int</span> sport, <span class="keyword">char</span> * name, <span class="keyword">int</span> medal)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">int</span> found_gold = <span class="literal">false</span>;</div><div class="line">	<span class="keyword">int</span> found_silver = <span class="literal">false</span>;</div><div class="line">	<span class="keyword">int</span> found_bronze = <span class="literal">false</span>;</div><div class="line">	<span class="comment">/* if the record is empty */</span></div><div class="line">	<span class="keyword">if</span> (current_record == <span class="number">0</span> &amp;&amp; medal != GOLD)</div><div class="line">	&#123;</div><div class="line">			err_report(<span class="string">"GOLD for this sport  must come first"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* the first record of the game must be gold */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp; record[i].medal == GOLD)</div><div class="line">		&#123;</div><div class="line">			found_gold = <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp; record[i].medal == SILVER)</div><div class="line">		&#123;</div><div class="line">			found_silver = <span class="literal">true</span>;	</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp; record[i].medal == BRONZE)</div><div class="line">		&#123;</div><div class="line">			found_bronze = <span class="literal">true</span>;	</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* the record is not empty loop the record */</span>	</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp; </div><div class="line">			<span class="built_in">strcmp</span>(name,record[i].name) == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			err_report(<span class="string">"sport has played by the player"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp; </div><div class="line">			record[i].medal == medal &amp;&amp;</div><div class="line">			record[i].valid)</div><div class="line">		&#123;</div><div class="line">			err_report(<span class="string">"sport has already has the medal"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp;</div><div class="line">			record[i].medal == medal &amp;&amp;</div><div class="line">			!record[i].valid         &amp;&amp;</div><div class="line">			<span class="built_in">strcmp</span>(name,record[i].name) == <span class="number">0</span>)</div><div class="line">	 	&#123;</div><div class="line">			err_report(<span class="string">"current sport and medal win by player has been cancled"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp;</div><div class="line">			record[i].medal != MEDAL_BEGIN &amp;&amp;</div><div class="line">			record[i].valid    	     &amp;&amp;</div><div class="line">			<span class="built_in">strcmp</span>(name,record[i].name) == <span class="number">0</span>)</div><div class="line">	 	&#123;</div><div class="line">			err_report(<span class="string">"medal for this sport cannot be won by same player twice"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp; record[i].valid)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span> (medal == GOLD &amp;&amp; !found_gold)</div><div class="line">			&#123;</div><div class="line">				<span class="comment">/* there are already silver or bronze in this sport*/</span></div><div class="line">				<span class="keyword">if</span> (record[i].medal == SILVER ||</div><div class="line">					record[i].medal == BRONZE)</div><div class="line">				&#123;</div><div class="line">					err_report(<span class="string">"GOLD for this sport must be entered first"</span>);</div><div class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (medal == SILVER &amp;&amp; !found_silver &amp;&amp; found_gold)</div><div class="line">			&#123;</div><div class="line">				<span class="comment">/* there are already bronze in this sport*/</span></div><div class="line">				<span class="keyword">if</span> (record[i].medal == BRONZE)</div><div class="line">				&#123;</div><div class="line">					err_report(<span class="string">"SILVER for this sport  must be entered second"</span>);</div><div class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">	</div><div class="line">			<span class="keyword">if</span> (medal == BRONZE &amp;&amp; !found_bronze &amp;&amp; found_silver &amp;&amp; found_gold)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span>  <span class="title">cancle_score</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">char</span> * name, <span class="keyword">int</span> sport)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i , flag = <span class="literal">false</span>, found = <span class="literal">false</span>;</div><div class="line">	<span class="keyword">int</span> cancled_medal;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"DEBUG:cancle_score(time=%d,name=%s,sport=%d)\n"</span>,</div><div class="line">			time,name,sport);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	<span class="keyword">if</span> (!name)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"name cannot be null"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check time within 0,30 */</span></div><div class="line">	<span class="keyword">if</span> (time &lt; <span class="number">0</span> || time &gt; <span class="number">30</span>)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"time should be within [0,30]"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if sport is valid */</span></div><div class="line">	<span class="keyword">if</span> (sport &gt;= SPORT_END || sport &lt;= SPORT_BEGIN)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"sport is not valid"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record ; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (record[i].time == time &amp;&amp;</div><div class="line">			record[i].sport == sport &amp;&amp;</div><div class="line">			(<span class="built_in">strcmp</span>(record[i].name, name) == <span class="number">0</span>))</div><div class="line">		&#123;</div><div class="line">			found = <span class="literal">true</span>;</div><div class="line">			<span class="keyword">if</span> (record[i].valid)</div><div class="line">			&#123;</div><div class="line">				record[i].valid = <span class="literal">false</span>;</div><div class="line">				cancled_medal   = record[i].medal;</div><div class="line">				flag = <span class="literal">true</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line"></div><div class="line">				flag = <span class="literal">false</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!found)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"no matching score to be cancled"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!flag)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"score already cancled"</span>);	</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* do upgrade work */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (sport == record[i].sport &amp;&amp; record[i].valid)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">switch</span>(cancled_medal)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">case</span> GOLD:</div><div class="line">					<span class="keyword">if</span> (record[i].medal == SILVER ||</div><div class="line">						record[i].medal == BRONZE)</div><div class="line">					&#123;</div><div class="line">						record[i].medal --;</div><div class="line">					&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> SILVER:</div><div class="line">					<span class="keyword">if</span> (record[i].medal == BRONZE)</div><div class="line">					&#123;</div><div class="line">						record[i].medal --;</div><div class="line">					&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> BRONZE:</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_record</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"____________________________________________________________\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"|-----------------------------------------------------------|\n"</span>);</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record ; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"|%9d|%10s |%8d |%10s|%8s | %5s|\n"</span>,</div><div class="line">				record[i].time,</div><div class="line">				country2str(record[i].country),</div><div class="line">				record[i].sport,</div><div class="line">				record[i].name,</div><div class="line">				medal2str(record[i].medal),</div><div class="line">				record[i].valid == <span class="literal">true</span> ? <span class="string">"true"</span> : <span class="string">"false"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"____________________________________________________________\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">comp_medal_list</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="number">_</span>a, <span class="keyword">const</span> <span class="keyword">void</span> * <span class="number">_b</span>)</span></span></div><div class="line">&#123;</div><div class="line">	MedalList* a = (MedalList*) <span class="number">_</span>a;</div><div class="line">	MedalList* b = (MedalList*) <span class="number">_b</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (a-&gt;gold &gt; b-&gt;gold)</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">if</span> (a-&gt;gold &lt; b-&gt;gold)</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (a-&gt;silver &gt; b-&gt;silver)</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">if</span> (a-&gt;silver &lt; b-&gt;silver)</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (a-&gt;bronze &gt; b-&gt;bronze)</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">if</span> (a-&gt;bronze &lt; b-&gt;bronze)</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen_medal_list</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">int</span> rank_skip = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> curr_rank = <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="comment">/* clear the medal list first */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; COUNTRY_COUNT; i++)</div><div class="line">	&#123;</div><div class="line">		medal_list[i].country = i;</div><div class="line">		medal_list[i].gold    = <span class="number">0</span>;</div><div class="line">		medal_list[i].silver  = <span class="number">0</span>;</div><div class="line">		medal_list[i].bronze  = <span class="number">0</span>;</div><div class="line">		medal_list[i].rank    = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* add the record into medal list */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record ; i++)</div><div class="line">	&#123;</div><div class="line">		</div><div class="line">		<span class="comment">/* only check for valid record */</span></div><div class="line">		<span class="keyword">if</span> (!record[i].valid)</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">		medal_list[record[i].country].gold  += record[i].medal == GOLD   ? <span class="number">1</span>:<span class="number">0</span>; </div><div class="line">		medal_list[record[i].country].silver+= record[i].medal == SILVER ? <span class="number">1</span>:<span class="number">0</span>; </div><div class="line">		medal_list[record[i].country].bronze+= record[i].medal == BRONZE ? <span class="number">1</span>:<span class="number">0</span>; </div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/* sort the medal list, ignore the first one */</span></div><div class="line">	qsort(medal_list, COUNTRY_COUNT, <span class="keyword">sizeof</span>(MedalList), comp_medal_list);</div><div class="line">	</div><div class="line">	medal_list[<span class="number">0</span>].rank = curr_rank;	</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; COUNTRY_COUNT; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">/* if rank is the same */</span></div><div class="line">		<span class="keyword">if</span> (medal_list[i].gold == medal_list[i<span class="number">-1</span>].gold &amp;&amp;</div><div class="line">			medal_list[i].silver == medal_list[i<span class="number">-1</span>].silver &amp;&amp;	</div><div class="line">			medal_list[i].bronze == medal_list[i<span class="number">-1</span>].bronze )	</div><div class="line">		&#123;</div><div class="line">			medal_list[i].rank = curr_rank;</div><div class="line">			rank_skip++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			curr_rank++;</div><div class="line">			medal_list[i].rank = curr_rank + rank_skip;</div><div class="line">			curr_rank += rank_skip;			</div><div class="line">			rank_skip = <span class="number">0</span>;</div><div class="line">	</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_score</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="comment">/* do the hard work */</span></div><div class="line">	gen_medal_list();</div><div class="line"></div><div class="line">	<span class="comment">/* ok, output the table */</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"____________________________________________\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"|-------------------------------------------|\n"</span>);</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; COUNTRY_COUNT; i++)	</div><div class="line">	&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"|%11s|%6d|%8d|%8d|%6d|\n"</span>,</div><div class="line">			country2str(medal_list[i].country),</div><div class="line">			medal_list[i].gold,</div><div class="line">			medal_list[i].silver,</div><div class="line">			medal_list[i].bronze,</div><div class="line">			medal_list[i].rank</div><div class="line">			);</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"____________________________________________\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/* below are all test cases */</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test_insert</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	init();</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"yshen"</span>,S1,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">1</span>,CHINA,<span class="string">"lmwang"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">1</span>,AMERICA,<span class="string">"xiaohua"</span>,S3,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">2</span>,AMERICA,<span class="string">"xiaoming"</span>,S4,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">2</span>,KOREA,<span class="string">"ddf"</span>,S5,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">2</span>,KOREA,<span class="string">"xiaox"</span>,S6,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">3</span>,RUSSUA,<span class="string">"xtyu"</span>,S7,BRONZE))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">3</span>,RUSSUA,<span class="string">"xtyu"</span>,S8,BRONZE))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">3</span>,RUSSUA,<span class="string">"xtyu"</span>,S9,BRONZE))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	print_record();</div><div class="line">	query_score();</div><div class="line">	<span class="comment">/* should fail: invalid name */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">3</span>,CHINA,<span class="string">"1234"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* should fail: invalid time */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">0</span>,CHINA,<span class="string">"yshen"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* should fail: medal already won by others */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">6</span>,CHINA,<span class="string">"player"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* should fail: yshen cannot win twice one game */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">6</span>,CHINA,<span class="string">"yshen"</span>,S1,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* fail: yshen cannot play in two different country */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">6</span>,AMERICA,<span class="string">"yshen"</span>,S8,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* fail: sport is not valid */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">6</span>,AMERICA,<span class="string">"llt"</span>,<span class="number">100</span>,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* fail: name len=11 is not valid*/</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">6</span>,AMERICA,<span class="string">"abcdefghijk"</span>,S10,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* fail: name len=11 is not valid*/</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">6</span>,AMERICA,<span class="literal">NULL</span>,S10,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	print_record();</div><div class="line">	query_score();</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test_cancle</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	init();</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* only can be entered once */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">1</span>,CHINA,<span class="string">"lmwang"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!cancle_score(<span class="number">1</span>,<span class="string">"lmwang"</span>,S2))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* cancel again should fail */</span></div><div class="line">	<span class="keyword">if</span> (cancle_score(<span class="number">1</span>,<span class="string">"lmwang"</span>,S2))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* cancled score cannot be entered again */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">1</span>,CHINA,<span class="string">"lmwang"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* S2 can be win by others */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">1</span>,CHINA,<span class="string">"shenyu"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	print_record();</div><div class="line">	<span class="comment">/* player can win other game  */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">1</span>,CHINA,<span class="string">"lmwang"</span>,S3,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	print_record();</div><div class="line">	<span class="comment">/* cancled score should not be inside */</span></div><div class="line">	query_score();</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test_gold_order</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	init();</div><div class="line"></div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* ok, first rec */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* player cannot win silver and gold of same game */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* ok, second rec */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S2,BRONZE))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* gold cannot come after bronze */</span>	</div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">0</span>,CHINA,<span class="string">"wlm"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	print_record();</div><div class="line">	query_score();</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test_upgrade</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	init();</div><div class="line">	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"wanglim"</span>,S1,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!cancle_score(<span class="number">0</span>,<span class="string">"shenyu"</span>,S1))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,SILVER))</div><div class="line">	&#123;</div><div class="line">		print_record();</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"xiaoqia"</span>,S1,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"xiaohua"</span>,S1,BRONZE))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!cancle_score(<span class="number">0</span>,<span class="string">"wanglim"</span>,S1))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	print_record();</div><div class="line">	query_score();</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* TESTS */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> all_tests = <span class="number">0</span>, passed_tests = <span class="number">0</span>;</div><div class="line">	TEST(test_insert);</div><div class="line">	TEST(test_cancle);</div><div class="line">	TEST(test_gold_order);</div><div class="line">	TEST(test_upgrade);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"====Test Results===================================\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"all    tests: %d\n"</span>, all_tests);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"passed tests: %d\n"</span>, passed_tests);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"===================================================\n"</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div></pre></td><td class="code"><pre><div class="line">===================================================</div><div class="line">                Test 0                            </div><div class="line">===================================================</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=yshen,sport=1,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=1,country=CHINA,name=lmwang,sport=2,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=1,country=AMERICA,name=xiaohua,sport=3,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=2,country=AMERICA,name=xiaoming,sport=4,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=2,country=KOREA,name=ddf,sport=5,medal=SILVER)</div><div class="line">DEBUG: enter_score(time=2,country=KOREA,name=xiaox,sport=6,medal=SILVER)</div><div class="line">DEBUG: enter_score(time=3,country=RUSSUA,name=xtyu,sport=7,medal=BRONZE)</div><div class="line">DEBUG: enter_score(time=3,country=RUSSUA,name=xtyu,sport=8,medal=BRONZE)</div><div class="line">DEBUG: enter_score(time=3,country=RUSSUA,name=xtyu,sport=9,medal=BRONZE)</div><div class="line">____________________________________________________________</div><div class="line">|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |</div><div class="line">|-----------------------------------------------------------|</div><div class="line">|        0|     CHINA |       1 |     yshen|    GOLD |  true|</div><div class="line">|        1|     CHINA |       2 |    lmwang|    GOLD |  true|</div><div class="line">|        1|   AMERICA |       3 |   xiaohua|    GOLD |  true|</div><div class="line">|        2|   AMERICA |       4 |  xiaoming|    GOLD |  true|</div><div class="line">|        2|     KOREA |       5 |       ddf|  SILVER |  true|</div><div class="line">|        2|     KOREA |       6 |     xiaox|  SILVER |  true|</div><div class="line">|        3|    RUSSUA |       7 |      xtyu|  BRONZE |  true|</div><div class="line">|        3|    RUSSUA |       8 |      xtyu|  BRONZE |  true|</div><div class="line">|        3|    RUSSUA |       9 |      xtyu|  BRONZE |  true|</div><div class="line">____________________________________________________________</div><div class="line">____________________________________________</div><div class="line">|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |</div><div class="line">|-------------------------------------------|</div><div class="line">|      CHINA|     2|       0|       0|     1|</div><div class="line">|    AMERICA|     2|       0|       0|     1|</div><div class="line">|      KOREA|     0|       2|       0|     3|</div><div class="line">|     RUSSUA|     0|       0|       3|     4|</div><div class="line">|      JAPAN|     0|       0|       0|     5|</div><div class="line">|    ENGLAND|     0|       0|       0|     5|</div><div class="line">____________________________________________</div><div class="line">DEBUG: enter_score(time=3,country=CHINA,name=1234,sport=2,medal=GOLD)</div><div class="line">ERROR:name contains char that is not alpha</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=yshen,sport=2,medal=GOLD)</div><div class="line">ERROR:time should &gt;= sys_time</div><div class="line">DEBUG: enter_score(time=6,country=CHINA,name=player,sport=2,medal=GOLD)</div><div class="line">ERROR:sport has already has the medal</div><div class="line">DEBUG: enter_score(time=6,country=CHINA,name=yshen,sport=1,medal=GOLD)</div><div class="line">ERROR:sport has played by the player</div><div class="line">DEBUG: enter_score(time=6,country=AMERICA,name=yshen,sport=8,medal=GOLD)</div><div class="line">ERROR:player cannot play in different country</div><div class="line">DEBUG: enter_score(time=6,country=AMERICA,name=llt,sport=100,medal=GOLD)</div><div class="line">ERROR:sport is not valid</div><div class="line">DEBUG: enter_score(time=6,country=AMERICA,name=abcdefghijk,sport=10,medal=SILVER)</div><div class="line">ERROR:name len should be 1 to 10</div><div class="line">DEBUG: enter_score(time=6,country=AMERICA,name=(null),sport=10,medal=SILVER)</div><div class="line">ERROR:name can not be NULL</div><div class="line">____________________________________________________________</div><div class="line">|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |</div><div class="line">|-----------------------------------------------------------|</div><div class="line">|        0|     CHINA |       1 |     yshen|    GOLD |  true|</div><div class="line">|        1|     CHINA |       2 |    lmwang|    GOLD |  true|</div><div class="line">|        1|   AMERICA |       3 |   xiaohua|    GOLD |  true|</div><div class="line">|        2|   AMERICA |       4 |  xiaoming|    GOLD |  true|</div><div class="line">|        2|     KOREA |       5 |       ddf|  SILVER |  true|</div><div class="line">|        2|     KOREA |       6 |     xiaox|  SILVER |  true|</div><div class="line">|        3|    RUSSUA |       7 |      xtyu|  BRONZE |  true|</div><div class="line">|        3|    RUSSUA |       8 |      xtyu|  BRONZE |  true|</div><div class="line">|        3|    RUSSUA |       9 |      xtyu|  BRONZE |  true|</div><div class="line">____________________________________________________________</div><div class="line">____________________________________________</div><div class="line">|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |</div><div class="line">|-------------------------------------------|</div><div class="line">|      CHINA|     2|       0|       0|     1|</div><div class="line">|    AMERICA|     2|       0|       0|     1|</div><div class="line">|      KOREA|     0|       2|       0|     3|</div><div class="line">|     RUSSUA|     0|       0|       3|     4|</div><div class="line">|      JAPAN|     0|       0|       0|     5|</div><div class="line">|    ENGLAND|     0|       0|       0|     5|</div><div class="line">____________________________________________</div><div class="line">====Test 0 PASSED=================================</div><div class="line"></div><div class="line">===================================================</div><div class="line">                Test 1                            </div><div class="line">===================================================</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=GOLD)</div><div class="line">ERROR:sport has played by the player</div><div class="line">DEBUG: enter_score(time=1,country=CHINA,name=lmwang,sport=2,medal=GOLD)</div><div class="line">DEBUG:cancle_score(time=1,name=lmwang,sport=2)</div><div class="line">DEBUG:cancle_score(time=1,name=lmwang,sport=2)</div><div class="line">ERROR:score already cancled</div><div class="line">DEBUG: enter_score(time=1,country=CHINA,name=lmwang,sport=2,medal=GOLD)</div><div class="line">ERROR:sport has played by the player</div><div class="line">DEBUG: enter_score(time=1,country=CHINA,name=shenyu,sport=2,medal=GOLD)</div><div class="line">____________________________________________________________</div><div class="line">|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |</div><div class="line">|-----------------------------------------------------------|</div><div class="line">|        0|     CHINA |       1 |    shenyu|    GOLD |  true|</div><div class="line">|        1|     CHINA |       2 |    lmwang|    GOLD | false|</div><div class="line">|        1|     CHINA |       2 |    shenyu|    GOLD |  true|</div><div class="line">____________________________________________________________</div><div class="line">DEBUG: enter_score(time=1,country=CHINA,name=lmwang,sport=3,medal=GOLD)</div><div class="line">____________________________________________________________</div><div class="line">|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |</div><div class="line">|-----------------------------------------------------------|</div><div class="line">|        0|     CHINA |       1 |    shenyu|    GOLD |  true|</div><div class="line">|        1|     CHINA |       2 |    lmwang|    GOLD | false|</div><div class="line">|        1|     CHINA |       2 |    shenyu|    GOLD |  true|</div><div class="line">|        1|     CHINA |       3 |    lmwang|    GOLD |  true|</div><div class="line">____________________________________________________________</div><div class="line">____________________________________________</div><div class="line">|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |</div><div class="line">|-------------------------------------------|</div><div class="line">|      CHINA|     3|       0|       0|     1|</div><div class="line">|    AMERICA|     0|       0|       0|     2|</div><div class="line">|      JAPAN|     0|       0|       0|     2|</div><div class="line">|      KOREA|     0|       0|       0|     2|</div><div class="line">|     RUSSUA|     0|       0|       0|     2|</div><div class="line">|    ENGLAND|     0|       0|       0|     2|</div><div class="line">____________________________________________</div><div class="line">====Test 1 PASSED=================================</div><div class="line"></div><div class="line">===================================================</div><div class="line">                Test 2                            </div><div class="line">===================================================</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=SILVER)</div><div class="line">ERROR:GOLD for this sport  must come first</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=SILVER)</div><div class="line">ERROR:sport has played by the player</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=2,medal=BRONZE)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=wlm,sport=2,medal=GOLD)</div><div class="line">ERROR:GOLD for this sport must be entered first</div><div class="line">____________________________________________________________</div><div class="line">|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |</div><div class="line">|-----------------------------------------------------------|</div><div class="line">|        0|     CHINA |       1 |    shenyu|    GOLD |  true|</div><div class="line">|        0|     CHINA |       2 |    shenyu|  BRONZE |  true|</div><div class="line">____________________________________________________________</div><div class="line">____________________________________________</div><div class="line">|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |</div><div class="line">|-------------------------------------------|</div><div class="line">|      CHINA|     1|       0|       1|     1|</div><div class="line">|    AMERICA|     0|       0|       0|     2|</div><div class="line">|      JAPAN|     0|       0|       0|     2|</div><div class="line">|      KOREA|     0|       0|       0|     2|</div><div class="line">|     RUSSUA|     0|       0|       0|     2|</div><div class="line">|    ENGLAND|     0|       0|       0|     2|</div><div class="line">____________________________________________</div><div class="line">====Test 2 PASSED=================================</div><div class="line"></div><div class="line">===================================================</div><div class="line">                Test 3                            </div><div class="line">===================================================</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=2,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=wanglim,sport=1,medal=SILVER)</div><div class="line">DEBUG:cancle_score(time=0,name=shenyu,sport=1)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=SILVER)</div><div class="line">ERROR:sport has played by the player</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=xiaoqia,sport=1,medal=SILVER)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=xiaohua,sport=1,medal=BRONZE)</div><div class="line">DEBUG:cancle_score(time=0,name=wanglim,sport=1)</div><div class="line">____________________________________________________________</div><div class="line">|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |</div><div class="line">|-----------------------------------------------------------|</div><div class="line">|        0|     CHINA |       1 |    shenyu|    GOLD | false|</div><div class="line">|        0|     CHINA |       2 |    shenyu|    GOLD |  true|</div><div class="line">|        0|     CHINA |       1 |   wanglim|    GOLD | false|</div><div class="line">|        0|     CHINA |       1 |   xiaoqia|    GOLD |  true|</div><div class="line">|        0|     CHINA |       1 |   xiaohua|  SILVER |  true|</div><div class="line">____________________________________________________________</div><div class="line">____________________________________________</div><div class="line">|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |</div><div class="line">|-------------------------------------------|</div><div class="line">|      CHINA|     2|       1|       0|     1|</div><div class="line">|    AMERICA|     0|       0|       0|     2|</div><div class="line">|      JAPAN|     0|       0|       0|     2|</div><div class="line">|      KOREA|     0|       0|       0|     2|</div><div class="line">|     RUSSUA|     0|       0|       0|     2|</div><div class="line">|    ENGLAND|     0|       0|       0|     2|</div><div class="line">____________________________________________</div><div class="line">====Test 3 PASSED=================================</div><div class="line"></div><div class="line">====Test Results===================================</div><div class="line">all    tests: 4</div><div class="line">passed tests: 4</div><div class="line">===================================================</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mathjax公式]]></title>
      <url>http://shenyu.wiki/2016/09/17/Mathjax%E5%85%AC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>利用mathjax可以方便的输入latex格式的公式，例如输入如下文本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$E=mc^2$$</div></pre></td></tr></table></figure></p>
<p>就会自动生成如下格式化的公式<br>$$E=mc^2$$</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[长城 Great Wall]]></title>
      <url>http://shenyu.wiki/2016/09/15/%E9%95%BF%E5%9F%8E/</url>
      <content type="html"><![CDATA[<blockquote>
<p>长城（Great Wall）又称万里长城，是中国古代的军事防御工程。长城修筑的历史可上溯到西周时期，发生在首都镐京（今陕西西安）的著名的典故“烽火戏诸侯”就源于此。春秋战国时期列国争霸，互相防守，长城修筑进入第一个高潮，但此时修筑的长度都比较短。秦灭六国统一天下后，秦始皇连接和修缮战国长城，始有万里长城之称。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/gzsbxd49ixdcm1yjk6p4kbma/2016-10-04%2013-05-31%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$八达岭长城$$</p>
<p>八达岭长城，位于北京市延庆区军都山关沟古道北口。是中国古代伟大的防御工程万里长城的重要组成部分，是明长城的一个隘口。八达岭长城为居庸关的重要前哨，古称“居庸之险不在关而在八达岭”。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/cu9g6kwjxit08k639it2btj4/2016-10-04%2012-58-54%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$烽火台$$<br>烽火台高均五丈，周围建小城，高一丈五尺，上设悬楼垒木，下设壕堑吊桥，外设塌窖陷阱；门道上置水柜，冬日盛冰、夏日盛水；不修台阶，以绳梯上下；每台有火铳、火炮2门，有守卒10人。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/hgfm3n6odz2f1k2ilmz42gyu/2016-10-04%2012-54-09%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$城墙$$</p>
<p>八达岭长城城墙高6～9米，平面呈梯形，底宽6.5～7.5米、顶宽4.5～5.8米。大部墙顶宽阔平坦，可以“五马并骑、十人并行”；城墙中线偏于外侧，外侧墙高，内侧墙低。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[北京奥林匹克公园 Beijing Olympic Park]]></title>
      <url>http://shenyu.wiki/2016/06/09/%E5%8C%97%E4%BA%AC%E5%A5%A5%E6%9E%97%E5%8C%B9%E5%85%8B%E5%85%AC%E5%9B%AD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>北京奥林匹克公园位于北京市朝阳区，地处北京城中轴线北端。2008年奥运会比赛期间，有鸟巢、水立方、国家体育馆、等10个奥运会竞赛场馆。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/usu0xch6mcnp42rby3u62p8p/2016-10-04%2013-45-00%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$ 鸟巢　水立方$$<br>国家游泳中心又称水立方,长宽高分别为177m ×177m×30m。其与国家体育场(俗称鸟巢)分列于北京城市中轴线北端的两侧。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/k0ej1vatj5ffs5vkn9uwpa4j/2016-10-04%2013-44-17%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$ 鸟巢$$<br>国家体育场（鸟巢）位于北京奥林匹克公园中心区南部，为2008年北京奥运会的主体育场。工程总占地面积21公顷。奥运会后成为北京市民参与体育活动及享受体育娱乐的大型专业场所，并成为地标性的体育建筑和奥运遗产。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/hpflyee8d2bh61j7gr7yzwx9/2016-10-04%2013-46-17%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$湖$$<br>森林公园的湖泊作为“龙头”，引起整个奥林匹克公园之中的龙形水系，把自然引入城市。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[天安门 Tiananmen]]></title>
      <url>http://shenyu.wiki/2016/05/01/%E5%A4%A9%E5%AE%89%E9%97%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>天安门，坐落在中华人民共和国首都北京市的中心、故宫的南端，与天安门广场以及人民英雄纪念碑、毛主席纪念堂、人民大会堂、中国国家博物馆隔长安街相望，占地面积4800平方米，以杰出的建筑艺术和特殊的政治地位为世人所瞩目。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/bnyu3xl0wxhl05pnn8y5p207/CghzfFW655SATWClAA_8fZQFgUE656.jpg" alt=""><br>$$天安门广场$$<br>天安门广场位于北京市中心，南北长880米，东西宽500米，面积达44万平方米，可容纳100万人举行盛大集会。是当今世界上最大的城中广场。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/fjim634uhf8dcj13zwk7ocqv/2016-10-04%2013-17-24%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$天安门$$<br>天安门是明清两代北京皇城的正门，始建于明朝永乐十五年（1417年）。天安门城楼长66米、宽37米。正中门洞上方悬挂着毛泽东画像，两边分别是“中华人民共和国万岁”和“世界人民大团结万岁”的大幅标语。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/9jz54rnyvcztch5gfgjvxv09/2016-10-04%2013-19-51%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$天安门城楼$$<br>天安门城楼为中国传统的重檐歇山顶建筑。城楼为木结构建筑，大殿飞檐下是排列有序的斗拱和梁枋。斗拱为中国传统木构架体系中独有，是斗形木弓形横木组成的具有翘、昂、拱特点的木制构件。梁枋又分额枋、檐枋，斗拱下面是额枋，上面彩画和金龙图案，柱子之间的构件叫檐枋，会有金龙和玺图案。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[兰州 Lanzhou]]></title>
      <url>http://shenyu.wiki/2016/03/08/%E5%85%B0%E5%B7%9E/</url>
      <content type="html"><![CDATA[<blockquote>
<p>兰州，甘肃省省会，中国西北地区重要的工业基地和综合交通枢纽，西部地区重要的中心城市之一，丝绸之路经济带的重要节点城市，也是西部战区陆军机关驻地。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/m48as8mnj56ad9tb9wj3q0jq/2016-10-04%2015-41-17%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$兰州拉面$$</p>
<p>兰州拉面，又称兰州清汤牛肉面，是“中国十大面条”之一，是甘肃省兰州地区的风味小吃。它以“汤镜者清，肉烂者香，面细者精”的独特风味和“一清二白三红四绿五黄”，一清（汤清）、二白（萝卜白）、三红（辣椒油红）、四绿（香菜、蒜苗绿）、五黄（面条黄亮），赢得了国内乃至全世界顾客的好评。并被中国烹饪协会评为三大中式快餐之一，得到美誉“中华第一面”。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/qa18kqba37amdo3wcbdbcuke/2016-10-04%2015-38-26%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$兰州大学$$<br>兰州大学（Lanzhou University），创建于1909年,由中华人民共和国教育部直属，中央直管副部级建制，位列“211工程”、“985工程”大学行列，设有研究生院，是一所综合性全国重点大学。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/4uruja4fkccttw39t7h6nu9p/2016-10-04%2015-38-57%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$黄河兰州段$$</p>
<p>黄河，中国北部大河，全长约5464公里，流域面积约752443平方公里。世界第六大长河，中国第二长河。黄河兰州段全长45.2公里，由于尚未流经黄土高原，水质清澈。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown test]]></title>
      <url>http://shenyu.wiki/2016/01/20/markdown-test/</url>
      <content type="html"><![CDATA[<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p>
<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>
<h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="external">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>
<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>
</blockquote>
<hr>
<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="external">Todo 列表</a></h3><ul>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[x] 新增 Todo 列表功能</li>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>
<h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">			    <span class="comment"># A comment</span></div><div class="line">				    <span class="keyword">print</span> <span class="string">'hello world'</span></div></pre></td></tr></table></figure>
<h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="external">流程图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: Start</div><div class="line">op=&gt;operation: Your Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line">e=&gt;end</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="external">序列图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>
<h3 id="6-绘制表格"><a href="#6-绘制表格" class="headerlink" title="6. 绘制表格"></a>6. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="7-更详细语法说明"><a href="#7-更详细语法说明" class="headerlink" title="7. 更详细语法说明"></a>7. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="external">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="external">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>
<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<hr>
<h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>
<h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右测的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>
<h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>
<h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>
<h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p>
<p>通过管理工具栏可以：</p>
<p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>
<h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p>
<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>
<p>工具栏上的五个图标依次为：</p>
<p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>
<h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>
<h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>
<p>标签： 未分类</p>
<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>
<p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p>
<h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>
<hr>
<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>
<p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="external">@ghosert</a><br>2015 年 06月 15日    </p>
<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax</a> 参考更多使用方法。</p>
<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>
<p>如果还想看到更多此类文章，请移步到<a href="http://shenyu.wiki">小宇的博客</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql数据处理]]></title>
      <url>http://shenyu.wiki/2015/02/17/mysql%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><blockquote>
<p>将近10天的温度数据，9个温度测点，采样间隔为1分钟，共计12万行数据，需要导出每小时的温度数据。</p>
</blockquote>
<p>ps: 现在有很多工具，比如mysql workbench可以很方便完成数据导入的工作。这里用ｃ语言把数据转为insert语句，是为了更好的解释其中的工作原理。</p>
<h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><p>数据格式如下：有3列，分别是日期，时间，温度。文件名是测点编号。</p>
<p><img src="http://img.blog.csdn.net/20141125135942138?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hlbnl1Zmx5aW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="ddd"></p>
<h2 id="数据库设计为如下"><a href="#数据库设计为如下" class="headerlink" title="数据库设计为如下"></a>数据库设计为如下</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> sensorDB;  </div><div class="line"><span class="keyword">use</span> sensorDB;  </div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> sensor  </div><div class="line">(  </div><div class="line">    <span class="keyword">ID</span> <span class="built_in">smallint</span> ,  </div><div class="line">    dt <span class="built_in">Date</span>,  </div><div class="line">    tm <span class="keyword">Time</span>,  </div><div class="line">    temp <span class="built_in">float</span>,  </div><div class="line">    primary <span class="keyword">key</span> (<span class="keyword">ID</span>,dt,tm)  </div><div class="line">);</div></pre></td></tr></table></figure>
<p>建立一个视图把dt和tm两个字段合并<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> temperature  </div><div class="line"><span class="keyword">as</span>  </div><div class="line"><span class="keyword">select</span> <span class="keyword">ID</span>, <span class="keyword">cast</span>(<span class="keyword">CONCAT</span>(dt,<span class="string">' '</span>,tm) <span class="keyword">as</span> datetime) <span class="string">'时间'</span> , temp <span class="keyword">from</span> sensor   ;</div></pre></td></tr></table></figure></p>
<h2 id="txt格式文件导入数据库"><a href="#txt格式文件导入数据库" class="headerlink" title="txt格式文件导入数据库"></a>txt格式文件导入数据库</h2><p>用C语言写了一个小工具，可以把txt转成sql语句【见后面的源代码】        运行后，输入txt的文件名，要插入的表名，和传感器的编号即可。   程序运行完毕之后，自动生成sql语句如下：<br><img src="http://img.blog.csdn.net/20141125140008127?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hlbnl1Zmx5aW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="d"><br>然后直接运行sql语句，数据就导入到数据库中了。</p>
<h2 id="按指定间隔查询数据"><a href="#按指定间隔查询数据" class="headerlink" title="按指定间隔查询数据"></a>按指定间隔查询数据</h2><p>利用了timestampdiff（）来计算时间间隔 ，并利用%来逐个判断</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> temperature <span class="keyword">where</span> <span class="keyword">ID</span> = <span class="number">9</span> <span class="keyword">and</span>  <span class="keyword">timestampdiff</span>(<span class="keyword">MINUTE</span>,时间,<span class="string">'2014-04-19 15:00:00'</span>)%<span class="number">60</span> =<span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>如下便是间隔1小时的温度数据</p>
<p><img src="http://img.blog.csdn.net/20141125140019422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hlbnl1Zmx5aW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="dd"></p>
<h2 id="附件：txt转sql源代码-C"><a href="#附件：txt转sql源代码-C" class="headerlink" title="附件：txt转sql源代码 C"></a>附件：txt转sql源代码 C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span>  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_LEN 2048  </span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> sp[] = &#123; <span class="string">' '</span>, <span class="string">'\t'</span>, <span class="string">';'</span>,<span class="string">'\r'</span>,<span class="string">'\n'</span> &#125;;  </div><div class="line">  </div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">char</span> *msg)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"ERROR:%s"</span>,msg);  </div><div class="line">    fflush(<span class="built_in">stdin</span>);  </div><div class="line">    getchar();  </div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isSeperator</span><span class="params">(<span class="keyword">char</span>  ch)</span>  </span></div><div class="line">&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(sp) / <span class="keyword">sizeof</span>(<span class="keyword">char</span>); i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span> ( ch == sp[i])  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"=============================\n"</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"          txt2sql\n"</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"=============================\n"</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"data fielname: "</span>);  </div><div class="line">    fflush(<span class="built_in">stdin</span>);  </div><div class="line">    <span class="keyword">char</span> filename_in[<span class="number">256</span>], filename_out[<span class="number">256</span>];  </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,filename_in);  </div><div class="line">    <span class="built_in">strcpy</span>(filename_out, filename_in);  </div><div class="line">    <span class="built_in">strcat</span>(filename_out, <span class="string">"_sql.txt"</span>);  </div><div class="line">    <span class="built_in">strcat</span>(filename_in, <span class="string">".txt"</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"table name: "</span>);  </div><div class="line">    fflush(<span class="built_in">stdin</span>);  </div><div class="line">    <span class="keyword">char</span> table_name[<span class="number">256</span>];  </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, table_name);  </div><div class="line">  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sensor ID: "</span>);  </div><div class="line">    fflush(<span class="built_in">stdin</span>);  </div><div class="line">    <span class="keyword">char</span> sensor_ID[<span class="number">256</span>];  </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, sensor_ID);  </div><div class="line">  </div><div class="line">  </div><div class="line">    FILE *fin = fopen(filename_in, <span class="string">"r"</span>);  </div><div class="line">    FILE *fout = fopen(filename_out, <span class="string">"w"</span>);  </div><div class="line">    <span class="keyword">if</span> (fin == <span class="literal">NULL</span> || fout == <span class="literal">NULL</span>)  </div><div class="line">    &#123;  </div><div class="line">        error(<span class="string">"cannot open file"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">char</span> buffer[BUFFER_LEN];  </div><div class="line">    <span class="keyword">while</span> (fgets(buffer, BUFFER_LEN, fin) != <span class="number">0</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="comment">//除去多余的分隔符  </span></div><div class="line">        <span class="keyword">char</span> elem[BUFFER_LEN];  </div><div class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;  </div><div class="line">        <span class="built_in">memset</span>(elem, <span class="number">0</span>, <span class="keyword">sizeof</span>(elem));  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(buffer); i++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> (buffer[i] == <span class="string">'\n'</span> || buffer[i] == <span class="string">'\r'</span> || buffer[i]==<span class="string">'\0'</span>) buffer[i] = <span class="string">' '</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(buffer); i++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> (!isSeperator(buffer[i]))  </div><div class="line">            &#123;  </div><div class="line">                elem[k++] = buffer[i];  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">            &#123;  </div><div class="line">                <span class="comment">//如果最后一个是分隔符则跳过  </span></div><div class="line">                <span class="keyword">if</span> (i == <span class="built_in">strlen</span>(buffer) &amp;&amp; isSeperator(buffer[i]))  </div><div class="line">                    <span class="keyword">continue</span>;  </div><div class="line">                <span class="comment">//如果下一个还是分隔符，则跳过。  </span></div><div class="line">                <span class="keyword">if</span> (i != <span class="built_in">strlen</span>(buffer) - <span class="number">1</span> &amp;&amp; isSeperator(buffer[i + <span class="number">1</span>]))  </div><div class="line">                    <span class="keyword">continue</span>;  </div><div class="line">                <span class="keyword">if</span> (i != <span class="built_in">strlen</span>(buffer) - <span class="number">1</span> &amp;&amp; !isSeperator(buffer[i + <span class="number">1</span>]))  </div><div class="line">                                elem[k++] = buffer[i];  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">/*printf("\"%s\"",elem);*/</span>  </div><div class="line">        <span class="comment">//经过处理的elem只有包含一个分隔符在一起的情况，最后没有空元素  </span></div><div class="line">  </div><div class="line">        <span class="built_in">fprintf</span>(fout, <span class="string">"INSERT INTO %s VALUES ('%s',"</span>, table_name,sensor_ID);  </div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(elem); i++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> (isSeperator(elem[i]))  </div><div class="line">            &#123;  </div><div class="line">                  </div><div class="line">                <span class="built_in">fprintf</span>(fout, <span class="string">"\'"</span>);  </div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = left; j &lt; i; j++)  </div><div class="line">                &#123;  </div><div class="line">                    <span class="built_in">fprintf</span>(fout, <span class="string">"%c"</span>, elem[j]);  </div><div class="line">                &#125;  </div><div class="line">                <span class="built_in">fprintf</span>(fout, <span class="string">"\',"</span>);  </div><div class="line">                left = i + <span class="number">1</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">//the last one  </span></div><div class="line">        <span class="built_in">fprintf</span>(fout, <span class="string">"\'"</span>);  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = left; j &lt; <span class="built_in">strlen</span>(elem); j++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="built_in">fprintf</span>(fout, <span class="string">"%c"</span>, elem[j]);  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">fprintf</span>(fout, <span class="string">"\');\n"</span>);  </div><div class="line">           </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">  </div><div class="line">  </div><div class="line">    fclose(fin);   </div><div class="line">    fclose(fout);  </div><div class="line">  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Done!"</span>);  </div><div class="line">    fflush(<span class="built_in">stdin</span>);  </div><div class="line">    getchar();  </div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[动态增长的栈]]></title>
      <url>http://shenyu.wiki/2015/01/31/%E5%8A%A8%E6%80%81%E5%A2%9E%E9%95%BF%E7%9A%84%E6%A0%88/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>C语言实现stack数据结构<br>能够</p>
<ol>
<li>push的时候动态增长。每次扩大一倍：2,4,8,16,32…</li>
<li>pop的时候还能自动释放地址。</li>
</ol>
<a id="more"></a> 
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line">   </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"linked_list_stack/my_linked_list_stack.h"</span>  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    MY_STACK  <span class="built_in">stack</span>;  </div><div class="line">    my_stack_init(&amp;<span class="built_in">stack</span>);  </div><div class="line">    my_stack_push(&amp;<span class="built_in">stack</span>,<span class="number">1</span>);  </div><div class="line">    my_stack_push(&amp;<span class="built_in">stack</span>,<span class="number">2</span>);  </div><div class="line">    my_stack_push(&amp;<span class="built_in">stack</span>,<span class="number">3</span>);  </div><div class="line">    my_stack_push(&amp;<span class="built_in">stack</span>,<span class="number">4</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,my_stack_pop(&amp;<span class="built_in">stack</span>));  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,my_stack_pop(&amp;<span class="built_in">stack</span>));  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,my_stack_pop(&amp;<span class="built_in">stack</span>));  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,my_stack_pop(&amp;<span class="built_in">stack</span>));  </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MY_STACK_H_  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _MY_STACK_H_  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span> <span class="comment">/*memset(void *s, int c, size_t n)*/</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _DEBUG_  </span></div><div class="line"><span class="comment">/*type for the stack T ,you can typedef your own*/</span>  </div><div class="line">  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> T;  </div><div class="line"><span class="keyword">struct</span> my_block_st  </div><div class="line">&#123;  </div><div class="line">    T * ptr;<span class="comment">/*point to the allocate memory*/</span>  </div><div class="line">    <span class="keyword">struct</span> my_block_st * pre;  </div><div class="line">    <span class="keyword">int</span>  index;  </div><div class="line">    <span class="keyword">size_t</span> block_size;<span class="comment">/*size of the current block ...*/</span>  </div><div class="line">&#125;;  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> my_block_st MY_BLOCK;  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> my_block_st *  MY_STACK; <span class="comment">/*point to the last block*/</span>  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_stack_init_block</span><span class="params">(MY_BLOCK **block_ptr)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="comment">/*initially the size=1, and twice the size each time*/</span>  </div><div class="line">     (*block_ptr)-&gt;block_size = (*block_ptr)-&gt;block_size*<span class="number">2</span>;  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"my_stack_init_block() size=%ld\n"</span>,((*block_ptr)-&gt;block_size));  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    (*block_ptr)-&gt;ptr =(T *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(T)* ((*block_ptr)-&gt;block_size));</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"new block add=%p\n"</span>,(*block_ptr)-&gt;ptr);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    <span class="keyword">if</span>((*block_ptr)-&gt;ptr==<span class="literal">NULL</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"malloc err\n"</span>);  </div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </div><div class="line">    &#125;  </div><div class="line">    (*block_ptr)-&gt;index=<span class="number">-1</span>;  </div><div class="line">    <span class="built_in">memset</span>((*block_ptr)-&gt;ptr,<span class="number">0</span>,<span class="keyword">sizeof</span>((*block_ptr)-&gt;ptr));  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_stack_init</span><span class="params">(MY_STACK * s)</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"my_stack_init()\n"</span>);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    *s=(MY_STACK)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MY_BLOCK ));  </div><div class="line">    (*s)-&gt;block_size=<span class="number">1</span>;  </div><div class="line">    my_stack_init_block(&amp;(*s));  </div><div class="line">    (*s)-&gt;pre=<span class="literal">NULL</span>;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_stack_add_block</span><span class="params">(MY_STACK *s)</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"my_stack_add_block()\n"</span>);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    MY_BLOCK   * ptr_block=(MY_BLOCK*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MY_BLOCK));  </div><div class="line">    ptr_block-&gt;block_size = (*s)-&gt;block_size;<span class="comment">/*pass the current size o new block*/</span>  </div><div class="line">    my_stack_init_block(&amp;ptr_block);  </div><div class="line">    MY_BLOCK *tmp_ptr= (*s);  </div><div class="line">    *s=ptr_block;  </div><div class="line">    (*s)-&gt;pre=tmp_ptr;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_block_is_full</span><span class="params">(MY_BLOCK **s)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>(((*s)-&gt;index)==((*s)-&gt;block_size<span class="number">-1</span>))  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_block_is_empty</span><span class="params">(MY_STACK *s)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>( (*s)-&gt;index==<span class="number">-1</span>)  </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_stack_is_empty</span><span class="params">(MY_STACK *s)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>( (*s)-&gt;pre==<span class="literal">NULL</span> &amp;&amp; (*s)-&gt; index==<span class="number">-1</span>)  </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_stack_push</span><span class="params">(MY_STACK *s, T elem)</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"my_stack_push(%ld)\n"</span>,elem);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    <span class="keyword">if</span>(my_block_is_full(&amp;(*s)))  </div><div class="line">    &#123;  </div><div class="line">        my_stack_add_block(&amp;(*s));  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    ( *s)-&gt;index++;  </div><div class="line">    *(( *s)-&gt;ptr+(*s)-&gt;index)=elem;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function">T <span class="title">my_stack_pop</span><span class="params">(MY_STACK *s)</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"my_stack_pop()\n"</span>);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    <span class="keyword">if</span>(my_stack_is_empty(&amp;(*s)))  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"err: empty stack cannot pop!\n"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">if</span>(my_block_is_empty(&amp;(*s)))  </div><div class="line">    &#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"free %p\n "</span>,( *s)-&gt;ptr);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">        <span class="built_in">free</span>((*s)-&gt; ptr);  </div><div class="line">        *s=(*s)-&gt;pre;  </div><div class="line">    &#125;  </div><div class="line">    T tmp;  </div><div class="line">    tmp = *(( *s)-&gt;ptr+( *s)-&gt;index);  </div><div class="line">     --(( *s)-&gt;index);  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">              <span class="built_in">printf</span>(<span class="string">"return %ld\n"</span>,tmp);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> tmp;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*_MY_STACK_H_*/</span></span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[清华北大 Tsinghua and Peking University]]></title>
      <url>http://shenyu.wiki/2014/10/02/%E6%B8%85%E5%8D%8E%E5%8C%97%E5%A4%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>清华大学、北京大学是中国乃至亚洲最著名的高等学府之一。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/sgb8x1x819sneyf4hi8ao1kd/2016-10-04%2016-52-22%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$清华大学$$</p>
<p><img src="http://static.zybuluo.com/shenyuflying/v6m1ki0ntl2s1k0hfmtfm8bi/2016-10-04%2016-38-49%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$北京大学$$</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[西安 Xi'an]]></title>
      <url>http://shenyu.wiki/2014/10/01/%E8%A5%BF%E5%AE%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>西安，古称“长安”、“镐京”，是陕西省省会，地处关中平原中部，北濒渭河，南依秦岭，八水润长安。长安自古帝王都，其先后有西周、秦、西汉、新莽、西晋、前赵、前秦、后秦、西魏、北周、隋、唐13个王朝在西安地区建都（积年为1077年）。是中华文明和中华民族重要发祥地之一，丝绸之路的起点。丰镐都城、秦咸阳宫、兵马俑，汉未央宫、长乐宫，隋大兴城，唐大明宫、兴庆宫等勾勒出“长安情结”。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/jt4bnct6ra6e1gprd91pcadu/2016-10-04%2016-36-36%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p>
<p>$$长安夜景$$</p>
<p><img src="http://static.zybuluo.com/shenyuflying/3o4u8r5dmaza9i5ygvnos37j/2016-10-04%2016-34-23%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$西安电子科技大学$$<br>西安电子科技大学（Xidian University）简称“西电”或“西军电”，国家首批“211工程”、“985工程优势学科创新平台”、“2011计划”（牵头建设信息感知技术协同创新中心）。我国最早的2所国防工业重点军校之一（哈军工、西军电并称），中国电子信息领域科学研究和人才培养的核心基地，中国雷达、信息论、密码学、电子对抗、微波天线等学科的发源地。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/sxa81se0j9uwh5aae85s9t3t/2016-10-04%2016-35-07%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$西北大学$$<br>西北大学（NorthwestUniversity），简称“西大”，始建于1902年，由清末光绪皇帝御笔朱批设立，坐落于古都西安，是国家教育部与陕西省人民政府共建的综合性全国重点大学，“211工程”、“中西部高校基础能力建设工程大学，是中国西北地区历史最为悠久的高等学府。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/gct910y0hvzghqcx544a95nw/2016-10-04%2016-35-40%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$古城墙$$</p>
<p>西安明城墙位于陕西省西安市中心区，是中国现存规模最大、保存最完整的古代城垣。墙高18米，顶宽12—14米，底宽15—18米，轮廓呈封闭的长方形，周长13.74公里。城墙内人们习惯称为古城区，面积11.32平方公里，著名的西安钟鼓楼就位于古城区中心。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/dypgy8xjth7olt40z9k73hj7/2016-10-04%2016-37-15%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$回民街$$<br>西安回民街是西安著名的美食文化街区，是西安特色小吃最集中的街区，也是来西安必去的地方。其历史悠久，距今已有上千年历史。其深厚的文化底蕴，街道两旁大量的美食店铺，近300种特色风味小吃，让人流连忘返，欲罢不能的魅力所在！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[岳麓书院]]></title>
      <url>http://shenyu.wiki/2014/02/04/%E5%B2%B3%E9%BA%93%E4%B9%A6%E9%99%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>岳麓书院是古代汉族书院建筑，属于中国历史上著名的四大书院之一。位于湖南省长沙市湘江西岸的岳麓山风景区岳麓山东面山下。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/4f2hd5u2hssbwjt1ahumriu2/2016-10-04%2016-24-46%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$岳麓书院正门$$</p>
<p>北宋开宝九年（976年），潭州太守朱洞在僧人办学的基础上，由官府捐资兴建，正式创立岳麓书院。嗣后，历经宋、元、明、清各代，至清末光绪二十九年（1903年）改为湖南高等学堂。祥符八年（公元1015年），宋真宗召见山长周式，并赐书“岳麓书院”四字门额。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/2ywjg4gtgiatat48s0hvsa55/2016-10-04%2016-05-20%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$文物保护单位$$</p>
<p>1988年，岳麓书院建筑群被国务院批准为第三批全国重点文物保护单位。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[凤凰古城 Phoenix Town]]></title>
      <url>http://shenyu.wiki/2014/02/04/%E5%87%A4%E5%87%B0%E5%8F%A4%E5%9F%8E/</url>
      <content type="html"><![CDATA[<blockquote>
<p>凤凰古城，位于湖南省湘西土家族苗族自治州的西南部，土地总面积约10平方千米, 建于清康熙四十三年〔1704年〕。2001年被授予国家历史文化名城称号，湖南十大文化遗产之一。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/bo7tstohjhne8ixrbirr4chc/2016-10-04%2016-13-46%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$凤凰夜景$$</p>
<p><img src="http://static.zybuluo.com/shenyuflying/kzge3c4f2hk51njclauyc0h2/2016-10-04%2016-04-51%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$凤凰夜景$$<br>左上角那个是一座宝塔，在夜晚仿佛是悬在半空中。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/t5f3ik73nhlhh8awf4jl4yah/2016-10-04%2016-04-21%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$凤凰城$$<br>2001年4月8日下午,国家总理朱镕基亲临此楼,激动之情露于言表,并在此欣然挥毫,留下“朱镕基 辛巳春 凤凰城”珍贵墨宝。</p>
]]></content>
    </entry>
    
  
  
</search>
